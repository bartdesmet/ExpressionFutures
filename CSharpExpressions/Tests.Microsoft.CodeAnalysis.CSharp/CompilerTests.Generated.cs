// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests
    {
        [TestMethod]
        public void CompilerTest_9D30_AA02()
        {
            // (Expression<Func<int>>)(() => 42)
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => 42)");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Constant Type=""System.Int32"" Value=""42"" />
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9D30_AA02();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9D30_AA02() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3ECF_6910()
        {
            // (Expression<Func<string, int>>)(s => s.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int>>)(s => s.Length)");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
    </MemberAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3ECF_6910();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3ECF_6910() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F51F_71B6()
        {
            // (Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""1, 1"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""42"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F51F_71B6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F51F_71B6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_E70E_4B35()
        {
            // (Expression<Func<int[,]>>)(() => new int[1, 2] { { 42, 43 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[1, 2] { { 42, 43 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""1, 2"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""42"" />
        <Constant Type=""System.Int32"" Value=""43"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E70E_4B35();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E70E_4B35() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_59A0_FFB9()
        {
            // (Expression<Func<int[,]>>)(() => new int[2, 1] { { 42 }, { 43 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[2, 1] { { 42 }, { 43 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""2, 1"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""42"" />
        <Constant Type=""System.Int32"" Value=""43"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_59A0_FFB9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_59A0_FFB9() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_789A_453A()
        {
            // (Expression<Func<int[,]>>)(() => new int[2, 2] { { 41, 42 }, { 43, 44 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[2, 2] { { 41, 42 }, { 43, 44 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""2, 2"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""41"" />
        <Constant Type=""System.Int32"" Value=""42"" />
        <Constant Type=""System.Int32"" Value=""43"" />
        <Constant Type=""System.Int32"" Value=""44"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_789A_453A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_789A_453A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_E9F4_7C15()
        {
            // (Expression<Func<int>>)(() => Math.Abs(value: 42))
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => Math.Abs(value: 42))");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <CSharpCall Type=""System.Int32"" Method=""Int32 Abs(Int32)"">
      <Arguments>
        <ParameterAssignment Parameter=""Int32 value"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E9F4_7C15();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E9F4_7C15() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_4EB1_83FD()
        {
            // (Expression<Func<string, string>>)(s => s.Substring(startIndex: 42))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(startIndex: 42))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4EB1_83FD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4EB1_83FD() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C437_AA4C()
        {
            // (Expression<Func<string, string>>)(s => s.Substring(startIndex: 42, length: 43))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(startIndex: 42, length: 43))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32, Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Int32 length"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""43"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C437_AA4C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C437_AA4C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_4C39_BCFC()
        {
            // (Expression<Func<string, string>>)(s => s.Substring(length: 43, startIndex: 42))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(length: 43, startIndex: 42))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32, Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 length"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""43"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4C39_BCFC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4C39_BCFC() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7E8C_AA4C()
        {
            // (Expression<Func<string, string>>)(s => s.Substring(42, length: 43))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(42, length: 43))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32, Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Int32 length"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""43"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7E8C_AA4C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7E8C_AA4C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_00C1_AE5C()
        {
            // (Expression<Func<TimeSpan>>)(() => new TimeSpan(ticks: 42L))
            var actual = GetDebugView(@"(Expression<Func<TimeSpan>>)(() => new TimeSpan(ticks: 42L))");
            var expected = @"
<Lambda Type=""System.Func`1[System.TimeSpan]"">
  <Parameters />
  <Body>
    <CSharpNew Type=""System.TimeSpan"" Constructor=""Void .ctor(Int64)"">
      <Arguments>
        <ParameterAssignment Parameter=""Int64 ticks"">
          <Expression>
            <Constant Type=""System.Int64"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpNew>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_00C1_AE5C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_00C1_AE5C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D9CA_6B19()
        {
            // (Expression<Func<TimeSpan>>)(() => new TimeSpan(seconds: 3, minutes: 2, hours: 1))
            var actual = GetDebugView(@"(Expression<Func<TimeSpan>>)(() => new TimeSpan(seconds: 3, minutes: 2, hours: 1))");
            var expected = @"
<Lambda Type=""System.Func`1[System.TimeSpan]"">
  <Parameters />
  <Body>
    <CSharpNew Type=""System.TimeSpan"" Constructor=""Void .ctor(Int32, Int32, Int32)"">
      <Arguments>
        <ParameterAssignment Parameter=""Int32 seconds"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""3"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Int32 minutes"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""2"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Int32 hours"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpNew>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D9CA_6B19();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D9CA_6B19() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EDEC_D0C9()
        {
            // (Expression<Func<List<int>, int>>)(xs => xs[index: 42])
            var actual = GetDebugView(@"(Expression<Func<List<int>, int>>)(xs => xs[index: 42])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIndex Type=""System.Int32"" Indexer=""Int32 Item [Int32]"">
      <Object>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 index"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EDEC_D0C9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EDEC_D0C9() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6271_EABC()
        {
            // (Expression<Action<Action<int>>>)(a => a(obj: 42))
            var actual = GetDebugView(@"(Expression<Action<Action<int>>>)(a => a(obj: 42))");
            var expected = @"
<Lambda Type=""System.Action`1[System.Action`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Action`1[System.Int32]"" Id=""0"" Name=""a"" />
  </Parameters>
  <Body>
    <CSharpInvoke Type=""System.Void"">
      <Expression>
        <Parameter Type=""System.Action`1[System.Int32]"" Id=""0"" Name=""a"" />
      </Expression>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 obj"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6271_EABC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6271_EABC() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_053A_671C()
        {
            // (Expression<Action<Action<string, int, bool>>>)(a => a(arg2: 42, arg1: "foo", arg3: false))
            var actual = GetDebugView(@"(Expression<Action<Action<string, int, bool>>>)(a => a(arg2: 42, arg1: ""foo"", arg3: false))");
            var expected = @"
<Lambda Type=""System.Action`1[System.Action`3[System.String,System.Int32,System.Boolean]]"">
  <Parameters>
    <Parameter Type=""System.Action`3[System.String,System.Int32,System.Boolean]"" Id=""0"" Name=""a"" />
  </Parameters>
  <Body>
    <CSharpInvoke Type=""System.Void"">
      <Expression>
        <Parameter Type=""System.Action`3[System.String,System.Int32,System.Boolean]"" Id=""0"" Name=""a"" />
      </Expression>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 arg2"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""System.String arg1"">
          <Expression>
            <Constant Type=""System.String"" Value=""foo"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Boolean arg3"">
          <Expression>
            <Constant Type=""System.Boolean"" Value=""false"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_053A_671C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_053A_671C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B473_5F62()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => +x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => +x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""UnaryPlus"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B473_5F62();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B473_5F62() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8E43_6B25()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => -x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => -x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""Negate"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8E43_6B25();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8E43_6B25() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_CE27_211A()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => !x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => !x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""Not"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CE27_211A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CE27_211A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EA86_0AAE()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => ~x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => ~x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""OnesComplement"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EA86_0AAE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EA86_0AAE() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7005_E877()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => checked(-x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => checked(-x))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""Negate"" Flags=""CheckedContext"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7005_E877();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7005_E877() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_775D_E1DB()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a + b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a + b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Add"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_775D_E1DB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_775D_E1DB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_84B6_6376()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a - b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a - b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Subtract"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_84B6_6376();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_84B6_6376() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_754C_C121()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a * b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a * b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Multiply"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_754C_C121();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_754C_C121() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6E28_DBCA()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a / b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a / b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Divide"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6E28_DBCA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6E28_DBCA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A085_4C3D()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a % b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a % b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Modulo"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A085_4C3D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A085_4C3D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_DE17_40A5()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a & b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a & b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""And"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DE17_40A5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DE17_40A5() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5CD0_0AE2()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a | b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a | b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Or"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5CD0_0AE2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5CD0_0AE2() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0C84_0C91()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a ^ b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a ^ b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""ExclusiveOr"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0C84_0C91();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0C84_0C91() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_FF88_BC1C()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a < b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a < b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""LessThan"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FF88_BC1C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FF88_BC1C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F2A3_DCF3()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a <= b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a <= b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""LessThanOrEqual"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F2A3_DCF3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F2A3_DCF3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3DBC_7187()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a > b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a > b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""GreaterThan"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3DBC_7187();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3DBC_7187() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5002_22B5()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a >= b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a >= b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""GreaterThanOrEqual"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5002_22B5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5002_22B5() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1A1B_4504()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a == b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a == b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Equal"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1A1B_4504();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1A1B_4504() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8DF7_1EFB()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a != b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a != b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""NotEqual"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8DF7_1EFB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8DF7_1EFB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5F46_EC7B()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a << b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a << b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""LeftShift"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5F46_EC7B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5F46_EC7B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_106F_B1CC()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a >> b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a >> b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""RightShift"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_106F_B1CC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_106F_B1CC() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2275_966C()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a && b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a && b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""And"" Flags=""BinaryOperationLogical"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2275_966C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2275_966C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_FB20_C3F6()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a || b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a || b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Or"" Flags=""BinaryOperationLogical"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FB20_C3F6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FB20_C3F6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_191C_CEEB()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Add"" Flags=""CheckedContext"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_191C_CEEB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_191C_CEEB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6647_1258()
        {
            // (Expression<Func<dynamic, int>>)(x => (int)x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, int>>)(x => (int)x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.Int32"" Flags=""ConvertExplicit"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6647_1258();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6647_1258() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_93FA_3B2C()
        {
            // (Expression<Func<dynamic, string>>)(x => (string)x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, string>>)(x => (string)x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.String"" Flags=""ConvertExplicit"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_93FA_3B2C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_93FA_3B2C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8FB3_87A6()
        {
            // (Expression<Func<dynamic, object>>)(x => (object)x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, object>>)(x => (object)x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <Convert Type=""System.Object"">
      <Operand>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Operand>
    </Convert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8FB3_87A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8FB3_87A6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AB76_B2ED()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
    </CSharpDynamicGetMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AB76_B2ED();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AB76_B2ED() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_14B0_8F1F()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo())
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo())");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments />
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_14B0_8F1F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_14B0_8F1F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_ABB7_09A0()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo(1, 2))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo(1, 2))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""2"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_ABB7_09A0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_ABB7_09A0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_647C_869C()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo(x: 1, y: 2))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo(x: 1, y: 2))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""x"" Flags=""UseCompileTimeType, Constant, NamedArgument"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Name=""y"" Flags=""UseCompileTimeType, Constant, NamedArgument"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""2"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_647C_869C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_647C_869C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A62F_E0EA()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo<int>())
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo<int>())");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" TypeArguments=""System.Int32"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments />
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A62F_E0EA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A62F_E0EA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6E0D_C117()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo<int, bool>())
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo<int, bool>())");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" TypeArguments=""System.Int32, System.Boolean"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments />
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6E0D_C117();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6E0D_C117() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_9AE8_6C9F()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9AE8_6C9F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9AE8_6C9F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2069_9E36()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(y: y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(y: y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""y"" Flags=""UseCompileTimeType, NamedArgument"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2069_9E36();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2069_9E36() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_4C1E_1B45()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(ref y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(ref y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, IsRef"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4C1E_1B45();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4C1E_1B45() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5D0B_BB53()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(a: ref y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(a: ref y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsRef"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5D0B_BB53();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5D0B_BB53() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_644B_2D72()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(out y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(out y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, IsOut"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_644B_2D72();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_644B_2D72() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3B77_970B()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(a: out y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(a: out y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsOut"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3B77_970B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3B77_970B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3418_D0D2()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3418_D0D2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3418_D0D2() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0946_2AB1()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(y: y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(y: y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""y"" Flags=""NamedArgument"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0946_2AB1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0946_2AB1() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1B29_3F4D()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(ref y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(ref y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, IsRef"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1B29_3F4D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1B29_3F4D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EEB8_ED24()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(a: ref y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(a: ref y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsRef"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EEB8_ED24();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EEB8_ED24() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7349_817B()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(out y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(out y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, IsOut"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7349_817B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7349_817B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_76D5_13EF()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(a: out y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(a: out y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsOut"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_76D5_13EF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_76D5_13EF() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8619_DB42()
        {
            // (Expression<Func<string, dynamic, dynamic>>)((s, i) => s.Substring(i))
            var actual = GetDebugView(@"(Expression<Func<string, dynamic, dynamic>>)((s, i) => s.Substring(i))");
            var expected = @"
<Lambda Type=""System.Func`3[System.String,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""i"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Substring"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""i"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8619_DB42();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8619_DB42() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_4B4B_894F()
        {
            // (Expression<Func<dynamic, int>>)(x => int.Parse(x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int>>)(x => int.Parse(x))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.Int32"" Context=""Expressions"">
      <Expression>
        <CSharpDynamicInvokeMember Type=""System.Object"" Target=""System.Int32"" Name=""Parse"" Context=""Expressions"">
          <Arguments>
            <DynamicCSharpArgument>
              <Expression>
                <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
              </Expression>
            </DynamicCSharpArgument>
          </Arguments>
        </CSharpDynamicInvokeMember>
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4B4B_894F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4B4B_894F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B5A3_A9EE()
        {
            // (Expression<Func<dynamic, dynamic>>)(f => f())
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(f => f())");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvoke Type=""System.Object"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
      </Expression>
      <Arguments />
    </CSharpDynamicInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B5A3_A9EE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B5A3_A9EE() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_CFDD_AFEF()
        {
            // (Expression<Func<dynamic, dynamic>>)(f => f(1, 2))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(f => f(1, 2))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvoke Type=""System.Object"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
      </Expression>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""2"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CFDD_AFEF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CFDD_AFEF() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F090_0B2E()
        {
            // (Expression<Func<dynamic, dynamic, int, dynamic>>)((f, d, x) => f(d, x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, int, dynamic>>)((f, d, x) => f(d, x))");
            var expected = @"
<Lambda Type=""System.Func`4[System.Object,System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
    <Parameter Type=""System.Int32"" Id=""2"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvoke Type=""System.Object"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
      </Expression>
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Flags=""UseCompileTimeType"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F090_0B2E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F090_0B2E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3646_7B2B()
        {
            // (Expression<Func<dynamic, dynamic, int, dynamic>>)((f, d, x) => f(a: d, b: x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, int, dynamic>>)((f, d, x) => f(a: d, b: x))");
            var expected = @"
<Lambda Type=""System.Func`4[System.Object,System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
    <Parameter Type=""System.Int32"" Id=""2"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvoke Type=""System.Object"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
      </Expression>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""NamedArgument"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Name=""b"" Flags=""UseCompileTimeType, NamedArgument"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3646_7B2B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3646_7B2B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_DC58_213C()
        {
            // (Expression<Func<dynamic, dynamic, int, dynamic>>)((f, d, x) => f(a: ref d, b: out x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, int, dynamic>>)((f, d, x) => f(a: ref d, b: out x))");
            var expected = @"
<Lambda Type=""System.Func`4[System.Object,System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
    <Parameter Type=""System.Int32"" Id=""2"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvoke Type=""System.Object"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""f"" />
      </Expression>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsRef"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Name=""b"" Flags=""UseCompileTimeType, NamedArgument, IsOut"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DC58_213C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DC58_213C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5C4C_E9EB()
        {
            // (Expression<Func<Func<int, int, int>, dynamic, int, dynamic>>)((f, d, x) => f(d, x))
            var actual = GetDebugView(@"(Expression<Func<Func<int, int, int>, dynamic, int, dynamic>>)((f, d, x) => f(d, x))");
            var expected = @"
<Lambda Type=""System.Func`4[System.Func`3[System.Int32,System.Int32,System.Int32],System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Func`3[System.Int32,System.Int32,System.Int32]"" Id=""0"" Name=""f"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
    <Parameter Type=""System.Int32"" Id=""2"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvoke Type=""System.Object"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Func`3[System.Int32,System.Int32,System.Int32]"" Id=""0"" Name=""f"" />
      </Expression>
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Flags=""UseCompileTimeType"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5C4C_E9EB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5C4C_E9EB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_55B7_3EFA()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
          <Object>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Object>
        </CSharpDynamicGetMember>
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_55B7_3EFA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_55B7_3EFA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7760_936B()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x[1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7760_936B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7760_936B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7FDD_6511()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo[a: 1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo[a: 1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
          <Object>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Object>
        </CSharpDynamicGetMember>
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, Constant, NamedArgument"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7FDD_6511();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7FDD_6511() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D809_C13E()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x[a: 1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x[a: 1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, Constant, NamedArgument"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D809_C13E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D809_C13E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_9998_022C()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo[y])
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo[y])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
          <Object>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Object>
        </CSharpDynamicGetMember>
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9998_022C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9998_022C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F77D_040F()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x[y])
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x[y])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F77D_040F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F77D_040F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_604B_718E()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo[a: y])
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo[a: y])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
          <Object>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Object>
        </CSharpDynamicGetMember>
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_604B_718E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_604B_718E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D83C_2D6C()
        {
            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x[a: y])
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x[a: y])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D83C_2D6C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D83C_2D6C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_447A_FCCE()
        {
            // (Expression<Func<dynamic, int, dynamic, dynamic>>)((x, y, z) => x[a: ref y, b: out z])
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic, dynamic>>)((x, y, z) => x[a: ref y, b: out z])");
            var expected = @"
<Lambda Type=""System.Func`4[System.Object,System.Int32,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
    <Parameter Type=""System.Object"" Id=""2"" Name=""z"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsRef"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Name=""b"" Flags=""UseCompileTimeType, NamedArgument, IsOut"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""2"" Name=""z"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_447A_FCCE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_447A_FCCE() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F586_7D7E()
        {
            // (Expression<Func<string, dynamic, dynamic>>)((s, i) => s[i])
            var actual = GetDebugView(@"(Expression<Func<string, dynamic, dynamic>>)((s, i) => s[i])");
            var expected = @"
<Lambda Type=""System.Func`3[System.String,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""i"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""i"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F586_7D7E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F586_7D7E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_22AA_5962()
        {
            // (Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.TimeSpan]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeConstructor Type=""System.TimeSpan"" Context=""Expressions"">
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeConstructor>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_22AA_5962();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_22AA_5962() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_29E3_8116()
        {
            // (Expression<Func<dynamic, int, dynamic, TimeSpan>>)((x, y, z) => new TimeSpan(x, y, z))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic, TimeSpan>>)((x, y, z) => new TimeSpan(x, y, z))");
            var expected = @"
<Lambda Type=""System.Func`4[System.Object,System.Int32,System.Object,System.TimeSpan]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
    <Parameter Type=""System.Object"" Id=""2"" Name=""z"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeConstructor Type=""System.TimeSpan"" Context=""Expressions"">
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Flags=""UseCompileTimeType"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""2"" Name=""z"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeConstructor>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_29E3_8116();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_29E3_8116() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2CE0_A2D8()
        {
            // (Expression<Func<dynamic, List<int>>>)(x => new List<int>(x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, List<int>>>)(x => new List<int>(x))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Collections.Generic.List`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeConstructor Type=""System.Collections.Generic.List`1[System.Int32]"" Context=""Expressions"">
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeConstructor>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2CE0_A2D8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2CE0_A2D8() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D55B_C6C6()
        {
            // (Expression<Func<dynamic, List<int>>>)(x => new List<int>(capacity: x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, List<int>>>)(x => new List<int>(capacity: x))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Collections.Generic.List`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeConstructor Type=""System.Collections.Generic.List`1[System.Int32]"" Context=""Expressions"">
      <Arguments>
        <DynamicCSharpArgument Name=""capacity"" Flags=""NamedArgument"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeConstructor>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D55B_C6C6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D55B_C6C6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2844_368E()
        {
            // (Expression<Action<dynamic>>)(x => { x[1] = 42; })
            var actual = GetDebugView(@"(Expression<Action<dynamic>>)(x => { x[1] = 42; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""Assign"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
              </Object>
              <Arguments>
                <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
                  <Expression>
                    <Constant Type=""System.Int32"" Value=""1"" />
                  </Expression>
                </DynamicCSharpArgument>
              </Arguments>
            </CSharpDynamicGetIndex>
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2844_368E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2844_368E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_9F3A_F93F()
        {
            // (Expression<Action<dynamic>>)(x => { x.Foo[1] = 42; })
            var actual = GetDebugView(@"(Expression<Action<dynamic>>)(x => { x.Foo[1] = 42; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""Assign"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
              <Object>
                <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
                  </Object>
                </CSharpDynamicGetMember>
              </Object>
              <Arguments>
                <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
                  <Expression>
                    <Constant Type=""System.Int32"" Value=""1"" />
                  </Expression>
                </DynamicCSharpArgument>
              </Arguments>
            </CSharpDynamicGetIndex>
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9F3A_F93F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9F3A_F93F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C18D_D9F0()
        {
            // (Expression<Action<List<int>, dynamic>>)((xs, x) => { xs[0] = x; })
            var actual = GetDebugView(@"(Expression<Action<List<int>, dynamic>>)((xs, x) => { xs[0] = x; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Collections.Generic.List`1[System.Int32],System.Object]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpAssign Type=""System.Int32"">
      <Left>
        <CSharpIndex Type=""System.Int32"" Indexer=""Int32 Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.Int32"" Context=""Expressions"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""x"" />
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C18D_D9F0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C18D_D9F0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AC33_6CF6()
        {
            // (Expression<Action<dynamic>>)(x => { x.Foo = 42; })
            var actual = GetDebugView(@"(Expression<Action<dynamic>>)(x => { x.Foo = 42; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""Assign"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AC33_6CF6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AC33_6CF6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7E7C_347D()
        {
            // (Expression<Action<StrongBox<int>, dynamic>>)((b, x) => { b.Value = x; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<int>, dynamic>>)((b, x) => { b.Value = x; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Runtime.CompilerServices.StrongBox`1[System.Int32],System.Object]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Int32]"" Id=""0"" Name=""b"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpAssign Type=""System.Int32"">
      <Left>
        <MemberAccess Type=""System.Int32"" Member=""Int32 Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Int32]"" Id=""0"" Name=""b"" />
          </Expression>
        </MemberAccess>
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.Int32"" Context=""Expressions"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""x"" />
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7E7C_347D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7E7C_347D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_83CF_2E6D()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x++)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x++)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnaryAssign Type=""System.Object"" OperationNodeType=""PostIncrementAssign"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_83CF_2E6D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_83CF_2E6D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5A71_E881()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo++)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo++)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnaryAssign Type=""System.Object"" OperationNodeType=""PostIncrementAssign"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5A71_E881();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5A71_E881() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D153_E7CE()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => x[0]++)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x[0]++)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnaryAssign Type=""System.Object"" OperationNodeType=""PostIncrementAssign"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
              </Object>
              <Arguments>
                <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
                  <Expression>
                    <Constant Type=""System.Int32"" Value=""0"" />
                  </Expression>
                </DynamicCSharpArgument>
              </Arguments>
            </CSharpDynamicGetIndex>
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D153_E7CE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D153_E7CE() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_38EA_1C46()
        {
            // (Expression<Func<dynamic, dynamic>>)(x => checked(--x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => checked(--x))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnaryAssign Type=""System.Object"" OperationNodeType=""PreDecrementAssignChecked"" Flags=""CheckedContext"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_38EA_1C46();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_38EA_1C46() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D565_C82E()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x += y)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x += y)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""AddAssign"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D565_C82E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D565_C82E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_711C_7F96()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo += y)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo += y)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""AddAssign"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_711C_7F96();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_711C_7F96() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_E835_F8BD()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x[0] += y)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x[0] += y)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""AddAssign"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
              </Object>
              <Arguments>
                <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
                  <Expression>
                    <Constant Type=""System.Int32"" Value=""0"" />
                  </Expression>
                </DynamicCSharpArgument>
              </Arguments>
            </CSharpDynamicGetIndex>
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E835_F8BD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E835_F8BD() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C576_1024()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => checked(x -= y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => checked(x -= y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""SubtractAssignChecked"" Flags=""CheckedContext"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C576_1024();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C576_1024() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0FFA_9FD5()
        {
            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t)
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Int32]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Int32"">
              <Info>
                <StaticAwaitInfo IsCompleted=""Boolean IsCompleted"" GetResult=""Int32 GetResult()"">
                  <GetAwaiter>
                    <Lambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Runtime.CompilerServices.TaskAwaiter`1[System.Int32]]"">
                      <Parameters>
                        <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""1"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Call Type=""System.Runtime.CompilerServices.TaskAwaiter`1[System.Int32]"" Method=""System.Runtime.CompilerServices.TaskAwaiter`1[System.Int32] GetAwaiter()"">
                          <Object>
                            <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""1"" Name=""p"" />
                          </Object>
                          <Arguments />
                        </Call>
                      </Body>
                    </Lambda>
                  </GetAwaiter>
                </StaticAwaitInfo>
              </Info>
              <Operand>
                <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0FFA_9FD5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0FFA_9FD5() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_83AE_58B0()
        {
            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Int32]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Int32"">
              <Info>
                <StaticAwaitInfo IsCompleted=""Boolean IsCompleted"" GetResult=""Int32 GetResult()"">
                  <GetAwaiter>
                    <Lambda Type=""System.Func`2[System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1[System.Int32],System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter[System.Int32]]"">
                      <Parameters>
                        <Parameter Type=""System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1[System.Int32]"" Id=""1"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Call Type=""System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter[System.Int32]"" Method=""ConfiguredTaskAwaiter GetAwaiter()"">
                          <Object>
                            <Parameter Type=""System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1[System.Int32]"" Id=""1"" Name=""p"" />
                          </Object>
                          <Arguments />
                        </Call>
                      </Body>
                    </Lambda>
                  </GetAwaiter>
                </StaticAwaitInfo>
              </Info>
              <Operand>
                <Call Type=""System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1[System.Int32]"" Method=""System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1[System.Int32] ConfigureAwait(Boolean)"">
                  <Object>
                    <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
                  </Object>
                  <Arguments>
                    <Constant Type=""System.Boolean"" Value=""false"" />
                  </Arguments>
                </Call>
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_83AE_58B0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_83AE_58B0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_4DC5_94D3()
        {
            // (Expression<Func<dynamic, Task<dynamic>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<dynamic>>>)(async d => await d)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Object]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
          <Parameters>
            <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Object"">
              <Info>
                <DynamicAwaitInfo ResultDiscarded=""false"" Context=""Expressions"" />
              </Info>
              <Operand>
                <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4DC5_94D3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4DC5_94D3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5DFD_94D3()
        {
            // (Expression<Func<dynamic, Task<object>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<object>>>)(async d => await d)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Object]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
          <Parameters>
            <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Object"">
              <Info>
                <DynamicAwaitInfo ResultDiscarded=""false"" Context=""Expressions"" />
              </Info>
              <Operand>
                <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5DFD_94D3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5DFD_94D3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1A0E_037C()
        {
            // (Expression<Func<dynamic, Task<int>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<int>>>)(async d => await d)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Int32]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
          </Parameters>
          <Body>
            <CSharpDynamicConvert Type=""System.Int32"" Context=""Expressions"">
              <Expression>
                <CSharpAwait Type=""System.Object"">
                  <Info>
                    <DynamicAwaitInfo ResultDiscarded=""false"" Context=""Expressions"" />
                  </Info>
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
                  </Operand>
                </CSharpAwait>
              </Expression>
            </CSharpDynamicConvert>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1A0E_037C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1A0E_037C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B340_BC70()
        {
            // (Expression<Func<string, int?>>)(s => s?.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int?>>)(s => s?.Length)");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.Nullable`1[System.Int32]"">
      <Receiver>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""1"" Type=""System.String"" />
      </NonNullReceiver>
      <WhenNotNull>
        <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
          <Expression>
            <ConditionalReceiver Id=""1"" Type=""System.String"" />
          </Expression>
        </MemberAccess>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B340_BC70();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B340_BC70() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_9320_B6D2()
        {
            // (Expression<Func<string, int?>>)(s => s?.ToUpper()?.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int?>>)(s => s?.ToUpper()?.Length)");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.Nullable`1[System.Int32]"">
      <Receiver>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""1"" Type=""System.String"" />
      </NonNullReceiver>
      <WhenNotNull>
        <CSharpConditionalAccess Type=""System.Nullable`1[System.Int32]"">
          <Receiver>
            <Call Type=""System.String"" Method=""System.String ToUpper()"">
              <Object>
                <ConditionalReceiver Id=""1"" Type=""System.String"" />
              </Object>
              <Arguments />
            </Call>
          </Receiver>
          <NonNullReceiver>
            <ConditionalReceiver Id=""2"" Type=""System.String"" />
          </NonNullReceiver>
          <WhenNotNull>
            <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
              <Expression>
                <ConditionalReceiver Id=""2"" Type=""System.String"" />
              </Expression>
            </MemberAccess>
          </WhenNotNull>
        </CSharpConditionalAccess>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9320_B6D2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9320_B6D2() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A997_18C3()
        {
            // (Expression<Func<string, string>>)(s => s?.ToUpper())
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s?.ToUpper())");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.String"">
      <Receiver>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""1"" Type=""System.String"" />
      </NonNullReceiver>
      <WhenNotNull>
        <Call Type=""System.String"" Method=""System.String ToUpper()"">
          <Object>
            <ConditionalReceiver Id=""1"" Type=""System.String"" />
          </Object>
          <Arguments />
        </Call>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A997_18C3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A997_18C3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A5F9_6775()
        {
            // (Expression<Func<string, string>>)(s => s?.Substring(1)?.ToUpper())
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s?.Substring(1)?.ToUpper())");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.String"">
      <Receiver>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""1"" Type=""System.String"" />
      </NonNullReceiver>
      <WhenNotNull>
        <CSharpConditionalAccess Type=""System.String"">
          <Receiver>
            <Call Type=""System.String"" Method=""System.String Substring(Int32)"">
              <Object>
                <ConditionalReceiver Id=""1"" Type=""System.String"" />
              </Object>
              <Arguments>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Arguments>
            </Call>
          </Receiver>
          <NonNullReceiver>
            <ConditionalReceiver Id=""2"" Type=""System.String"" />
          </NonNullReceiver>
          <WhenNotNull>
            <Call Type=""System.String"" Method=""System.String ToUpper()"">
              <Object>
                <ConditionalReceiver Id=""2"" Type=""System.String"" />
              </Object>
              <Arguments />
            </Call>
          </WhenNotNull>
        </CSharpConditionalAccess>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A5F9_6775();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A5F9_6775() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F165_9386()
        {
            // (Expression<Func<DateTimeOffset?, TimeSpan?>>)(d => d?.Offset)
            var actual = GetDebugView(@"(Expression<Func<DateTimeOffset?, TimeSpan?>>)(d => d?.Offset)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.DateTimeOffset],System.Nullable`1[System.TimeSpan]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.DateTimeOffset]"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.Nullable`1[System.TimeSpan]"">
      <Receiver>
        <Parameter Type=""System.Nullable`1[System.DateTimeOffset]"" Id=""0"" Name=""d"" />
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""1"" Type=""System.DateTimeOffset"" />
      </NonNullReceiver>
      <WhenNotNull>
        <MemberAccess Type=""System.TimeSpan"" Member=""System.TimeSpan Offset"">
          <Expression>
            <ConditionalReceiver Id=""1"" Type=""System.DateTimeOffset"" />
          </Expression>
        </MemberAccess>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F165_9386();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F165_9386() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2462_8DFD()
        {
            // (Expression<Func<DateTimeOffset?, int?>>)(d => (d?.Offset)?.Hours)
            var actual = GetDebugView(@"(Expression<Func<DateTimeOffset?, int?>>)(d => (d?.Offset)?.Hours)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.DateTimeOffset],System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.DateTimeOffset]"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.Nullable`1[System.Int32]"">
      <Receiver>
        <CSharpConditionalAccess Type=""System.Nullable`1[System.TimeSpan]"">
          <Receiver>
            <Parameter Type=""System.Nullable`1[System.DateTimeOffset]"" Id=""0"" Name=""d"" />
          </Receiver>
          <NonNullReceiver>
            <ConditionalReceiver Id=""1"" Type=""System.DateTimeOffset"" />
          </NonNullReceiver>
          <WhenNotNull>
            <MemberAccess Type=""System.TimeSpan"" Member=""System.TimeSpan Offset"">
              <Expression>
                <ConditionalReceiver Id=""1"" Type=""System.DateTimeOffset"" />
              </Expression>
            </MemberAccess>
          </WhenNotNull>
        </CSharpConditionalAccess>
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""2"" Type=""System.TimeSpan"" />
      </NonNullReceiver>
      <WhenNotNull>
        <MemberAccess Type=""System.Int32"" Member=""Int32 Hours"">
          <Expression>
            <ConditionalReceiver Id=""2"" Type=""System.TimeSpan"" />
          </Expression>
        </MemberAccess>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2462_8DFD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2462_8DFD() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3041_FAE0()
        {
            // (Expression<Func<DateTimeOffset?, int?>>)(d => d?.Offset.Hours)
            var actual = GetDebugView(@"(Expression<Func<DateTimeOffset?, int?>>)(d => d?.Offset.Hours)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.DateTimeOffset],System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.DateTimeOffset]"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.Nullable`1[System.Int32]"">
      <Receiver>
        <Parameter Type=""System.Nullable`1[System.DateTimeOffset]"" Id=""0"" Name=""d"" />
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""1"" Type=""System.DateTimeOffset"" />
      </NonNullReceiver>
      <WhenNotNull>
        <MemberAccess Type=""System.Int32"" Member=""Int32 Hours"">
          <Expression>
            <MemberAccess Type=""System.TimeSpan"" Member=""System.TimeSpan Offset"">
              <Expression>
                <ConditionalReceiver Id=""1"" Type=""System.DateTimeOffset"" />
              </Expression>
            </MemberAccess>
          </Expression>
        </MemberAccess>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3041_FAE0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3041_FAE0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_CB0C_60AB()
        {
            // (Expression<Func<string, char?>>)(s => s?[42])
            var actual = GetDebugView(@"(Expression<Func<string, char?>>)(s => s?[42])");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Nullable`1[System.Char]]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.Nullable`1[System.Char]"">
      <Receiver>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""1"" Type=""System.String"" />
      </NonNullReceiver>
      <WhenNotNull>
        <CSharpIndex Type=""System.Char"" Indexer=""Char Chars [Int32]"">
          <Object>
            <ConditionalReceiver Id=""1"" Type=""System.String"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""42"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CB0C_60AB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CB0C_60AB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_CF40_3D45()
        {
            // (Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))
            var actual = GetDebugView(@"(Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Func`2[System.Int32,System.Int32],System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Func`2[System.Int32,System.Int32]"" Id=""0"" Name=""f"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.Nullable`1[System.Int32]"">
      <Receiver>
        <Parameter Type=""System.Func`2[System.Int32,System.Int32]"" Id=""0"" Name=""f"" />
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""1"" Type=""System.Func`2[System.Int32,System.Int32]"" />
      </NonNullReceiver>
      <WhenNotNull>
        <Call Type=""System.Int32"" Method=""Int32 Invoke(Int32)"">
          <Object>
            <ConditionalReceiver Id=""1"" Type=""System.Func`2[System.Int32,System.Int32]"" />
          </Object>
          <Arguments>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Arguments>
        </Call>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CF40_3D45();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CF40_3D45() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_4241_E360()
        {
            // (Expression<Func<string, string>>)(s => s?.Substring(length: 1, startIndex: 0).ToUpper()?.ToLower())
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s?.Substring(length: 1, startIndex: 0).ToUpper()?.ToLower())");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalAccess Type=""System.String"">
      <Receiver>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Receiver>
      <NonNullReceiver>
        <ConditionalReceiver Id=""1"" Type=""System.String"" />
      </NonNullReceiver>
      <WhenNotNull>
        <CSharpConditionalAccess Type=""System.String"">
          <Receiver>
            <Call Type=""System.String"" Method=""System.String ToUpper()"">
              <Object>
                <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32, Int32)"">
                  <Object>
                    <ConditionalReceiver Id=""1"" Type=""System.String"" />
                  </Object>
                  <Arguments>
                    <ParameterAssignment Parameter=""Int32 length"">
                      <Expression>
                        <Constant Type=""System.Int32"" Value=""1"" />
                      </Expression>
                    </ParameterAssignment>
                    <ParameterAssignment Parameter=""Int32 startIndex"">
                      <Expression>
                        <Constant Type=""System.Int32"" Value=""0"" />
                      </Expression>
                    </ParameterAssignment>
                  </Arguments>
                </CSharpCall>
              </Object>
              <Arguments />
            </Call>
          </Receiver>
          <NonNullReceiver>
            <ConditionalReceiver Id=""2"" Type=""System.String"" />
          </NonNullReceiver>
          <WhenNotNull>
            <Call Type=""System.String"" Method=""System.String ToLower()"">
              <Object>
                <ConditionalReceiver Id=""2"" Type=""System.String"" />
              </Object>
              <Arguments />
            </Call>
          </WhenNotNull>
        </CSharpConditionalAccess>
      </WhenNotNull>
    </CSharpConditionalAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4241_E360();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4241_E360() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A8D0_49C3()
        {
            // (Expression<Action>)(() => { })
            var actual = GetDebugView(@"(Expression<Action>)(() => { })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements />
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A8D0_49C3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A8D0_49C3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_197A_C7FA()
        {
            // (Expression<Action>)(() => { int x; x = 5; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int x; x = 5; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""5"" />
          </Right>
        </CSharpAssign>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_197A_C7FA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_197A_C7FA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_27AA_4144()
        {
            // (Expression<Action>)(() => { int x; x = 5; { int y = x + 1; Console.WriteLine(y); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int x; x = 5; { int y = x + 1; Console.WriteLine(y); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""5"" />
          </Right>
        </CSharpAssign>
        <Block Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Variables>
          <Expressions>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
              </Left>
              <Right>
                <Add Type=""System.Int32"">
                  <Left>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
                  </Left>
                  <Right>
                    <Constant Type=""System.Int32"" Value=""1"" />
                  </Right>
                </Add>
              </Right>
            </CSharpAssign>
            <Call Type=""System.Void"" Method=""Void WriteLine(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
              </Arguments>
            </Call>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_27AA_4144();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_27AA_4144() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0BD6_C135()
        {
            // (Expression<Action>)(() => { ; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Default Type=""System.Void"" />
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0BD6_C135();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0BD6_C135() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7F95_E445()
        {
            // (Expression<Action>)(() => { ;; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ;; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Default Type=""System.Void"" />
        <Default Type=""System.Void"" />
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7F95_E445();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7F95_E445() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6102_7F8E()
        {
            // (Expression<Action>)(() => { return; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { return; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Goto Type=""System.Void"" Kind=""Return"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </Target>
        </Goto>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6102_7F8E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6102_7F8E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AEF8_BB4B()
        {
            // (Expression<Func<int>>)(() => { int x = 42; return x; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { int x = 42; return x; })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Int32"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Right>
        </CSharpAssign>
        <Goto Type=""System.Void"" Kind=""Return"">
          <Target>
            <LabelTarget Type=""System.Int32"" Id=""1"" />
          </Target>
          <Value>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Value>
        </Goto>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Int32"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AEF8_BB4B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AEF8_BB4B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7381_AA02()
        {
            // (Expression<Func<int>>)(() => { return 42; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { return 42; })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Constant Type=""System.Int32"" Value=""42"" />
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7381_AA02();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7381_AA02() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_BBBC_6128()
        {
            // (Expression<Action>)(() => { goto A; A: Console.Write('A'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { goto A; A: Console.Write('A'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpGoto Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </CSharpGoto>
        <Label Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </Label>
        <Call Type=""System.Void"" Method=""Void Write(Char)"">
          <Arguments>
            <Constant Type=""System.Char"" Value=""A"" />
          </Arguments>
        </Call>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BBBC_6128();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BBBC_6128() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6FC7_B4A6()
        {
            // (Expression<Action>)(() => { A: Console.Write('A'); goto A; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { A: Console.Write('A'); goto A; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <Label Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </Label>
        <Call Type=""System.Void"" Method=""Void Write(Char)"">
          <Arguments>
            <Constant Type=""System.Char"" Value=""A"" />
          </Arguments>
        </Call>
        <CSharpGoto Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </CSharpGoto>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6FC7_B4A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6FC7_B4A6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F94F_ACD8()
        {
            // (Expression<Action<int>>)(x => { var y = x; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { var y = x; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Left>
          <Right>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Right>
        </CSharpAssign>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F94F_ACD8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F94F_ACD8() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_044F_D3EC()
        {
            // (Expression<Action<int>>)(x => { x += 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x += 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_044F_D3EC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_044F_D3EC() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_094E_F5F3()
        {
            // (Expression<Action<int>>)(x => { x -= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x -= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_094E_F5F3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_094E_F5F3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8BE1_8041()
        {
            // (Expression<Action<int>>)(x => { x *= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x *= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpMultiplyAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpMultiplyAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8BE1_8041();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8BE1_8041() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F3D0_F9A7()
        {
            // (Expression<Action<int>>)(x => { x /= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x /= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDivideAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpDivideAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F3D0_F9A7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F3D0_F9A7() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EB02_69E4()
        {
            // (Expression<Action<int>>)(x => { x %= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x %= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpModuloAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpModuloAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EB02_69E4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EB02_69E4() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6EC4_AD12()
        {
            // (Expression<Action<int>>)(x => { x &= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x &= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpAndAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpAndAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6EC4_AD12();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6EC4_AD12() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7D09_A1B7()
        {
            // (Expression<Action<int>>)(x => { x |= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x |= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpOrAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpOrAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7D09_A1B7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7D09_A1B7() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_ED89_63D1()
        {
            // (Expression<Action<int>>)(x => { x ^= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x ^= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpExclusiveOrAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpExclusiveOrAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_ED89_63D1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_ED89_63D1() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6090_4BC9()
        {
            // (Expression<Action<int>>)(x => { x <<= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x <<= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpLeftShiftAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpLeftShiftAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6090_4BC9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6090_4BC9() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D47A_FCEE()
        {
            // (Expression<Action<int>>)(x => { x >>= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x >>= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpRightShiftAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpRightShiftAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D47A_FCEE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D47A_FCEE() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_60B4_CC06()
        {
            // (Expression<Action<TimeSpan>>)(t => { t += TimeSpan.Zero; })
            var actual = GetDebugView(@"(Expression<Action<TimeSpan>>)(t => { t += TimeSpan.Zero; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.TimeSpan]"">
  <Parameters>
    <Parameter Type=""System.TimeSpan"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.TimeSpan"" Method=""System.TimeSpan op_Addition(System.TimeSpan, System.TimeSpan)"">
      <Left>
        <Parameter Type=""System.TimeSpan"" Id=""0"" Name=""t"" />
      </Left>
      <Right>
        <MemberAccess Type=""System.TimeSpan"" Member=""System.TimeSpan Zero"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_60B4_CC06();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_60B4_CC06() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2DAA_6C38()
        {
            // (Expression<Action<DateTime>>)(d => { d -= TimeSpan.Zero; })
            var actual = GetDebugView(@"(Expression<Action<DateTime>>)(d => { d -= TimeSpan.Zero; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.DateTime]"">
  <Parameters>
    <Parameter Type=""System.DateTime"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.DateTime"" Method=""System.DateTime op_Subtraction(System.DateTime, System.TimeSpan)"">
      <Left>
        <Parameter Type=""System.DateTime"" Id=""0"" Name=""d"" />
      </Left>
      <Right>
        <MemberAccess Type=""System.TimeSpan"" Member=""System.TimeSpan Zero"" />
      </Right>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2DAA_6C38();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2DAA_6C38() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7F56_2B0B()
        {
            // (Expression<Action<int>>)(x => { checked { x += 1; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x += 1; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpAddAssignChecked Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </CSharpAddAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7F56_2B0B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7F56_2B0B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_27E3_F016()
        {
            // (Expression<Action<int>>)(x => { checked { x -= 1; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x -= 1; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpSubtractAssignChecked Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </CSharpSubtractAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_27E3_F016();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_27E3_F016() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_467C_C565()
        {
            // (Expression<Action<int>>)(x => { checked { x *= 1; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x *= 1; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpMultiplyAssignChecked Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </CSharpMultiplyAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_467C_C565();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_467C_C565() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B13A_1C7B()
        {
            // (Expression<Action<int?>>)(x => { x += 1; })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { x += 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Operand>
        </Convert>
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B13A_1C7B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B13A_1C7B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EE3F_5608()
        {
            // (Expression<Action<StrongBox<int>>>)(xs => { xs.Value += 1; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<int>>>)(xs => { xs.Value += 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int32"">
      <Left>
        <MemberAccess Type=""System.Int32"" Member=""Int32 Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Expression>
        </MemberAccess>
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EE3F_5608();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EE3F_5608() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_79AE_FDED()
        {
            // (Expression<Action<List<int>>>)(xs => { xs[0] += 1; })
            var actual = GetDebugView(@"(Expression<Action<List<int>>>)(xs => { xs[0] += 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.List`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int32"">
      <Left>
        <CSharpIndex Type=""System.Int32"" Indexer=""Int32 Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_79AE_FDED();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_79AE_FDED() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A709_35ED()
        {
            // (Expression<Action<string>>)(s => { s += "!"; })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { s += ""!""; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.String"" Method=""System.String Concat(System.String, System.String)"">
      <Left>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Left>
      <Right>
        <Constant Type=""System.String"" Value=""!"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A709_35ED();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A709_35ED() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8CA7_35F4()
        {
            // (Expression<Action<string>>)(s => { s += 0; })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { s += 0; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.String"" Method=""System.String Concat(System.Object, System.Object)"">
      <Left>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Left>
      <Right>
        <Convert Type=""System.Object"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""0"" />
          </Operand>
        </Convert>
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8CA7_35F4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8CA7_35F4() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8BFE_5348()
        {
            // (Expression<Action<string>>)(s => { checked { s += "!"; } })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { checked { s += ""!""; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.String"">
          <Expressions>
            <CSharpAddAssign Type=""System.String"" Method=""System.String Concat(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
              </Left>
              <Right>
                <Constant Type=""System.String"" Value=""!"" />
              </Right>
            </CSharpAddAssign>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8BFE_5348();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8BFE_5348() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_18CC_52FA()
        {
            // (Expression<Action<string>>)(s => { checked { s += 0; } })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { checked { s += 0; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.String"">
          <Expressions>
            <CSharpAddAssign Type=""System.String"" Method=""System.String Concat(System.Object, System.Object)"">
              <Left>
                <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
              </Left>
              <Right>
                <Convert Type=""System.Object"">
                  <Operand>
                    <Constant Type=""System.Int32"" Value=""0"" />
                  </Operand>
                </Convert>
              </Right>
            </CSharpAddAssign>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_18CC_52FA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_18CC_52FA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7492_2165()
        {
            // (Expression<Action<byte, byte>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<byte, byte>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Byte,System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Byte"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Byte"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Byte"">
      <Left>
        <Parameter Type=""System.Byte"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.Byte"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Byte,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.Byte"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Byte"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.Byte]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Byte"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7492_2165();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7492_2165() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6A94_CEB8()
        {
            // (Expression<Action<sbyte, sbyte>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<sbyte, sbyte>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.SByte,System.SByte]"">
  <Parameters>
    <Parameter Type=""System.SByte"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.SByte"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.SByte"">
      <Left>
        <Parameter Type=""System.SByte"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.SByte"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.SByte,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.SByte"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.SByte"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.SByte]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.SByte"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6A94_CEB8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6A94_CEB8() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2F5D_78CC()
        {
            // (Expression<Action<short, short>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<short, short>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int16,System.Int16]"">
  <Parameters>
    <Parameter Type=""System.Int16"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int16"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int16"">
      <Left>
        <Parameter Type=""System.Int16"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.Int16"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Int16,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.Int16"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int16"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.Int16]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int16"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2F5D_78CC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2F5D_78CC() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EAFD_44CE()
        {
            // (Expression<Action<ushort, ushort>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<ushort, ushort>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.UInt16,System.UInt16]"">
  <Parameters>
    <Parameter Type=""System.UInt16"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.UInt16"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.UInt16"">
      <Left>
        <Parameter Type=""System.UInt16"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.UInt16"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.UInt16,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.UInt16"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.UInt16"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.UInt16]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.UInt16"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EAFD_44CE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EAFD_44CE() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AC8A_1D36()
        {
            // (Expression<Action<char, char>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<char, char>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Char,System.Char]"">
  <Parameters>
    <Parameter Type=""System.Char"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Char"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Char"">
      <Left>
        <Parameter Type=""System.Char"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.Char"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Char,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.Char"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Char"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.Char]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Char"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AC8A_1D36();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AC8A_1D36() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C8F7_9590()
        {
            // (Expression<Action<int, int>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<int, int>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int32,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C8F7_9590();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C8F7_9590() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3859_C424()
        {
            // (Expression<Action<uint, uint>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<uint, uint>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.UInt32,System.UInt32]"">
  <Parameters>
    <Parameter Type=""System.UInt32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.UInt32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.UInt32"">
      <Left>
        <Parameter Type=""System.UInt32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.UInt32"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3859_C424();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3859_C424() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3AC9_2A4D()
        {
            // (Expression<Action<long, long>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<long, long>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int64,System.Int64]"">
  <Parameters>
    <Parameter Type=""System.Int64"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int64"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int64"">
      <Left>
        <Parameter Type=""System.Int64"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Int64"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3AC9_2A4D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3AC9_2A4D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_93FC_E500()
        {
            // (Expression<Action<ulong, ulong>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<ulong, ulong>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.UInt64,System.UInt64]"">
  <Parameters>
    <Parameter Type=""System.UInt64"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.UInt64"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.UInt64"">
      <Left>
        <Parameter Type=""System.UInt64"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.UInt64"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_93FC_E500();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_93FC_E500() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1D2F_7FC2()
        {
            // (Expression<Action<float, float>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<float, float>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Single,System.Single]"">
  <Parameters>
    <Parameter Type=""System.Single"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Single"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Single"">
      <Left>
        <Parameter Type=""System.Single"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Single"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1D2F_7FC2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1D2F_7FC2() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1EDE_F8E3()
        {
            // (Expression<Action<double, double>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<double, double>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Double,System.Double]"">
  <Parameters>
    <Parameter Type=""System.Double"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Double"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Double"">
      <Left>
        <Parameter Type=""System.Double"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Double"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1EDE_F8E3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1EDE_F8E3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A171_560A()
        {
            // (Expression<Action<decimal, decimal>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<decimal, decimal>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Decimal,System.Decimal]"">
  <Parameters>
    <Parameter Type=""System.Decimal"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Decimal"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Decimal"" Method=""System.Decimal op_Addition(System.Decimal, System.Decimal)"">
      <Left>
        <Parameter Type=""System.Decimal"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Decimal"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A171_560A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A171_560A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_E00F_CAB4()
        {
            // (Expression<Func<Action, Action, Action>>)((a, b) => a += b)
            var actual = GetDebugView(@"(Expression<Func<Action, Action, Action>>)((a, b) => a += b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Action,System.Action,System.Action]"">
  <Parameters>
    <Parameter Type=""System.Action"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Action"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Action"" Method=""System.Delegate Combine(System.Delegate, System.Delegate)"">
      <Left>
        <Parameter Type=""System.Action"" Id=""0"" Name=""a"" />
      </Left>
      <Right>
        <Parameter Type=""System.Action"" Id=""1"" Name=""b"" />
      </Right>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Delegate,System.Action]"">
          <Parameters>
            <Parameter Type=""System.Delegate"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Action"">
              <Operand>
                <Parameter Type=""System.Delegate"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E00F_CAB4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E00F_CAB4() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1D70_2F15()
        {
            // (Expression<Func<Action, Action, Action>>)((a, b) => a -= b)
            var actual = GetDebugView(@"(Expression<Func<Action, Action, Action>>)((a, b) => a -= b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Action,System.Action,System.Action]"">
  <Parameters>
    <Parameter Type=""System.Action"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Action"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.Action"" Method=""System.Delegate Remove(System.Delegate, System.Delegate)"">
      <Left>
        <Parameter Type=""System.Action"" Id=""0"" Name=""a"" />
      </Left>
      <Right>
        <Parameter Type=""System.Action"" Id=""1"" Name=""b"" />
      </Right>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Delegate,System.Action]"">
          <Parameters>
            <Parameter Type=""System.Delegate"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Action"">
              <Operand>
                <Parameter Type=""System.Delegate"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1D70_2F15();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1D70_2F15() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_530B_F222()
        {
            // (Expression<Func<ConsoleColor, ConsoleColor>>)(c => c += 1)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor, ConsoleColor>>)(c => c += 1)");
            var expected = @"
<Lambda Type=""System.Func`2[System.ConsoleColor,System.ConsoleColor]"">
  <Parameters>
    <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.ConsoleColor"">
      <Left>
        <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.ConsoleColor,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.ConsoleColor"" Id=""1"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.ConsoleColor"" Id=""1"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.ConsoleColor]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.ConsoleColor"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_530B_F222();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_530B_F222() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C266_EBD1()
        {
            // (Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c += 1)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c += 1)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.ConsoleColor]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Nullable`1[System.ConsoleColor]"" IsLifted=""true"" IsLiftedToNull=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
      </Left>
      <Right>
        <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""1"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
              <Operand>
                <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""1"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Nullable`1[System.Int32],System.Nullable`1[System.ConsoleColor]]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Nullable`1[System.ConsoleColor]"" IsLifted=""true"" IsLiftedToNull=""true"">
              <Operand>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C266_EBD1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C266_EBD1() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_E15F_B595()
        {
            // (Expression<Func<ConsoleColor, ConsoleColor>>)(c => c -= 1)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor, ConsoleColor>>)(c => c -= 1)");
            var expected = @"
<Lambda Type=""System.Func`2[System.ConsoleColor,System.ConsoleColor]"">
  <Parameters>
    <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.ConsoleColor"">
      <Left>
        <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.ConsoleColor,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.ConsoleColor"" Id=""1"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.ConsoleColor"" Id=""1"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.ConsoleColor]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.ConsoleColor"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E15F_B595();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E15F_B595() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2C91_A398()
        {
            // (Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c -= 1)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c -= 1)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.ConsoleColor]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.Nullable`1[System.ConsoleColor]"" IsLifted=""true"" IsLiftedToNull=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
      </Left>
      <Right>
        <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""1"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
              <Operand>
                <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""1"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Nullable`1[System.Int32],System.Nullable`1[System.ConsoleColor]]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Nullable`1[System.ConsoleColor]"" IsLifted=""true"" IsLiftedToNull=""true"">
              <Operand>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2C91_A398();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2C91_A398() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_00CF_F74C()
        {
            // (Expression<Action<int>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Int32"">
      <Operand>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_00CF_F74C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_00CF_F74C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_9C51_A974()
        {
            // (Expression<Action<int>>)(x => { x--; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x--; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostDecrementAssign Type=""System.Int32"">
      <Operand>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostDecrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9C51_A974();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9C51_A974() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2115_988C()
        {
            // (Expression<Action<int>>)(x => { ++x; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { ++x; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreIncrementAssign Type=""System.Int32"">
      <Operand>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPreIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2115_988C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2115_988C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_09D9_F0A4()
        {
            // (Expression<Action<int>>)(x => { --x; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { --x; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssign Type=""System.Int32"">
      <Operand>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPreDecrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_09D9_F0A4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_09D9_F0A4() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C9BD_6C2B()
        {
            // (Expression<Action<int>>)(x => { checked { x++; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x++; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpPostIncrementAssignChecked Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Operand>
            </CSharpPostIncrementAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C9BD_6C2B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C9BD_6C2B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1C12_C262()
        {
            // (Expression<Action<int>>)(x => { checked { x--; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x--; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpPostDecrementAssignChecked Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Operand>
            </CSharpPostDecrementAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1C12_C262();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1C12_C262() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B58C_BABA()
        {
            // (Expression<Action<int>>)(x => { checked { ++x; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { ++x; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpPreIncrementAssignChecked Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Operand>
            </CSharpPreIncrementAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B58C_BABA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B58C_BABA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2817_4DD1()
        {
            // (Expression<Action<int>>)(x => { checked { --x; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { --x; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpPreDecrementAssignChecked Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Operand>
            </CSharpPreDecrementAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2817_4DD1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2817_4DD1() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_64E0_6F8F()
        {
            // (Expression<Action<byte>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<byte>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Byte"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Byte"">
      <Operand>
        <Parameter Type=""System.Byte"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_64E0_6F8F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_64E0_6F8F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_73AB_B92F()
        {
            // (Expression<Action<sbyte>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<sbyte>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.SByte]"">
  <Parameters>
    <Parameter Type=""System.SByte"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.SByte"">
      <Operand>
        <Parameter Type=""System.SByte"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_73AB_B92F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_73AB_B92F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F997_C431()
        {
            // (Expression<Action<short>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<short>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int16]"">
  <Parameters>
    <Parameter Type=""System.Int16"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Int16"">
      <Operand>
        <Parameter Type=""System.Int16"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F997_C431();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F997_C431() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C633_B342()
        {
            // (Expression<Action<ushort>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<ushort>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.UInt16]"">
  <Parameters>
    <Parameter Type=""System.UInt16"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.UInt16"">
      <Operand>
        <Parameter Type=""System.UInt16"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C633_B342();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C633_B342() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6BBF_B4A0()
        {
            // (Expression<Action<char>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<char>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Char]"">
  <Parameters>
    <Parameter Type=""System.Char"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Char"">
      <Operand>
        <Parameter Type=""System.Char"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6BBF_B4A0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6BBF_B4A0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_893C_BAAE()
        {
            // (Expression<Action<uint>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<uint>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.UInt32]"">
  <Parameters>
    <Parameter Type=""System.UInt32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.UInt32"">
      <Operand>
        <Parameter Type=""System.UInt32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_893C_BAAE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_893C_BAAE() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A586_E8F9()
        {
            // (Expression<Action<long>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<long>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int64]"">
  <Parameters>
    <Parameter Type=""System.Int64"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Int64"">
      <Operand>
        <Parameter Type=""System.Int64"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A586_E8F9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A586_E8F9() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B251_AFB5()
        {
            // (Expression<Action<ulong>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<ulong>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.UInt64]"">
  <Parameters>
    <Parameter Type=""System.UInt64"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.UInt64"">
      <Operand>
        <Parameter Type=""System.UInt64"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B251_AFB5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B251_AFB5() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_98BA_6FFB()
        {
            // (Expression<Action<float>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<float>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Single]"">
  <Parameters>
    <Parameter Type=""System.Single"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Single"">
      <Operand>
        <Parameter Type=""System.Single"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_98BA_6FFB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_98BA_6FFB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5002_049B()
        {
            // (Expression<Action<double>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<double>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Double]"">
  <Parameters>
    <Parameter Type=""System.Double"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Double"">
      <Operand>
        <Parameter Type=""System.Double"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5002_049B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5002_049B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2E6E_DC66()
        {
            // (Expression<Action<decimal>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<decimal>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Decimal]"">
  <Parameters>
    <Parameter Type=""System.Decimal"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Decimal"" Method=""System.Decimal op_Increment(System.Decimal)"">
      <Operand>
        <Parameter Type=""System.Decimal"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2E6E_DC66();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2E6E_DC66() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0162_65C6()
        {
            // (Expression<Action<StrongBox<byte>>>)(x => { x.Value++; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<byte>>>)(x => { x.Value++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Byte]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Byte"">
      <Operand>
        <MemberAccess Type=""System.Byte"" Member=""Byte Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Expression>
        </MemberAccess>
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0162_65C6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0162_65C6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C668_6525()
        {
            // (Expression<Action<StrongBox<byte>>>)(x => { ++x.Value; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<byte>>>)(x => { ++x.Value; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Byte]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreIncrementAssign Type=""System.Byte"">
      <Operand>
        <MemberAccess Type=""System.Byte"" Member=""Byte Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Expression>
        </MemberAccess>
      </Operand>
    </CSharpPreIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C668_6525();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C668_6525() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AD28_1A20()
        {
            // (Expression<Action<StrongBox<byte>>>)(x => { x.Value--; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<byte>>>)(x => { x.Value--; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Byte]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostDecrementAssign Type=""System.Byte"">
      <Operand>
        <MemberAccess Type=""System.Byte"" Member=""Byte Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Expression>
        </MemberAccess>
      </Operand>
    </CSharpPostDecrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD28_1A20();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD28_1A20() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0D46_A139()
        {
            // (Expression<Action<StrongBox<byte>>>)(x => { --x.Value; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<byte>>>)(x => { --x.Value; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Byte]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssign Type=""System.Byte"">
      <Operand>
        <MemberAccess Type=""System.Byte"" Member=""Byte Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Expression>
        </MemberAccess>
      </Operand>
    </CSharpPreDecrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0D46_A139();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0D46_A139() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EDA6_9661()
        {
            // (Expression<Func<List<byte>, byte>>)(x => checked(x[0]++))
            var actual = GetDebugView(@"(Expression<Func<List<byte>, byte>>)(x => checked(x[0]++))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Byte],System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssignChecked Type=""System.Byte"">
      <Operand>
        <CSharpIndex Type=""System.Byte"" Indexer=""Byte Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Operand>
    </CSharpPostIncrementAssignChecked>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EDA6_9661();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EDA6_9661() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8D15_759F()
        {
            // (Expression<Func<List<byte>, byte>>)(x => checked(++x[0]))
            var actual = GetDebugView(@"(Expression<Func<List<byte>, byte>>)(x => checked(++x[0]))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Byte],System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreIncrementAssignChecked Type=""System.Byte"">
      <Operand>
        <CSharpIndex Type=""System.Byte"" Indexer=""Byte Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Operand>
    </CSharpPreIncrementAssignChecked>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8D15_759F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8D15_759F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_E582_3900()
        {
            // (Expression<Func<List<byte>, byte>>)(x => checked(x[0]--))
            var actual = GetDebugView(@"(Expression<Func<List<byte>, byte>>)(x => checked(x[0]--))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Byte],System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostDecrementAssignChecked Type=""System.Byte"">
      <Operand>
        <CSharpIndex Type=""System.Byte"" Indexer=""Byte Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Operand>
    </CSharpPostDecrementAssignChecked>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E582_3900();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E582_3900() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_859E_AB64()
        {
            // (Expression<Func<List<byte>, byte>>)(x => checked(--x[0]))
            var actual = GetDebugView(@"(Expression<Func<List<byte>, byte>>)(x => checked(--x[0]))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Byte],System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssignChecked Type=""System.Byte"">
      <Operand>
        <CSharpIndex Type=""System.Byte"" Indexer=""Byte Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Operand>
    </CSharpPreDecrementAssignChecked>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_859E_AB64();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_859E_AB64() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_790B_3BA4()
        {
            // (Expression<Func<ConsoleColor, ConsoleColor>>)(c => c++)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor, ConsoleColor>>)(c => c++)");
            var expected = @"
<Lambda Type=""System.Func`2[System.ConsoleColor,System.ConsoleColor]"">
  <Parameters>
    <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.ConsoleColor"">
      <Operand>
        <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_790B_3BA4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_790B_3BA4() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5B70_B34F()
        {
            // (Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c++)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c++)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.ConsoleColor]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Nullable`1[System.ConsoleColor]"">
      <Operand>
        <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5B70_B34F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5B70_B34F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_09B1_7323()
        {
            // (Expression<Func<ConsoleColor, ConsoleColor>>)(c => --c)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor, ConsoleColor>>)(c => --c)");
            var expected = @"
<Lambda Type=""System.Func`2[System.ConsoleColor,System.ConsoleColor]"">
  <Parameters>
    <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssign Type=""System.ConsoleColor"">
      <Operand>
        <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
      </Operand>
    </CSharpPreDecrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_09B1_7323();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_09B1_7323() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_361E_5216()
        {
            // (Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => --c)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => --c)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.ConsoleColor]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssign Type=""System.Nullable`1[System.ConsoleColor]"">
      <Operand>
        <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
      </Operand>
    </CSharpPreDecrementAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_361E_5216();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_361E_5216() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C043_D2B0()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""T"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Default Type=""System.Void"" />
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C043_D2B0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C043_D2B0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2216_A3C9()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); else Console.Write('F'); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); else Console.Write('F'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""T"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""F"" />
              </Arguments>
            </Call>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2216_A3C9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2216_A3C9() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6319_CF5C()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfTrue>
          <IfFalse>
            <Default Type=""System.Void"" />
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6319_CF5C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6319_CF5C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1D89_F94D()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfTrue>
          <IfFalse>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1D89_F94D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1D89_F94D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B73D_03FA()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else if (x < 5) { Console.Write('E'); } else { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else if (x < 5) { Console.Write('E'); } else { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfTrue>
          <IfFalse>
            <Conditional Type=""System.Void"">
              <Test>
                <LessThan Type=""System.Boolean"">
                  <Left>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
                  </Left>
                  <Right>
                    <Constant Type=""System.Int32"" Value=""5"" />
                  </Right>
                </LessThan>
              </Test>
              <IfTrue>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""E"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </IfTrue>
              <IfFalse>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""F"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </IfFalse>
            </Conditional>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B73D_03FA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B73D_03FA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5419_99E8()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) int.Parse("42"); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) int.Parse(""42""); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""42"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Default Type=""System.Void"" />
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5419_99E8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5419_99E8() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EB64_66C6()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) int.Parse("42"); else long.Parse("42"); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) int.Parse(""42""); else long.Parse(""42""); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""42"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Call Type=""System.Int64"" Method=""Int64 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""42"" />
              </Arguments>
            </Call>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EB64_66C6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EB64_66C6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C90B_9C05()
        {
            // (Expression<Action>)(() => { while (true) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C90B_9C05();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C90B_9C05() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C5C5_4E9F()
        {
            // (Expression<Action>)(() => { while (true) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C5C5_4E9F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C5C5_4E9F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7D34_66D1()
        {
            // (Expression<Action>)(() => { while (true) { break; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) { break; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""0"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7D34_66D1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7D34_66D1() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_40EC_DA92()
        {
            // (Expression<Action>)(() => { while (true) { continue; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) { continue; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Goto Type=""System.Void"" Kind=""Continue"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""0"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </ContinueLabel>
        </CSharpWhile>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_40EC_DA92();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_40EC_DA92() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_FC9A_C797()
        {
            // (Expression<Action>)(() => { while (true) { return; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) { return; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Goto Type=""System.Void"" Kind=""Return"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""0"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FC9A_C797();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FC9A_C797() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6C15_9FA8()
        {
            // (Expression<Action>)(() => { int i = 0; while (i < 10) { if (i == 5) continue; if (i == 8) break; i++; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int i = 0; while (i < 10) { if (i == 5) continue; if (i == 8) break; i++; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""0"" />
          </Right>
        </CSharpAssign>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Body>
            <Block Type=""System.Int32"">
              <Expressions>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""5"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Continue"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""1"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""8"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Break"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""2"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <CSharpPostIncrementAssign Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                  </Operand>
                </CSharpPostIncrementAssign>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6C15_9FA8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6C15_9FA8() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_242C_68A7()
        {
            // (Expression<Action<int, int>>)((x, y) => { while (x < 1) { while (y < 2) { break; } continue; } })
            var actual = GetDebugView(@"(Expression<Action<int, int>>)((x, y) => { while (x < 1) { while (y < 2) { break; } continue; } })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int32,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </LessThan>
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <CSharpWhile Type=""System.Void"">
                  <Test>
                    <LessThan Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""2"" />
                      </Right>
                    </LessThan>
                  </Test>
                  <Body>
                    <Block Type=""System.Void"">
                      <Expressions>
                        <Goto Type=""System.Void"" Kind=""Break"">
                          <Target>
                            <LabelTarget Type=""System.Void"" Id=""2"" />
                          </Target>
                        </Goto>
                      </Expressions>
                    </Block>
                  </Body>
                  <BreakLabel>
                    <LabelTarget Type=""System.Void"" Id=""2"" />
                  </BreakLabel>
                  <ContinueLabel>
                    <LabelTarget Type=""System.Void"" Id=""3"" />
                  </ContinueLabel>
                </CSharpWhile>
                <Goto Type=""System.Void"" Kind=""Continue"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""4"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""6"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_242C_68A7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_242C_68A7() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2503_AEF6()
        {
            // (Expression<Action<int, int>>)((x, y) => { while (x < 1) { while (y < 2) { continue; } break; } })
            var actual = GetDebugView(@"(Expression<Action<int, int>>)((x, y) => { while (x < 1) { while (y < 2) { continue; } break; } })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int32,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </LessThan>
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <CSharpWhile Type=""System.Void"">
                  <Test>
                    <LessThan Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""2"" />
                      </Right>
                    </LessThan>
                  </Test>
                  <Body>
                    <Block Type=""System.Void"">
                      <Expressions>
                        <Goto Type=""System.Void"" Kind=""Continue"">
                          <Target>
                            <LabelTarget Type=""System.Void"" Id=""2"" />
                          </Target>
                        </Goto>
                      </Expressions>
                    </Block>
                  </Body>
                  <BreakLabel>
                    <LabelTarget Type=""System.Void"" Id=""3"" />
                  </BreakLabel>
                  <ContinueLabel>
                    <LabelTarget Type=""System.Void"" Id=""2"" />
                  </ContinueLabel>
                </CSharpWhile>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""4"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""6"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2503_AEF6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2503_AEF6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6674_1E31()
        {
            // (Expression<Action>)(() => { do { Console.Write('.'); } while (true); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { do { Console.Write('.'); } while (true); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpDo Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpDo>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6674_1E31();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6674_1E31() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B6D5_79C3()
        {
            // (Expression<Action>)(() => { int i = 0; do { if (i == 5) continue; if (i == 8) break; i++; } while (i < 10); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int i = 0; do { if (i == 5) continue; if (i == 8) break; i++; } while (i < 10); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""0"" />
          </Right>
        </CSharpAssign>
        <CSharpDo Type=""System.Void"">
          <Body>
            <Block Type=""System.Int32"">
              <Expressions>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""5"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Continue"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""1"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""8"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Break"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""2"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <CSharpPostIncrementAssign Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                  </Operand>
                </CSharpPostIncrementAssign>
              </Expressions>
            </Block>
          </Body>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpDo>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B6D5_79C3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B6D5_79C3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_25E2_35E6()
        {
            // (Expression<Action>)(() => { for (;;) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (;;) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpFor Type=""System.Void"">
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpFor>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_25E2_35E6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_25E2_35E6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AD48_86CB()
        {
            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Variables>
          <Initializers>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </CSharpAssign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <CSharpPostIncrementAssign Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Operand>
            </CSharpPostIncrementAssign>
          </Iterators>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD48_86CB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD48_86CB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5EF7_9418()
        {
            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) { Console.Write(i); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) { Console.Write(i); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Variables>
          <Initializers>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </CSharpAssign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <CSharpPostIncrementAssign Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Operand>
            </CSharpPostIncrementAssign>
          </Iterators>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5EF7_9418();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5EF7_9418() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_26D5_E9FE()
        {
            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) { if (i == 5) continue; if (i == 8) break; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) { if (i == 5) continue; if (i == 8) break; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Variables>
          <Initializers>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </CSharpAssign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <CSharpPostIncrementAssign Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Operand>
            </CSharpPostIncrementAssign>
          </Iterators>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""5"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Continue"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""1"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""8"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Break"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""2"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_26D5_E9FE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_26D5_E9FE() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F7F3_AD6D()
        {
            // (Expression<Action>)(() => { for (int i = 1, j = 2; i < 3; i += 4, j -= 5) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (int i = 1, j = 2; i < 3; i += 4, j -= 5) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
            <Parameter Type=""System.Int32"" Id=""1"" Name=""j"" />
          </Variables>
          <Initializers>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </CSharpAssign>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""j"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""2"" />
              </Right>
            </CSharpAssign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""3"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <CSharpAddAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""4"" />
              </Right>
            </CSharpAddAssign>
            <CSharpSubtractAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""j"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""5"" />
              </Right>
            </CSharpSubtractAssign>
          </Iterators>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F7F3_AD6D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F7F3_AD6D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_245A_DA7A()
        {
            // (Expression<Action<string>>)(s => { foreach (var c in s) Console.Write(c); })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { foreach (var c in s) Console.Write(c); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Char"" Id=""1"" Name=""c"" />
          </Variable>
          <Collection>
            <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Parameter Type=""System.Char"" Id=""1"" Name=""c"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_245A_DA7A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_245A_DA7A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_DA7B_B67A()
        {
            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32[]]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Collection>
            <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DA7B_B67A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DA7B_B67A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_34B8_6522()
        {
            // (Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object[]]"">
  <Parameters>
    <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_34B8_6522();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_34B8_6522() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3958_5948()
        {
            // (Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.IEnumerable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.IEnumerable`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Collection>
            <Parameter Type=""System.Collections.Generic.IEnumerable`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3958_5948();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3958_5948() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1525_79A2()
        {
            // (Expression<Action<List<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<List<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.List`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Collection>
            <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1525_79A2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1525_79A2() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_720D_1B2C()
        {
            // (Expression<Action<IList<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<IList<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.IList`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.IList`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Collection>
            <Parameter Type=""System.Collections.Generic.IList`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_720D_1B2C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_720D_1B2C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0041_C3E9()
        {
            // (Expression<Action<ArrayList>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<ArrayList>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.ArrayList]"">
  <Parameters>
    <Parameter Type=""System.Collections.ArrayList"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <Parameter Type=""System.Collections.ArrayList"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0041_C3E9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0041_C3E9() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AE67_91A3()
        {
            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) { if (x == 5) continue; if (x == 8) break; } })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) { if (x == 5) continue; if (x == 8) break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32[]]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Collection>
            <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""5"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Continue"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""2"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""8"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Break"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""3"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AE67_91A3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AE67_91A3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8AE9_0673()
        {
            // (Expression<Action<dynamic>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<dynamic>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <CSharpDynamicConvert Type=""System.Collections.IEnumerable"" Context=""Expressions"">
              <Expression>
                <Parameter Type=""System.Object"" Id=""0"" Name=""xs"" />
              </Expression>
            </CSharpDynamicConvert>
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8AE9_0673();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8AE9_0673() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5598_03A6()
        {
            // (Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5598_03A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5598_03A6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_62CA_03A6()
        {
            // (Expression<Action<IDisposable>>)(d => { using (d) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (d) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_62CA_03A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_62CA_03A6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_BB7C_2A2A()
        {
            // (Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
          </Variable>
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
              <Arguments>
                <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
              </Arguments>
            </Call>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BB7C_2A2A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BB7C_2A2A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_51A3_E043()
        {
            // (Expression<Action<IDisposable>>)(d => { using (var e = d) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (var e = d) { Console.WriteLine(e); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
          </Variable>
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                  <Arguments>
                    <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_51A3_E043();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_51A3_E043() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_57C3_49DB()
        {
            // (Expression<Action>)(() => { using (var fs = File.OpenRead("foo.txt")) { } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { using (var fs = File.OpenRead(""foo.txt"")) { } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.IO.FileStream"" Id=""0"" Name=""fs"" />
          </Variable>
          <Resource>
            <Call Type=""System.IO.FileStream"" Method=""System.IO.FileStream OpenRead(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""foo.txt"" />
              </Arguments>
            </Call>
          </Resource>
          <Body>
            <Default Type=""System.Void"" />
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_57C3_49DB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_57C3_49DB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7AF8_8902()
        {
            // (Expression<Action>)(() => { using (FileStream fs1 = File.OpenRead("foo.txt"), fs2 = File.OpenRead("bar.txt")) { } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { using (FileStream fs1 = File.OpenRead(""foo.txt""), fs2 = File.OpenRead(""bar.txt"")) { } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.IO.FileStream"" Id=""0"" Name=""fs1"" />
          </Variable>
          <Resource>
            <Call Type=""System.IO.FileStream"" Method=""System.IO.FileStream OpenRead(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""foo.txt"" />
              </Arguments>
            </Call>
          </Resource>
          <Body>
            <CSharpUsing Type=""System.Void"">
              <Variable>
                <Parameter Type=""System.IO.FileStream"" Id=""1"" Name=""fs2"" />
              </Variable>
              <Resource>
                <Call Type=""System.IO.FileStream"" Method=""System.IO.FileStream OpenRead(System.String)"">
                  <Arguments>
                    <Constant Type=""System.String"" Value=""bar.txt"" />
                  </Arguments>
                </Call>
              </Resource>
              <Body>
                <Default Type=""System.Void"" />
              </Body>
            </CSharpUsing>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7AF8_8902();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7AF8_8902() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2CF2_18B2()
        {
            // (Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpLock Type=""System.Void"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
          </Expression>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpLock>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2CF2_18B2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2CF2_18B2() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_CD60_A086()
        {
            // (Expression<Action>)(() => { lock (new object()) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { lock (new object()) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpLock Type=""System.Void"">
          <Expression>
            <New Type=""System.Object"" Constructor=""Void .ctor()"">
              <Arguments />
            </New>
          </Expression>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpLock>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CD60_A086();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CD60_A086() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_880F_A24B()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Finally>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Finally>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_880F_A24B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_880F_A24B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_19B3_485B()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""C"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_19B3_485B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_19B3_485B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0662_485B()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""C"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0662_485B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0662_485B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F63E_8707()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F63E_8707();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F63E_8707() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_02EE_D49C()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) when (e != null) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) when (e != null) { Console.WriteLine(e); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
              <Filter>
                <NotEqual Type=""System.Boolean"">
                  <Left>
                    <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                  </Left>
                  <Right>
                    <Constant Type=""System.Object"" Value=""null"" />
                  </Right>
                </NotEqual>
              </Filter>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_02EE_D49C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_02EE_D49C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1C02_6E0D()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.InvalidOperationException"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""I"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
            <CatchBlock Test=""System.OverflowException"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""O"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1C02_6E0D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1C02_6E0D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_744C_C5E7()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
          <Finally>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Finally>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_744C_C5E7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_744C_C5E7() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_9329_A4F3()
        {
            // (Expression<Action>)(() => { throw new Exception(); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { throw new Exception(); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <Throw Type=""System.Void"">
          <Operand>
            <New Type=""System.Exception"" Constructor=""Void .ctor()"">
              <Arguments />
            </New>
          </Operand>
        </Throw>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9329_A4F3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9329_A4F3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F778_9166()
        {
            // (Expression<Action>)(() => { try { } catch { throw; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { } catch { throw; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Default Type=""System.Void"" />
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Throw Type=""System.Void"" />
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F778_9166();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F778_9166() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_34FC_99EF()
        {
            // (Expression<Action>)(() => { try { } catch (Exception ex) { throw ex; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { } catch (Exception ex) { throw ex; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Default Type=""System.Void"" />
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""ex"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Throw Type=""System.Void"">
                      <Operand>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""ex"" />
                      </Operand>
                    </Throw>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_34FC_99EF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_34FC_99EF() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2156_D7F7()
        {
            // (Expression<Action<int>>)(x => { switch (x) {} })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) {} })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases />
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2156_D7F7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2156_D7F7() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_FCA9_3B3F()
        {
            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""0"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FCA9_3B3F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FCA9_3B3F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6832_C62D()
        {
            // (Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0, 1"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""A"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6832_C62D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6832_C62D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_4E9F_42FD()
        {
            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""A"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""D"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4E9F_42FD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4E9F_42FD() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_30E5_8D77()
        {
            // (Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0, null"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_30E5_8D77();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_30E5_8D77() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1754_0766()
        {
            // (Expression<Action<int?>>)(x => { switch (x) { case 0: goto case null; case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: goto case null; case null: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <CSharpGotoCase Type=""System.Void"" Value=""null"" />
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1754_0766();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1754_0766() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AD7C_C86B()
        {
            // (Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <CSharpGotoCase Type=""System.Void"" Value=""0"" />
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD7C_C86B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD7C_C86B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3E56_6022()
        {
            // (Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <CSharpGotoDefault Type=""System.Void"" />
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3E56_6022();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3E56_6022() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6D08_923C()
        {
            // (Expression<Action<int>>)(x => { switch (x) { default: break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { default: break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6D08_923C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6D08_923C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_205E_7D00()
        {
            // (Expression<Action>)(() => { switch (int.Parse("1")) { } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { switch (int.Parse(""1"")) { } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""1"" />
              </Arguments>
            </Call>
          </SwitchValue>
          <Cases />
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_205E_7D00();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_205E_7D00() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A00C_0847()
        {
            // (Expression<Action>)(() => { switch (int.Parse("1")) { default: break; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { switch (int.Parse(""1"")) { default: break; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""1"" />
              </Arguments>
            </Call>
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""0"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A00C_0847();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A00C_0847() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EDDE_8041()
        {
            // (Expression<Func<Index>>)(() => 1)
            var actual = GetDebugView(@"(Expression<Func<Index>>)(() => 1)");
            var expected = @"
<Lambda Type=""System.Func`1[System.Index]"">
  <Parameters />
  <Body>
    <Convert Type=""System.Index"" Method=""System.Index op_Implicit(Int32)"">
      <Operand>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Operand>
    </Convert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EDDE_8041();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EDDE_8041() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F139_7F81()
        {
            // (Expression<Func<Index>>)(() => ^1)
            var actual = GetDebugView(@"(Expression<Func<Index>>)(() => ^1)");
            var expected = @"
<Lambda Type=""System.Func`1[System.Index]"">
  <Parameters />
  <Body>
    <CSharpFromEndIndex Type=""System.Index"" Method=""Void .ctor(Int32, Boolean)"">
      <Operand>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Operand>
    </CSharpFromEndIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F139_7F81();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F139_7F81() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7E29_67F2()
        {
            // (Expression<Func<Range>>)(() => 1..2)
            var actual = GetDebugView(@"(Expression<Func<Range>>)(() => 1..2)");
            var expected = @"
<Lambda Type=""System.Func`1[System.Range]"">
  <Parameters />
  <Body>
    <CSharpRange Type=""System.Range"" Method=""Void .ctor(System.Index, System.Index)"">
      <Left>
        <Convert Type=""System.Index"" Method=""System.Index op_Implicit(Int32)"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Operand>
        </Convert>
      </Left>
      <Right>
        <Convert Type=""System.Index"" Method=""System.Index op_Implicit(Int32)"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""2"" />
          </Operand>
        </Convert>
      </Right>
    </CSharpRange>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7E29_67F2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7E29_67F2() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_16C3_9A18()
        {
            // (Expression<Func<string, bool>>)(s => int.TryParse(s, out _))
            var actual = GetDebugView(@"(Expression<Func<string, bool>>)(s => int.TryParse(s, out _))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <Call Type=""System.Boolean"" Method=""Boolean TryParse(System.String, Int32 ByRef)"">
      <Arguments>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
        <CSharpDiscard Type=""System.Int32"" />
      </Arguments>
    </Call>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_16C3_9A18();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_16C3_9A18() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7588_8D66()
        {
            // (Expression<Action>)(() => { _ = Console.ReadLine(); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { _ = Console.ReadLine(); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpAssign Type=""System.String"">
      <Left>
        <CSharpDiscard Type=""System.String"" />
      </Left>
      <Right>
        <Call Type=""System.String"" Method=""System.String ReadLine()"">
          <Arguments />
        </Call>
      </Right>
    </CSharpAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7588_8D66();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7588_8D66() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8939_4396()
        {
            // (Expression<Func<int>>)(() => throw new Exception())
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => throw new Exception())");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Throw Type=""System.Int32"">
      <Operand>
        <New Type=""System.Exception"" Constructor=""Void .ctor()"">
          <Arguments />
        </New>
      </Operand>
    </Throw>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8939_4396();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8939_4396() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A465_3AAF()
        {
            // (Expression<Func<string, string>>)(s => s ??= "foo")
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s ??= ""foo"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.String"">
      <Left>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Left>
      <Right>
        <Constant Type=""System.String"" Value=""foo"" />
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A465_3AAF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A465_3AAF() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_07E0_24A3()
        {
            // (Expression<Func<int?, int?, int?>>)((i, j) => i ??= j)
            var actual = GetDebugView(@"(Expression<Func<int?, int?, int?>>)((i, j) => i ??= j)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Nullable`1[System.Int32],System.Nullable`1[System.Int32],System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""i"" />
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""j"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.Nullable`1[System.Int32]"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""i"" />
      </Left>
      <Right>
        <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""j"" />
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_07E0_24A3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_07E0_24A3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_22AE_900C()
        {
            // (Expression<Func<int?, int>>)(i => i ??= 42)
            var actual = GetDebugView(@"(Expression<Func<int?, int>>)(i => i ??= 42)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.Int32],System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""i"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""i"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""42"" />
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_22AE_900C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_22AE_900C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0FE1_86B6()
        {
            // (Expression<Func<string, dynamic, string>>)((s, d) => s ??= d.bar)
            var actual = GetDebugView(@"(Expression<Func<string, dynamic, string>>)((s, d) => s ??= d.bar)");
            var expected = @"
<Lambda Type=""System.Func`3[System.String,System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.String"">
      <Left>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""bar"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0FE1_86B6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0FE1_86B6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_75E3_213A()
        {
            // (Expression<Func<string[], dynamic, string>>)((ss, d) => ss[int.Parse("0")] ??= d.bar)
            var actual = GetDebugView(@"(Expression<Func<string[], dynamic, string>>)((ss, d) => ss[int.Parse(""0"")] ??= d.bar)");
            var expected = @"
<Lambda Type=""System.Func`3[System.String[],System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.String[]"" Id=""0"" Name=""ss"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.String"">
      <Left>
        <ArrayIndex Type=""System.String"">
          <Left>
            <Parameter Type=""System.String[]"" Id=""0"" Name=""ss"" />
          </Left>
          <Right>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""0"" />
              </Arguments>
            </Call>
          </Right>
        </ArrayIndex>
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""bar"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_75E3_213A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_75E3_213A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_9CD5_03D0()
        {
            // (Expression<Func<List<string>, dynamic, string>>)((ss, d) => ss[int.Parse("0")] ??= d.bar)
            var actual = GetDebugView(@"(Expression<Func<List<string>, dynamic, string>>)((ss, d) => ss[int.Parse(""0"")] ??= d.bar)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.String],System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.String]"" Id=""0"" Name=""ss"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.String"">
      <Left>
        <CSharpIndex Type=""System.String"" Indexer=""System.String Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.String]"" Id=""0"" Name=""ss"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
                  <Arguments>
                    <Constant Type=""System.String"" Value=""0"" />
                  </Arguments>
                </Call>
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""bar"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9CD5_03D0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9CD5_03D0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_330E_2E05()
        {
            // (Expression<Func<StrongBox<string>, dynamic, string>>)((s, d) => s.Value ??= d.bar)
            var actual = GetDebugView(@"(Expression<Func<StrongBox<string>, dynamic, string>>)((s, d) => s.Value ??= d.bar)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Runtime.CompilerServices.StrongBox`1[System.String],System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.String]"" Id=""0"" Name=""s"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.String"">
      <Left>
        <MemberAccess Type=""System.String"" Member=""System.String Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.String]"" Id=""0"" Name=""s"" />
          </Expression>
        </MemberAccess>
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""bar"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_330E_2E05();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_330E_2E05() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B81A_515D()
        {
            // (Expression<Func<string, dynamic, string>>)((s, d) => s ??= d.foo[int.Parse("1")])
            var actual = GetDebugView(@"(Expression<Func<string, dynamic, string>>)((s, d) => s ??= d.foo[int.Parse(""1"")])");
            var expected = @"
<Lambda Type=""System.Func`3[System.String,System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.String"">
      <Left>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
          <Expression>
            <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
              <Object>
                <CSharpDynamicGetMember Type=""System.Object"" Name=""foo"" Flags=""ResultIndexed"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
                  </Object>
                </CSharpDynamicGetMember>
              </Object>
              <Arguments>
                <DynamicCSharpArgument Flags=""UseCompileTimeType"">
                  <Expression>
                    <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
                      <Arguments>
                        <Constant Type=""System.String"" Value=""1"" />
                      </Arguments>
                    </Call>
                  </Expression>
                </DynamicCSharpArgument>
              </Arguments>
            </CSharpDynamicGetIndex>
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B81A_515D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B81A_515D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7AF5_0A0E()
        {
            // (Expression<Func<string[], dynamic, string>>)((ss, d) => ss[int.Parse("0")] ??= d.foo[int.Parse("1")])
            var actual = GetDebugView(@"(Expression<Func<string[], dynamic, string>>)((ss, d) => ss[int.Parse(""0"")] ??= d.foo[int.Parse(""1"")])");
            var expected = @"
<Lambda Type=""System.Func`3[System.String[],System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.String[]"" Id=""0"" Name=""ss"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.String"">
      <Left>
        <ArrayIndex Type=""System.String"">
          <Left>
            <Parameter Type=""System.String[]"" Id=""0"" Name=""ss"" />
          </Left>
          <Right>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""0"" />
              </Arguments>
            </Call>
          </Right>
        </ArrayIndex>
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
          <Expression>
            <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
              <Object>
                <CSharpDynamicGetMember Type=""System.Object"" Name=""foo"" Flags=""ResultIndexed"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
                  </Object>
                </CSharpDynamicGetMember>
              </Object>
              <Arguments>
                <DynamicCSharpArgument Flags=""UseCompileTimeType"">
                  <Expression>
                    <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
                      <Arguments>
                        <Constant Type=""System.String"" Value=""1"" />
                      </Arguments>
                    </Call>
                  </Expression>
                </DynamicCSharpArgument>
              </Arguments>
            </CSharpDynamicGetIndex>
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7AF5_0A0E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7AF5_0A0E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_50DE_079F()
        {
            // (Expression<Func<List<string>, dynamic, string>>)((ss, d) => ss[int.Parse("0")] ??= d.foo[int.Parse("1")])
            var actual = GetDebugView(@"(Expression<Func<List<string>, dynamic, string>>)((ss, d) => ss[int.Parse(""0"")] ??= d.foo[int.Parse(""1"")])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.String],System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.String]"" Id=""0"" Name=""ss"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.String"">
      <Left>
        <CSharpIndex Type=""System.String"" Indexer=""System.String Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.String]"" Id=""0"" Name=""ss"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
                  <Arguments>
                    <Constant Type=""System.String"" Value=""0"" />
                  </Arguments>
                </Call>
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
          <Expression>
            <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
              <Object>
                <CSharpDynamicGetMember Type=""System.Object"" Name=""foo"" Flags=""ResultIndexed"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
                  </Object>
                </CSharpDynamicGetMember>
              </Object>
              <Arguments>
                <DynamicCSharpArgument Flags=""UseCompileTimeType"">
                  <Expression>
                    <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
                      <Arguments>
                        <Constant Type=""System.String"" Value=""1"" />
                      </Arguments>
                    </Call>
                  </Expression>
                </DynamicCSharpArgument>
              </Arguments>
            </CSharpDynamicGetIndex>
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_50DE_079F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_50DE_079F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_FE8E_B94B()
        {
            // (Expression<Func<StrongBox<string>, dynamic, string>>)((s, d) => s.Value ??= d.foo[int.Parse("1")])
            var actual = GetDebugView(@"(Expression<Func<StrongBox<string>, dynamic, string>>)((s, d) => s.Value ??= d.foo[int.Parse(""1"")])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Runtime.CompilerServices.StrongBox`1[System.String],System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.String]"" Id=""0"" Name=""s"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpNullCoalescingAssign Type=""System.String"">
      <Left>
        <MemberAccess Type=""System.String"" Member=""System.String Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.String]"" Id=""0"" Name=""s"" />
          </Expression>
        </MemberAccess>
      </Left>
      <Right>
        <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
          <Expression>
            <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
              <Object>
                <CSharpDynamicGetMember Type=""System.Object"" Name=""foo"" Flags=""ResultIndexed"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""System.Object"" Id=""1"" Name=""d"" />
                  </Object>
                </CSharpDynamicGetMember>
              </Object>
              <Arguments>
                <DynamicCSharpArgument Flags=""UseCompileTimeType"">
                  <Expression>
                    <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
                      <Arguments>
                        <Constant Type=""System.String"" Value=""1"" />
                      </Arguments>
                    </Call>
                  </Expression>
                </DynamicCSharpArgument>
              </Arguments>
            </CSharpDynamicGetIndex>
          </Expression>
        </CSharpDynamicConvert>
      </Right>
    </CSharpNullCoalescingAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FE8E_B94B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FE8E_B94B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_9440_85D5()
        {
            // (Expression<Func<dynamic, string, string>>)((d, s) => d.bar ??= s)
            var actual = GetDebugView(@"(Expression<Func<dynamic, string, string>>)((d, s) => d.bar ??= s)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
    <Parameter Type=""System.String"" Id=""1"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
      <Expression>
        <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""NullCoalescingAssign"">
          <Left>
            <DynamicCSharpArgument>
              <Expression>
                <CSharpDynamicGetMember Type=""System.Object"" Name=""bar"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
                  </Object>
                </CSharpDynamicGetMember>
              </Expression>
            </DynamicCSharpArgument>
          </Left>
          <Right>
            <DynamicCSharpArgument Flags=""UseCompileTimeType"">
              <Expression>
                <Parameter Type=""System.String"" Id=""1"" Name=""s"" />
              </Expression>
            </DynamicCSharpArgument>
          </Right>
        </CSharpDynamicBinaryAssign>
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9440_85D5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9440_85D5() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2C1D_9A84()
        {
            // (Expression<Func<dynamic, int, int>>)((d, x) => d.bar ??= x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, int>>)((d, x) => d.bar ??= x)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.Int32"" Context=""Expressions"">
      <Expression>
        <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""NullCoalescingAssign"">
          <Left>
            <DynamicCSharpArgument>
              <Expression>
                <CSharpDynamicGetMember Type=""System.Object"" Name=""bar"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
                  </Object>
                </CSharpDynamicGetMember>
              </Expression>
            </DynamicCSharpArgument>
          </Left>
          <Right>
            <DynamicCSharpArgument>
              <Expression>
                <Convert Type=""System.Object"">
                  <Operand>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                  </Operand>
                </Convert>
              </Expression>
            </DynamicCSharpArgument>
          </Right>
        </CSharpDynamicBinaryAssign>
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2C1D_9A84();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2C1D_9A84() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F57B_8C67()
        {
            // (Expression<Func<dynamic, string, string>>)((d, s) => d[int.Parse("0")] ??= s)
            var actual = GetDebugView(@"(Expression<Func<dynamic, string, string>>)((d, s) => d[int.Parse(""0"")] ??= s)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
    <Parameter Type=""System.String"" Id=""1"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.String"" Context=""Expressions"">
      <Expression>
        <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""NullCoalescingAssign"">
          <Left>
            <DynamicCSharpArgument>
              <Expression>
                <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
                  </Object>
                  <Arguments>
                    <DynamicCSharpArgument Flags=""UseCompileTimeType"">
                      <Expression>
                        <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
                          <Arguments>
                            <Constant Type=""System.String"" Value=""0"" />
                          </Arguments>
                        </Call>
                      </Expression>
                    </DynamicCSharpArgument>
                  </Arguments>
                </CSharpDynamicGetIndex>
              </Expression>
            </DynamicCSharpArgument>
          </Left>
          <Right>
            <DynamicCSharpArgument Flags=""UseCompileTimeType"">
              <Expression>
                <Parameter Type=""System.String"" Id=""1"" Name=""s"" />
              </Expression>
            </DynamicCSharpArgument>
          </Right>
        </CSharpDynamicBinaryAssign>
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F57B_8C67();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F57B_8C67() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_734B_65DC()
        {
            // (Expression<Func<dynamic, int, int>>)((d, x) => d[int.Parse("0")] ??= x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, int>>)((d, x) => d[int.Parse(""0"")] ??= x)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.Int32"" Context=""Expressions"">
      <Expression>
        <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""NullCoalescingAssign"">
          <Left>
            <DynamicCSharpArgument>
              <Expression>
                <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
                  </Object>
                  <Arguments>
                    <DynamicCSharpArgument Flags=""UseCompileTimeType"">
                      <Expression>
                        <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
                          <Arguments>
                            <Constant Type=""System.String"" Value=""0"" />
                          </Arguments>
                        </Call>
                      </Expression>
                    </DynamicCSharpArgument>
                  </Arguments>
                </CSharpDynamicGetIndex>
              </Expression>
            </DynamicCSharpArgument>
          </Left>
          <Right>
            <DynamicCSharpArgument>
              <Expression>
                <Convert Type=""System.Object"">
                  <Operand>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                  </Operand>
                </Convert>
              </Expression>
            </DynamicCSharpArgument>
          </Right>
        </CSharpDynamicBinaryAssign>
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_734B_65DC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_734B_65DC() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_BBC0_6EA4()
        {
            // (Expression<Func<dynamic, dynamic>>)(d => d.bar ??= d.foo)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(d => d.bar ??= d.foo)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""NullCoalescingAssign"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""bar"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""foo"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BBC0_6EA4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BBC0_6EA4() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D860_6F20()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((l, r) => l ??= r.foo)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((l, r) => l ??= r.foo)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""NullCoalescingAssign"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""l"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetMember Type=""System.Object"" Name=""foo"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""1"" Name=""r"" />
              </Object>
            </CSharpDynamicGetMember>
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D860_6F20();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D860_6F20() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7A6C_546D()
        {
            // (Expression<Func<dynamic, dynamic, dynamic>>)((l, r) => l ??= r[int.Parse("0")])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((l, r) => l ??= r[int.Parse(""0"")])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinaryAssign Type=""System.Object"" OperationNodeType=""NullCoalescingAssign"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""l"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
              <Object>
                <Parameter Type=""System.Object"" Id=""1"" Name=""r"" />
              </Object>
              <Arguments>
                <DynamicCSharpArgument Flags=""UseCompileTimeType"">
                  <Expression>
                    <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
                      <Arguments>
                        <Constant Type=""System.String"" Value=""0"" />
                      </Arguments>
                    </Call>
                  </Expression>
                </DynamicCSharpArgument>
              </Arguments>
            </CSharpDynamicGetIndex>
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinaryAssign>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7A6C_546D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7A6C_546D() => INCONCLUSIVE(); }

    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests
    {
        partial class Reviewed
        {
            public override void CompilerTest_9D30_AA02() => OK();
            public override void CompilerTest_3ECF_6910() => OK();
            public override void CompilerTest_F51F_71B6() => OK();
            public override void CompilerTest_E70E_4B35() => OK();
            public override void CompilerTest_59A0_FFB9() => OK();
            public override void CompilerTest_789A_453A() => OK();
            public override void CompilerTest_E9F4_7C15() => OK();
            public override void CompilerTest_4EB1_83FD() => OK();
            public override void CompilerTest_C437_AA4C() => OK();
            public override void CompilerTest_4C39_BCFC() => OK();
            public override void CompilerTest_7E8C_AA4C() => OK();
            public override void CompilerTest_00C1_AE5C() => OK();
            public override void CompilerTest_D9CA_6B19() => OK();
            public override void CompilerTest_EDEC_D0C9() => OK();
            public override void CompilerTest_6271_EABC() => OK();
            public override void CompilerTest_053A_671C() => OK();
            public override void CompilerTest_B473_5F62() => OK();
            public override void CompilerTest_8E43_6B25() => OK();
            public override void CompilerTest_CE27_211A() => OK();
            public override void CompilerTest_EA86_0AAE() => OK();
            public override void CompilerTest_7005_E877() => OK();
            public override void CompilerTest_775D_E1DB() => OK();
            public override void CompilerTest_84B6_6376() => OK();
            public override void CompilerTest_754C_C121() => OK();
            public override void CompilerTest_6E28_DBCA() => OK();
            public override void CompilerTest_A085_4C3D() => OK();
            public override void CompilerTest_DE17_40A5() => OK();
            public override void CompilerTest_5CD0_0AE2() => OK();
            public override void CompilerTest_0C84_0C91() => OK();
            public override void CompilerTest_FF88_BC1C() => OK();
            public override void CompilerTest_F2A3_DCF3() => OK();
            public override void CompilerTest_3DBC_7187() => OK();
            public override void CompilerTest_5002_22B5() => OK();
            public override void CompilerTest_1A1B_4504() => OK();
            public override void CompilerTest_8DF7_1EFB() => OK();
            public override void CompilerTest_5F46_EC7B() => OK();
            public override void CompilerTest_106F_B1CC() => OK();
            public override void CompilerTest_2275_966C() => OK();
            public override void CompilerTest_FB20_C3F6() => OK();
            public override void CompilerTest_191C_CEEB() => OK();
            public override void CompilerTest_6647_1258() => OK();
            public override void CompilerTest_93FA_3B2C() => OK();
            public override void CompilerTest_8FB3_87A6() => OK();
            public override void CompilerTest_AB76_B2ED() => OK();
            public override void CompilerTest_14B0_8F1F() => OK();
            public override void CompilerTest_ABB7_09A0() => OK();
            public override void CompilerTest_647C_869C() => OK();
            public override void CompilerTest_A62F_E0EA() => OK();
            public override void CompilerTest_6E0D_C117() => OK();
            public override void CompilerTest_9AE8_6C9F() => OK();
            public override void CompilerTest_2069_9E36() => OK();
            public override void CompilerTest_4C1E_1B45() => OK();
            public override void CompilerTest_5D0B_BB53() => OK();
            public override void CompilerTest_644B_2D72() => OK();
            public override void CompilerTest_3B77_970B() => OK();
            public override void CompilerTest_3418_D0D2() => OK();
            public override void CompilerTest_0946_2AB1() => OK();
            public override void CompilerTest_1B29_3F4D() => OK();
            public override void CompilerTest_EEB8_ED24() => OK();
            public override void CompilerTest_7349_817B() => OK();
            public override void CompilerTest_76D5_13EF() => OK();
            public override void CompilerTest_8619_DB42() => OK();
            public override void CompilerTest_4B4B_894F() => OK();
            public override void CompilerTest_B5A3_A9EE() => OK();
            public override void CompilerTest_CFDD_AFEF() => OK();
            public override void CompilerTest_F090_0B2E() => OK();
            public override void CompilerTest_3646_7B2B() => OK();
            public override void CompilerTest_DC58_213C() => OK();
            public override void CompilerTest_5C4C_E9EB() => OK();
            public override void CompilerTest_55B7_3EFA() => OK();
            public override void CompilerTest_7760_936B() => OK();
            public override void CompilerTest_7FDD_6511() => OK();
            public override void CompilerTest_D809_C13E() => OK();
            public override void CompilerTest_9998_022C() => OK();
            public override void CompilerTest_F77D_040F() => OK();
            public override void CompilerTest_604B_718E() => OK();
            public override void CompilerTest_D83C_2D6C() => OK();
            public override void CompilerTest_447A_FCCE() => OK();
            public override void CompilerTest_F586_7D7E() => OK();
            public override void CompilerTest_22AA_5962() => OK();
            public override void CompilerTest_29E3_8116() => OK();
            public override void CompilerTest_2CE0_A2D8() => OK();
            public override void CompilerTest_D55B_C6C6() => OK();
            public override void CompilerTest_2844_368E() => OK();
            public override void CompilerTest_9F3A_F93F() => OK();
            public override void CompilerTest_C18D_D9F0() => OK();
            public override void CompilerTest_AC33_6CF6() => OK();
            public override void CompilerTest_7E7C_347D() => OK();
            public override void CompilerTest_83CF_2E6D() => OK();
            public override void CompilerTest_5A71_E881() => OK();
            public override void CompilerTest_D153_E7CE() => OK();
            public override void CompilerTest_38EA_1C46() => OK();
            public override void CompilerTest_D565_C82E() => OK();
            public override void CompilerTest_711C_7F96() => OK();
            public override void CompilerTest_E835_F8BD() => OK();
            public override void CompilerTest_C576_1024() => OK();
            public override void CompilerTest_0FFA_9FD5() => OK();
            public override void CompilerTest_83AE_58B0() => OK();
            public override void CompilerTest_4DC5_94D3() => OK();
            public override void CompilerTest_5DFD_94D3() => OK();
            public override void CompilerTest_1A0E_037C() => OK();
            public override void CompilerTest_B340_BC70() => OK();
            public override void CompilerTest_9320_B6D2() => OK();
            public override void CompilerTest_A997_18C3() => OK();
            public override void CompilerTest_A5F9_6775() => OK();
            public override void CompilerTest_F165_9386() => OK();
            public override void CompilerTest_2462_8DFD() => OK();
            public override void CompilerTest_3041_FAE0() => OK();
            public override void CompilerTest_CB0C_60AB() => OK();
            public override void CompilerTest_CF40_3D45() => OK();
            public override void CompilerTest_4241_E360() => OK();
            public override void CompilerTest_A8D0_49C3() => OK();
            public override void CompilerTest_197A_C7FA() => OK();
            public override void CompilerTest_27AA_4144() => OK();
            public override void CompilerTest_0BD6_C135() => OK();
            public override void CompilerTest_7F95_E445() => OK();
            public override void CompilerTest_6102_7F8E() => OK();
            public override void CompilerTest_AEF8_BB4B() => OK();
            public override void CompilerTest_7381_AA02() => OK();
            public override void CompilerTest_BBBC_6128() => OK();
            public override void CompilerTest_6FC7_B4A6() => OK();
            public override void CompilerTest_F94F_ACD8() => OK();
            public override void CompilerTest_044F_D3EC() => OK();
            public override void CompilerTest_094E_F5F3() => OK();
            public override void CompilerTest_8BE1_8041() => OK();
            public override void CompilerTest_F3D0_F9A7() => OK();
            public override void CompilerTest_EB02_69E4() => OK();
            public override void CompilerTest_6EC4_AD12() => OK();
            public override void CompilerTest_7D09_A1B7() => OK();
            public override void CompilerTest_ED89_63D1() => OK();
            public override void CompilerTest_6090_4BC9() => OK();
            public override void CompilerTest_D47A_FCEE() => OK();
            public override void CompilerTest_60B4_CC06() => OK();
            public override void CompilerTest_2DAA_6C38() => OK();
            public override void CompilerTest_7F56_2B0B() => OK();
            public override void CompilerTest_27E3_F016() => OK();
            public override void CompilerTest_467C_C565() => OK();
            public override void CompilerTest_B13A_1C7B() => OK();
            public override void CompilerTest_EE3F_5608() => OK();
            public override void CompilerTest_79AE_FDED() => OK();
            public override void CompilerTest_A709_35ED() => OK();
            public override void CompilerTest_8CA7_35F4() => OK();
            public override void CompilerTest_8BFE_5348() => OK();
            public override void CompilerTest_18CC_52FA() => OK();
            public override void CompilerTest_7492_2165() => OK();
            public override void CompilerTest_6A94_CEB8() => OK();
            public override void CompilerTest_2F5D_78CC() => OK();
            public override void CompilerTest_EAFD_44CE() => OK();
            public override void CompilerTest_AC8A_1D36() => OK();
            public override void CompilerTest_C8F7_9590() => OK();
            public override void CompilerTest_3859_C424() => OK();
            public override void CompilerTest_3AC9_2A4D() => OK();
            public override void CompilerTest_93FC_E500() => OK();
            public override void CompilerTest_1D2F_7FC2() => OK();
            public override void CompilerTest_1EDE_F8E3() => OK();
            public override void CompilerTest_A171_560A() => OK();
            public override void CompilerTest_E00F_CAB4() => OK();
            public override void CompilerTest_1D70_2F15() => OK();
            public override void CompilerTest_530B_F222() => OK();
            public override void CompilerTest_C266_EBD1() => OK();
            public override void CompilerTest_E15F_B595() => OK();
            public override void CompilerTest_2C91_A398() => OK();
            public override void CompilerTest_00CF_F74C() => OK();
            public override void CompilerTest_9C51_A974() => OK();
            public override void CompilerTest_2115_988C() => OK();
            public override void CompilerTest_09D9_F0A4() => OK();
            public override void CompilerTest_C9BD_6C2B() => OK();
            public override void CompilerTest_1C12_C262() => OK();
            public override void CompilerTest_B58C_BABA() => OK();
            public override void CompilerTest_2817_4DD1() => OK();
            public override void CompilerTest_64E0_6F8F() => OK();
            public override void CompilerTest_73AB_B92F() => OK();
            public override void CompilerTest_F997_C431() => OK();
            public override void CompilerTest_C633_B342() => OK();
            public override void CompilerTest_6BBF_B4A0() => OK();
            public override void CompilerTest_893C_BAAE() => OK();
            public override void CompilerTest_A586_E8F9() => OK();
            public override void CompilerTest_B251_AFB5() => OK();
            public override void CompilerTest_98BA_6FFB() => OK();
            public override void CompilerTest_5002_049B() => OK();
            public override void CompilerTest_2E6E_DC66() => OK();
            public override void CompilerTest_0162_65C6() => OK();
            public override void CompilerTest_C668_6525() => OK();
            public override void CompilerTest_AD28_1A20() => OK();
            public override void CompilerTest_0D46_A139() => OK();
            public override void CompilerTest_EDA6_9661() => OK();
            public override void CompilerTest_8D15_759F() => OK();
            public override void CompilerTest_E582_3900() => OK();
            public override void CompilerTest_859E_AB64() => OK();
            public override void CompilerTest_790B_3BA4() => OK();
            public override void CompilerTest_5B70_B34F() => OK();
            public override void CompilerTest_09B1_7323() => OK();
            public override void CompilerTest_361E_5216() => OK();
            public override void CompilerTest_C043_D2B0() => OK();
            public override void CompilerTest_2216_A3C9() => OK();
            public override void CompilerTest_6319_CF5C() => OK();
            public override void CompilerTest_1D89_F94D() => OK();
            public override void CompilerTest_B73D_03FA() => OK();
            public override void CompilerTest_5419_99E8() => OK();
            public override void CompilerTest_EB64_66C6() => OK();
            public override void CompilerTest_C90B_9C05() => OK();
            public override void CompilerTest_C5C5_4E9F() => OK();
            public override void CompilerTest_7D34_66D1() => OK();
            public override void CompilerTest_40EC_DA92() => OK();
            public override void CompilerTest_FC9A_C797() => OK();
            public override void CompilerTest_6C15_9FA8() => OK();
            public override void CompilerTest_242C_68A7() => OK();
            public override void CompilerTest_2503_AEF6() => OK();
            public override void CompilerTest_6674_1E31() => OK();
            public override void CompilerTest_B6D5_79C3() => OK();
            public override void CompilerTest_25E2_35E6() => OK();
            public override void CompilerTest_AD48_86CB() => OK();
            public override void CompilerTest_5EF7_9418() => OK();
            public override void CompilerTest_26D5_E9FE() => OK();
            public override void CompilerTest_F7F3_AD6D() => OK();
            public override void CompilerTest_245A_DA7A() => OK();
            public override void CompilerTest_DA7B_B67A() => OK();
            public override void CompilerTest_34B8_6522() => OK();
            public override void CompilerTest_3958_5948() => OK();
            public override void CompilerTest_1525_79A2() => OK();
            public override void CompilerTest_720D_1B2C() => OK();
            public override void CompilerTest_0041_C3E9() => OK();
            public override void CompilerTest_AE67_91A3() => OK();
            public override void CompilerTest_8AE9_0673() => OK();
            public override void CompilerTest_5598_03A6() => OK();
            public override void CompilerTest_62CA_03A6() => OK();
            public override void CompilerTest_BB7C_2A2A() => OK();
            public override void CompilerTest_51A3_E043() => OK();
            public override void CompilerTest_57C3_49DB() => OK();
            public override void CompilerTest_7AF8_8902() => OK();
            public override void CompilerTest_2CF2_18B2() => OK();
            public override void CompilerTest_CD60_A086() => OK();
            public override void CompilerTest_880F_A24B() => OK();
            public override void CompilerTest_19B3_485B() => OK();
            public override void CompilerTest_0662_485B() => OK();
            public override void CompilerTest_F63E_8707() => OK();
            public override void CompilerTest_02EE_D49C() => OK();
            public override void CompilerTest_1C02_6E0D() => OK();
            public override void CompilerTest_744C_C5E7() => OK();
            public override void CompilerTest_9329_A4F3() => OK();
            public override void CompilerTest_F778_9166() => OK();
            public override void CompilerTest_34FC_99EF() => OK();
            public override void CompilerTest_2156_D7F7() => OK();
            public override void CompilerTest_FCA9_3B3F() => OK();
            public override void CompilerTest_6832_C62D() => OK();
            public override void CompilerTest_4E9F_42FD() => OK();
            public override void CompilerTest_30E5_8D77() => OK();
            public override void CompilerTest_1754_0766() => OK();
            public override void CompilerTest_AD7C_C86B() => OK();
            public override void CompilerTest_3E56_6022() => OK();
            public override void CompilerTest_6D08_923C() => OK();
            public override void CompilerTest_205E_7D00() => OK();
            public override void CompilerTest_A00C_0847() => OK();
            public override void CompilerTest_EDDE_8041() => OK();
            public override void CompilerTest_F139_7F81() => OK();
            public override void CompilerTest_7E29_67F2() => OK();
            public override void CompilerTest_16C3_9A18() => OK();
            public override void CompilerTest_7588_8D66() => OK();
            public override void CompilerTest_8939_4396() => OK();
            public override void CompilerTest_A465_3AAF() => OK();
            public override void CompilerTest_07E0_24A3() => OK();
            public override void CompilerTest_22AE_900C() => OK();
            public override void CompilerTest_0FE1_86B6() => OK();
            public override void CompilerTest_75E3_213A() => OK();
            public override void CompilerTest_9CD5_03D0() => OK();
            public override void CompilerTest_330E_2E05() => OK();
            public override void CompilerTest_B81A_515D() => OK();
            public override void CompilerTest_7AF5_0A0E() => OK();
            public override void CompilerTest_50DE_079F() => OK();
            public override void CompilerTest_FE8E_B94B() => OK();
            public override void CompilerTest_9440_85D5() => OK();
            public override void CompilerTest_2C1D_9A84() => OK();
            public override void CompilerTest_F57B_8C67() => OK();
            public override void CompilerTest_734B_65DC() => OK();
            public override void CompilerTest_BBC0_6EA4() => OK();
            public override void CompilerTest_D860_6F20() => OK();
            public override void CompilerTest_7A6C_546D() => OK();
        }
    }
}
*/
}
