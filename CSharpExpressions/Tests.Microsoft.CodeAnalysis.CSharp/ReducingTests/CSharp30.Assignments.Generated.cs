// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    [TestClass]
    public partial class CompilerTests_CSharp30_Assignments_Reducing
    {
        [TestMethod]
        public void CompilerTest_579D_1565()
        {
            // (Expression<Action<int>>)(x => { x = 1; })
            var actual = ToCSharp(@"(Expression<Action<int>>)(x => { x = 1; })", reduce: true);
            var expected = @"
(int x) => x = 1";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_579D_1565();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_579D_1565() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_93F1_0B14()
        {
            // (Expression<Action<int[]>>)(xs => { xs[0] = 1; })
            var actual = ToCSharp(@"(Expression<Action<int[]>>)(xs => { xs[0] = 1; })", reduce: true);
            var expected = @"
(int[] xs) => xs[0] = 1";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_93F1_0B14();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_93F1_0B14() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2F3A_3301()
        {
            // (Expression<Action<int[,]>>)(xs => { xs[0, 0] = 1; })
            var actual = ToCSharp(@"(Expression<Action<int[,]>>)(xs => { xs[0, 0] = 1; })", reduce: true);
            var expected = @"
(int[,] xs) => xs[0, 0] = 1";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2F3A_3301();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2F3A_3301() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_430E_E061()
        {
            // (Expression<Action<List<int>>>)(xs => { xs[0] = 1; })
            var actual = ToCSharp(@"(Expression<Action<List<int>>>)(xs => { xs[0] = 1; })", reduce: true);
            var expected = @"
(List<int> xs) =>
{
    List<int> __obj;
    __obj = xs;
    return __obj[0] = 1;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_430E_E061();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_430E_E061() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AEF8_513D()
        {
            // (Expression<Action<StrongBox<int>>>)(b => { b.Value = 1; })
            var actual = ToCSharp(@"(Expression<Action<StrongBox<int>>>)(b => { b.Value = 1; })", reduce: true);
            var expected = @"
(System.Runtime.CompilerServices.StrongBox<int> b) => b.Value = 1";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AEF8_513D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AEF8_513D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_044F_E9C5()
        {
            // (Expression<Action<int>>)(x => { x += 1; })
            var actual = ToCSharp(@"(Expression<Action<int>>)(x => { x += 1; })", reduce: true);
            var expected = @"
(int x) => x = x + 1";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_044F_E9C5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_044F_E9C5() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_E0C9_5074()
        {
            // (Expression<Action<int[]>>)(xs => { xs[0] += 1; })
            var actual = ToCSharp(@"(Expression<Action<int[]>>)(xs => { xs[0] += 1; })", reduce: true);
            var expected = @"
(int[] xs) =>
{
    int[] __object;
    __object = xs;
    return __object[0] = __object[0] + 1;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E0C9_5074();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E0C9_5074() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7C94_4A5D()
        {
            // (Expression<Action<int[,]>>)(xs => { xs[0, 0] += 1; })
            var actual = ToCSharp(@"(Expression<Action<int[,]>>)(xs => { xs[0, 0] += 1; })", reduce: true);
            var expected = @"
(int[,] xs) =>
{
    int[,] __object;
    __object = xs;
    return __object[0, 0] = __object[0, 0] + 1;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7C94_4A5D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7C94_4A5D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_79AE_D22A()
        {
            // (Expression<Action<List<int>>>)(xs => { xs[0] += 1; })
            var actual = ToCSharp(@"(Expression<Action<List<int>>>)(xs => { xs[0] += 1; })", reduce: true);
            var expected = @"
(List<int> xs) =>
{
    List<int> __obj;
    __obj = xs;
    return __obj[0] = __obj[0] + 1;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_79AE_D22A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_79AE_D22A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_08DA_1642()
        {
            // (Expression<Action<StrongBox<int>>>)(b => { b.Value += 1; })
            var actual = ToCSharp(@"(Expression<Action<StrongBox<int>>>)(b => { b.Value += 1; })", reduce: true);
            var expected = @"
(System.Runtime.CompilerServices.StrongBox<int> b) =>
{
    System.Runtime.CompilerServices.StrongBox<int> __lhs;
    __lhs = b;
    return __lhs.Value = __lhs.Value + 1;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_08DA_1642();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_08DA_1642() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2115_E9C5()
        {
            // (Expression<Action<int>>)(x => { ++x; })
            var actual = ToCSharp(@"(Expression<Action<int>>)(x => { ++x; })", reduce: true);
            var expected = @"
(int x) => x = x + 1";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2115_E9C5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2115_E9C5() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_89F1_5074()
        {
            // (Expression<Action<int[]>>)(xs => { ++xs[0]; })
            var actual = ToCSharp(@"(Expression<Action<int[]>>)(xs => { ++xs[0]; })", reduce: true);
            var expected = @"
(int[] xs) =>
{
    int[] __object;
    __object = xs;
    return __object[0] = __object[0] + 1;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_89F1_5074();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_89F1_5074() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_205F_4A5D()
        {
            // (Expression<Action<int[,]>>)(xs => { ++xs[0, 0]; })
            var actual = ToCSharp(@"(Expression<Action<int[,]>>)(xs => { ++xs[0, 0]; })", reduce: true);
            var expected = @"
(int[,] xs) =>
{
    int[,] __object;
    __object = xs;
    return __object[0, 0] = __object[0, 0] + 1;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_205F_4A5D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_205F_4A5D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_FB63_D22A()
        {
            // (Expression<Action<List<int>>>)(xs => { ++xs[0]; })
            var actual = ToCSharp(@"(Expression<Action<List<int>>>)(xs => { ++xs[0]; })", reduce: true);
            var expected = @"
(List<int> xs) =>
{
    List<int> __obj;
    __obj = xs;
    return __obj[0] = __obj[0] + 1;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FB63_D22A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FB63_D22A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_30FE_1642()
        {
            // (Expression<Action<StrongBox<int>>>)(b => { ++b.Value; })
            var actual = ToCSharp(@"(Expression<Action<StrongBox<int>>>)(b => { ++b.Value; })", reduce: true);
            var expected = @"
(System.Runtime.CompilerServices.StrongBox<int> b) =>
{
    System.Runtime.CompilerServices.StrongBox<int> __lhs;
    __lhs = b;
    return __lhs.Value = __lhs.Value + 1;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_30FE_1642();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_30FE_1642() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_00CF_E2F6()
        {
            // (Expression<Action<int>>)(x => { x++; })
            var actual = ToCSharp(@"(Expression<Action<int>>)(x => { x++; })", reduce: true);
            var expected = @"
(int x) =>
{
    int __temp;
    __temp = x;
    x = __temp + 1;
    return __temp;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_00CF_E2F6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_00CF_E2F6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_FE9D_CA70()
        {
            // (Expression<Action<int[]>>)(xs => { xs[0]++; })
            var actual = ToCSharp(@"(Expression<Action<int[]>>)(xs => { xs[0]++; })", reduce: true);
            var expected = @"
(int[] xs) =>
{
    int[] __object;
    int __index;
    __object = xs;
    __index = __object[0];
    __object[0] = __index + 1;
    return __index;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FE9D_CA70();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FE9D_CA70() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_BB88_996D()
        {
            // (Expression<Action<int[,]>>)(xs => { xs[0, 0]++; })
            var actual = ToCSharp(@"(Expression<Action<int[,]>>)(xs => { xs[0, 0]++; })", reduce: true);
            var expected = @"
(int[,] xs) =>
{
    int[,] __object;
    int __index;
    __object = xs;
    __index = __object[0, 0];
    __object[0, 0] = __index + 1;
    return __index;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BB88_996D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BB88_996D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_55F5_5F50()
        {
            // (Expression<Action<List<int>>>)(xs => { xs[0]++; })
            var actual = ToCSharp(@"(Expression<Action<List<int>>>)(xs => { xs[0]++; })", reduce: true);
            var expected = @"
(List<int> xs) =>
{
    List<int> __obj;
    __obj = xs;
    return {
        int __temp;
        __temp = __obj[0];
        __obj[0] = __temp + 1;
        /*return*/ __temp/*;*/
    };
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_55F5_5F50();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_55F5_5F50() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0564_DD7A()
        {
            // (Expression<Action<StrongBox<int>>>)(b => { b.Value++; })
            var actual = ToCSharp(@"(Expression<Action<StrongBox<int>>>)(b => { b.Value++; })", reduce: true);
            var expected = @"
(System.Runtime.CompilerServices.StrongBox<int> b) =>
{
    System.Runtime.CompilerServices.StrongBox<int> __lhs;
    int __temp;
    __lhs = b;
    __temp = __lhs.Value;
    __lhs.Value = __temp + 1;
    return __temp;
}";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0564_DD7A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0564_DD7A() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { Assert.Inconclusive(); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp30_Assignments_Reducing
    {
        partial class Reviewed
        {
            public override void CompilerTest_579D_1565() => OK();
            public override void CompilerTest_93F1_0B14() => OK();
            public override void CompilerTest_2F3A_3301() => OK();
            public override void CompilerTest_430E_E061() => OK();
            public override void CompilerTest_AEF8_513D() => OK();
            public override void CompilerTest_044F_E9C5() => OK();
            public override void CompilerTest_E0C9_5074() => OK();
            public override void CompilerTest_7C94_4A5D() => OK();
            public override void CompilerTest_79AE_D22A() => OK();
            public override void CompilerTest_08DA_1642() => OK();
            public override void CompilerTest_2115_E9C5() => OK();
            public override void CompilerTest_89F1_5074() => OK();
            public override void CompilerTest_205F_4A5D() => OK();
            public override void CompilerTest_FB63_D22A() => OK();
            public override void CompilerTest_30FE_1642() => OK();
            public override void CompilerTest_00CF_E2F6() => OK();
            public override void CompilerTest_FE9D_CA70() => OK();
            public override void CompilerTest_BB88_996D() => OK();
            public override void CompilerTest_55F5_5F50() => OK();
            public override void CompilerTest_0564_DD7A() => OK();
        }
    }
}
*/
}
