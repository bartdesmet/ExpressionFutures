// Prototyping extended expression trees for C#.
//
// bartde - November 2015

<#
// NB: When ading a test, it will be *SKIPPED* by default. In order to enable it, review the generated
//     test code and go to the .Verify.cs file to add an entry acknowledging the manual inspection by
//     providing an outcome.

// NB: Editing and saving this file can take a *VERY LONG* time because it invokes the C# compiler at
//     text template processing time. Be patient while Visual Studio appears to hang.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#
var name = "CSharp30_Assignments_Reducing";

var exprs = new[]
{
    // Assign
    "(Expression<Action<int>>)(x => { x = 1; })",
    "(Expression<Action<int[]>>)(xs => { xs[0] = 1; })",
    "(Expression<Action<int[,]>>)(xs => { xs[0, 0] = 1; })",
    "(Expression<Action<List<int>>>)(xs => { xs[0] = 1; })",
    "(Expression<Action<StrongBox<int>>>)(b => { b.Value = 1; })",

    // Compound assign
    "(Expression<Action<int>>)(x => { x += 1; })",
    "(Expression<Action<int[]>>)(xs => { xs[0] += 1; })",
    "(Expression<Action<int[,]>>)(xs => { xs[0, 0] += 1; })",
    "(Expression<Action<List<int>>>)(xs => { xs[0] += 1; })",
    "(Expression<Action<StrongBox<int>>>)(b => { b.Value += 1; })",

    // Prefix unary assign
    "(Expression<Action<int>>)(x => { ++x; })",
    "(Expression<Action<int[]>>)(xs => { ++xs[0]; })",
    "(Expression<Action<int[,]>>)(xs => { ++xs[0, 0]; })",
    "(Expression<Action<List<int>>>)(xs => { ++xs[0]; })",
    "(Expression<Action<StrongBox<int>>>)(b => { ++b.Value; })",

    // Postfix unary assign
    "(Expression<Action<int>>)(x => { x++; })",
    "(Expression<Action<int[]>>)(xs => { xs[0]++; })",
    "(Expression<Action<int[,]>>)(xs => { xs[0, 0]++; })",
    "(Expression<Action<List<int>>>)(xs => { xs[0]++; })",
    "(Expression<Action<StrongBox<int>>>)(b => { b.Value++; })",
};
#>
<#@ include file="CompilerTests.t4" #>