// Prototyping extended expression trees for C#.
//
// bartde - December 2015

<#
// NB: When ading a test, it will be *SKIPPED* by default. In order to enable it, review the generated
//     test code and go to the .Verify.cs file to add an entry acknowledging the manual inspection by
//     providing an outcome.

// NB: Editing and saving this file can take a *VERY LONG* time because it invokes the C# compiler at
//     text template processing time. Be patient while Visual Studio appears to hang.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\Tests.Microsoft.CodeAnalysis.CSharp.Helpers\bin\$(Configuration)\Tests.Microsoft.CodeAnalysis.CSharp.Helpers.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Tests.Microsoft.CodeAnalysis.CSharp" #>
<#@ output extension=".cs" #>
<#
var exprs = new[]
{
    // By-ref with named parameters
    "(Expression<Func<int, int>>)(x => System.Threading.Interlocked.Exchange(value: int.Parse(\"1\"), location1: ref x))",
    "(Expression<Func<StrongBox<int>, int>>)(b => System.Threading.Interlocked.Exchange(value: int.Parse(\"1\"), location1: ref b.Value))",
    "(Expression<Func<int[], int>>)(xs => System.Threading.Interlocked.Exchange(value: int.Parse(\"1\"), location1: ref xs[int.Parse(\"0\")]))",

    // Assign
    "(Expression<Action<int>>)(x => { x = 1; })",
    "(Expression<Action<int[]>>)(xs => { xs[0] = 1; })",
    "(Expression<Action<int[,]>>)(xs => { xs[0, 0] = 1; })",
    "(Expression<Action<List<int>>>)(xs => { xs[0] = 1; })",
    "(Expression<Action<StrongBox<int>>>)(b => { b.Value = 1; })",

    // Compound assign
    "(Expression<Action<int>>)(x => { x += 1; })",
    "(Expression<Action<int[]>>)(xs => { xs[0] += 1; })",
    "(Expression<Action<int[,]>>)(xs => { xs[0, 0] += 1; })",
    "(Expression<Action<List<int>>>)(xs => { xs[0] += 1; })",
    "(Expression<Action<StrongBox<int>>>)(b => { b.Value += 1; })",

    // Prefix unary assign
    "(Expression<Action<int>>)(x => { ++x; })",
    "(Expression<Action<int[]>>)(xs => { ++xs[0]; })",
    "(Expression<Action<int[,]>>)(xs => { ++xs[0, 0]; })",
    "(Expression<Action<List<int>>>)(xs => { ++xs[0]; })",
    "(Expression<Action<StrongBox<int>>>)(b => { ++b.Value; })",

    // Postfix unary assign
    "(Expression<Action<int>>)(x => { x++; })",
    "(Expression<Action<int[]>>)(xs => { xs[0]++; })",
    "(Expression<Action<int[,]>>)(xs => { xs[0, 0]++; })",
    "(Expression<Action<List<int>>>)(xs => { xs[0]++; })",
    "(Expression<Action<StrongBox<int>>>)(b => { b.Value++; })",

	// Lock
	"(Expression<Action<object>>)(l => { lock(l) { Console.WriteLine(\"In lock\"); } })",

    // Tuple equality
    "(Expression<Func<bool>>)(() => (1, 2) == (3, 4))",
    "(Expression<Func<bool>>)(() => (1, int.Parse(\"2\")) != (int.Parse(\"3\"), 4))",
    "(Expression<Func<(int, int), bool>>)(t => t == (3, 4))",
    "(Expression<Func<(int, int), bool>>)(t => (1, 2) != t)",
    "(Expression<Func<bool>>)(() => (1, (true, \"foo\")) == (3, (false, \"bar\")))",
    "(Expression<Func<bool>>)(() => (int.Parse(\"1\"), (true, \"foo\".ToUpper())) != (3, (\"qux\".StartsWith(\"z\"), \"bar\")))",
    "(Expression<Func<(bool, string), bool>>)(t => (1, t) == (3, (false, \"bar\")))",
    "(Expression<Func<(bool, string), bool>>)(t => (1, (true, \"foo\")) != (3, t))",
};
#>
<#
var includePerf = false;
var sw = Stopwatch.StartNew();
var all = new List<string>();
var toEscapedString = new Func<object, bool, string>((o, multiLine) => "@\"" + (multiLine ? "\r\n" : "") + o.ToString().Replace("\"", "\"\"") + "\"");
var md5 = System.Security.Cryptography.MD5.Create();
var getHash = new Func<string, string>(input =>
{
    var inputBytes = System.Text.Encoding.ASCII.GetBytes(input);
    var hash = md5.ComputeHash(inputBytes);
 
    var sb = new StringBuilder();
    for (var b = hash.Length - 2; b < hash.Length; b++)
    {
        sb.Append(hash[b].ToString("X2"));
    }

    return sb.ToString();
});

TestUtilities.InitializeDomain(this.Host.ResolveAssemblyReference(@"$(SolutionDir)\Tests.Microsoft.CodeAnalysis.CSharp.Helpers\bin\$(Configuration)"));
try
{
#>
// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests
    {
<#
var i = 0;
foreach (var expr in exprs)
{
    var before = sw.Elapsed;
    if (includePerf)
    {
#>
        // Elapsed = <#=before#>
<#
    }
    var dbgTest = default(string);
    var ignore = default(string);
    try
    {
        dbgTest = TestUtilities.ToCSharp(expr, reduce: true);
    }
    catch (InvalidProgramException ex)
    {
        dbgTest = "???";
        ignore = ex.Message;
    }
    catch (TargetInvocationException ex)
    {
        dbgTest = "???";
        ignore = ex.InnerException.Message;
    }

    var cost = sw.Elapsed - before;
    if (ignore != null)
    {
#>
        [Ignore]
<#
        foreach (var line in ignore.Split('\n'))
        {
#>
        // <#=line.TrimEnd('\r')#>
<#
        }
    }

    var exprHash = getHash(expr);
    var dbgTestHash = getHash(dbgTest);

    // NB: Including a hash of the outcome; it anything changes, compilation will fail in Verify.cs,
    //     forcing a human review of all tests again.
    var id = exprHash + "_" + dbgTestHash;
    all.Add(id);
#>
        [TestMethod]
        public void CompilerTest_<#=id#>()
        {
<#
    if (includePerf)
    {
#>
            // <PERF><#=cost.TotalMilliseconds#>ms</PERF>

<#
    }
#>
            // <#=expr#>
            var actual = ToCSharp(<#=toEscapedString(expr, false)#>, reduce: true);
            var expected = <#=toEscapedString(dbgTest, true)#>;
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_<#=id#>();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_<#=id#>() => INCONCLUSIVE(); }

<#
    i++;
}
#>
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests
    {
        partial class Reviewed
        {
<#
foreach (var test in all)
{
#>
            public override void CompilerTest_<#=test#>() => OK();
<#
}
#>
        }
    }
}
*/
}
<#
}
finally
{
TestUtilities.UnloadDomain();
}
#>