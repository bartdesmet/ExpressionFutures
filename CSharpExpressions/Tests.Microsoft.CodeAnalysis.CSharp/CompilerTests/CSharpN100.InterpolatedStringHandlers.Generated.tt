// Prototyping extended expression trees for C#.
//
// bartde - January 2022

<#
// NB: When ading a test, it will be *SKIPPED* by default. In order to enable it, review the generated
//     test code and go to the .Verify.cs file to add an entry acknowledging the manual inspection by
//     providing an outcome.

// NB: Editing and saving this file can take a *VERY LONG* time because it invokes the C# compiler at
//     text template processing time. Be patient while Visual Studio appears to hang.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#
var name = "CSharp100_InterpolatedStringHandlers";

var exprs = new[]
{
    // Basics
    "(Expression<Func<SimpleInterpolatedStringHandler>>)(() => $\"Hello\")",
    "(Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $\"x = {x}\")",
    "(Expression<Func<int, bool, SimpleInterpolatedStringHandler>>)((x, b) => $\"x = {x}, b = {b}\")",

    // Alignment and format
    "(Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $\"x = {x,5}\")",
    "(Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $\"x = {x:X}\")",
    "(Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $\"x = {x,5:X}\")",

    // Construction with `out bool` and Append methods returning bool.
    "(Expression<Func<int, SimpleInterpolatedStringHandlerCtorOutBool>>)(x => $\"x = {x}\")",
    "(Expression<Func<int, SimpleInterpolatedStringHandlerAppendReturnBool>>)(x => $\"x = {x}\")",
    "(Expression<Func<int, SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool>>)(x => $\"x = {x}\")",

    // Dynamic
    "(Expression<Func<dynamic, SimpleInterpolatedStringHandler>>)(x => $\"x = {x}\")",
    "(Expression<Func<dynamic, SimpleInterpolatedStringHandlerCtorOutBool>>)(x => $\"x = {x}\")",
    "(Expression<Func<dynamic, SimpleInterpolatedStringHandlerAppendReturnBool>>)(x => $\"x = {x}\")",
    "(Expression<Func<dynamic, SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool>>)(x => $\"x = {x}\")",

    // Binary string concat
    "(Expression<Func<int, bool, string, SimpleInterpolatedStringHandler>>)((x, y, z) => $\"x = {x}, \" + ($\"y = {y}, \" + $\"z = {z}\"))",
    "(Expression<Func<int, bool, string, SimpleInterpolatedStringHandler>>)((x, y, z) => ($\"x = {x}, \" + $\"y = {y}, \") + $\"z = {z}\")",

    // Argument indices
    "(Expression<Action<Logger, int>>)((logger, x) => logger.LogMessage(LogLevel.Error, $\"x = {x}\"))",
};
#>
<#@ include file="CompilerTests.t4" #>