// Prototyping extended expression trees for C#.
//
// bartde - January 2022

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    [TestClass]
    public partial class CompilerTests_CSharp100_InterpolatedStringHandlers
    {
        [TestMethod]
        public void CompilerTest_87DF_089A()
        {
            // (Expression<Func<SimpleInterpolatedStringHandler>>)(() => $"Hello")
            var actual = GetDebugView(@"(Expression<Func<SimpleInterpolatedStringHandler>>)(() => $""Hello"")");
            var expected = @"
<Lambda Type=""System.Func`1[SimpleInterpolatedStringHandler]"">
  <Parameters />
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandler"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandler"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""1"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""2"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""3"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""2"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""3"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>Hello</Value>
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_87DF_089A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_87DF_089A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7395_1C24()
        {
            // (Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $"x = {x}")
            var actual = GetDebugView(@"(Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $""x = {x}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,SimpleInterpolatedStringHandler]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandler"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandler"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[Int32](Int32)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7395_1C24();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7395_1C24() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7B35_4D2E()
        {
            // (Expression<Func<int, bool, SimpleInterpolatedStringHandler>>)((x, b) => $"x = {x}, b = {b}")
            var actual = GetDebugView(@"(Expression<Func<int, bool, SimpleInterpolatedStringHandler>>)((x, b) => $""x = {x}, b = {b}"")");
            var expected = @"
<Lambda Type=""System.Func`3[System.Int32,System.Boolean,SimpleInterpolatedStringHandler]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Boolean"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandler"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandler"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""3"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""3"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""7"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[Int32](Int32)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""7"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""8"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""9"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""8"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""9"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.Boolean]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""10"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Boolean"" Id=""11"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[Boolean](Boolean)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""10"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Boolean"" Id=""11"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Value>, b = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Boolean"" Id=""1"" Name=""b"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7B35_4D2E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7B35_4D2E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_856E_8640()
        {
            // (Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $"x = {x,5}")
            var actual = GetDebugView(@"(Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $""x = {x,5}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,SimpleInterpolatedStringHandler]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandler"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandler"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormattedAlignment`2[SimpleInterpolatedStringHandler,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
                <Parameter Type=""System.Int32"" Id=""7"" Name=""alignment"" />
              </Parameters>
              <Body>
                <CSharpCall Type=""System.Void"" Method=""Void AppendFormatted[Int32](Int32, Int32)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <ParameterAssignment Parameter=""Int32 t"">
                      <Expression>
                        <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
                      </Expression>
                    </ParameterAssignment>
                    <ParameterAssignment Parameter=""Int32 alignment"">
                      <Expression>
                        <Parameter Type=""System.Int32"" Id=""7"" Name=""alignment"" />
                      </Expression>
                    </ParameterAssignment>
                  </Arguments>
                </CSharpCall>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral Alignment=""5"">
              <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_856E_8640();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_856E_8640() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3CDF_C020()
        {
            // (Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $"x = {x:X}")
            var actual = GetDebugView(@"(Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $""x = {x:X}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,SimpleInterpolatedStringHandler]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandler"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandler"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormattedFormat`2[SimpleInterpolatedStringHandler,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
                <Parameter Type=""System.String"" Id=""7"" Name=""format"" />
              </Parameters>
              <Body>
                <CSharpCall Type=""System.Void"" Method=""Void AppendFormatted[Int32](Int32, System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <ParameterAssignment Parameter=""Int32 t"">
                      <Expression>
                        <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
                      </Expression>
                    </ParameterAssignment>
                    <ParameterAssignment Parameter=""System.String format"">
                      <Expression>
                        <Parameter Type=""System.String"" Id=""7"" Name=""format"" />
                      </Expression>
                    </ParameterAssignment>
                  </Arguments>
                </CSharpCall>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral Format=""X"">
              <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3CDF_C020();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3CDF_C020() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A49F_41E1()
        {
            // (Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $"x = {x,5:X}")
            var actual = GetDebugView(@"(Expression<Func<int, SimpleInterpolatedStringHandler>>)(x => $""x = {x,5:X}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,SimpleInterpolatedStringHandler]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandler"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandler"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormattedAlignmentFormat`2[SimpleInterpolatedStringHandler,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
                <Parameter Type=""System.Int32"" Id=""7"" Name=""alignment"" />
                <Parameter Type=""System.String"" Id=""8"" Name=""format"" />
              </Parameters>
              <Body>
                <CSharpCall Type=""System.Void"" Method=""Void AppendFormatted[Int32](Int32, Int32, System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <ParameterAssignment Parameter=""Int32 t"">
                      <Expression>
                        <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
                      </Expression>
                    </ParameterAssignment>
                    <ParameterAssignment Parameter=""Int32 alignment"">
                      <Expression>
                        <Parameter Type=""System.Int32"" Id=""7"" Name=""alignment"" />
                      </Expression>
                    </ParameterAssignment>
                    <ParameterAssignment Parameter=""System.String format"">
                      <Expression>
                        <Parameter Type=""System.String"" Id=""8"" Name=""format"" />
                      </Expression>
                    </ParameterAssignment>
                  </Arguments>
                </CSharpCall>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral Format=""X"" Alignment=""5"">
              <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A49F_41E1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A49F_41E1() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C2F4_B3FA()
        {
            // (Expression<Func<int, SimpleInterpolatedStringHandlerCtorOutBool>>)(x => $"x = {x}")
            var actual = GetDebugView(@"(Expression<Func<int, SimpleInterpolatedStringHandlerCtorOutBool>>)(x => $""x = {x}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,SimpleInterpolatedStringHandlerCtorOutBool]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandlerCtorOutBool"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandlerCtorOutBool"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandlerWithShouldAppend`1[SimpleInterpolatedStringHandlerCtorOutBool]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                <Parameter Type=""System.Boolean"" Id=""3"" Name=""appendShouldProceed"" IsByRef=""true"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Constructor=""Void .ctor(Int32, Int32, Boolean ByRef)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                    <Parameter Type=""System.Boolean"" Id=""3"" Name=""appendShouldProceed"" IsByRef=""true"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandlerCtorOutBool]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandlerCtorOutBool,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""7"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[Int32](Int32)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""7"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C2F4_B3FA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C2F4_B3FA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D484_7A71()
        {
            // (Expression<Func<int, SimpleInterpolatedStringHandlerAppendReturnBool>>)(x => $"x = {x}")
            var actual = GetDebugView(@"(Expression<Func<int, SimpleInterpolatedStringHandlerAppendReturnBool>>)(x => $""x = {x}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,SimpleInterpolatedStringHandlerAppendReturnBool]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandlerAppendReturnBool"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandlerAppendReturnBool"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandlerAppendReturnBool]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.TryAppendLiteral`1[SimpleInterpolatedStringHandlerAppendReturnBool]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Boolean"" Method=""Boolean AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.TryAppendFormatted`2[SimpleInterpolatedStringHandlerAppendReturnBool,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Boolean"" Method=""Boolean AppendFormatted[Int32](Int32)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""6"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D484_7A71();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D484_7A71() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A221_B2CB()
        {
            // (Expression<Func<int, SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool>>)(x => $"x = {x}")
            var actual = GetDebugView(@"(Expression<Func<int, SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool>>)(x => $""x = {x}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandlerWithShouldAppend`1[SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                <Parameter Type=""System.Boolean"" Id=""3"" Name=""appendShouldProceed"" IsByRef=""true"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Constructor=""Void .ctor(Int32, Int32, Boolean ByRef)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                    <Parameter Type=""System.Boolean"" Id=""3"" Name=""appendShouldProceed"" IsByRef=""true"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.TryAppendLiteral`1[SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Boolean"" Method=""Boolean AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.TryAppendFormatted`2[SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""7"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Boolean"" Method=""Boolean AppendFormatted[Int32](Int32)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""7"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A221_B2CB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A221_B2CB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A227_1CB0()
        {
            // (Expression<Func<dynamic, SimpleInterpolatedStringHandler>>)(x => $"x = {x}")
            var actual = GetDebugView(@"(Expression<Func<dynamic, SimpleInterpolatedStringHandler>>)(x => $""x = {x}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,SimpleInterpolatedStringHandler]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandler"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandler"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.Object]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Object"" Id=""6"" Name=""value"" />
              </Parameters>
              <Body>
                <CSharpDynamicInvokeMember Type=""System.Object"" Name=""AppendFormatted"" Flags=""ResultDiscarded"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <DynamicCSharpArgument>
                      <Expression>
                        <Parameter Type=""System.Object"" Id=""6"" Name=""value"" />
                      </Expression>
                    </DynamicCSharpArgument>
                  </Arguments>
                </CSharpDynamicInvokeMember>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A227_1CB0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A227_1CB0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B033_4813()
        {
            // (Expression<Func<dynamic, SimpleInterpolatedStringHandlerCtorOutBool>>)(x => $"x = {x}")
            var actual = GetDebugView(@"(Expression<Func<dynamic, SimpleInterpolatedStringHandlerCtorOutBool>>)(x => $""x = {x}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,SimpleInterpolatedStringHandlerCtorOutBool]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandlerCtorOutBool"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandlerCtorOutBool"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandlerWithShouldAppend`1[SimpleInterpolatedStringHandlerCtorOutBool]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                <Parameter Type=""System.Boolean"" Id=""3"" Name=""appendShouldProceed"" IsByRef=""true"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Constructor=""Void .ctor(Int32, Int32, Boolean ByRef)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                    <Parameter Type=""System.Boolean"" Id=""3"" Name=""appendShouldProceed"" IsByRef=""true"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandlerCtorOutBool]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandlerCtorOutBool,System.Object]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Object"" Id=""7"" Name=""value"" />
              </Parameters>
              <Body>
                <CSharpDynamicInvokeMember Type=""System.Object"" Name=""AppendFormatted"" Flags=""ResultDiscarded"" Context=""Expressions"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBool"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <DynamicCSharpArgument>
                      <Expression>
                        <Parameter Type=""System.Object"" Id=""7"" Name=""value"" />
                      </Expression>
                    </DynamicCSharpArgument>
                  </Arguments>
                </CSharpDynamicInvokeMember>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B033_4813();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B033_4813() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1D5D_1392()
        {
            // (Expression<Func<dynamic, SimpleInterpolatedStringHandlerAppendReturnBool>>)(x => $"x = {x}")
            var actual = GetDebugView(@"(Expression<Func<dynamic, SimpleInterpolatedStringHandlerAppendReturnBool>>)(x => $""x = {x}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,SimpleInterpolatedStringHandlerAppendReturnBool]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandlerAppendReturnBool"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandlerAppendReturnBool"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandlerAppendReturnBool]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.TryAppendLiteral`1[SimpleInterpolatedStringHandlerAppendReturnBool]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Boolean"" Method=""Boolean AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Id=""3"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""4"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.TryAppendFormatted`2[SimpleInterpolatedStringHandlerAppendReturnBool,System.Object]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Object"" Id=""6"" Name=""value"" />
              </Parameters>
              <Body>
                <CSharpDynamicConvert Type=""System.Boolean"" Context=""Expressions"">
                  <Expression>
                    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""AppendFormatted"" Context=""Expressions"">
                      <Object>
                        <Parameter Type=""SimpleInterpolatedStringHandlerAppendReturnBool"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                      </Object>
                      <Arguments>
                        <DynamicCSharpArgument>
                          <Expression>
                            <Parameter Type=""System.Object"" Id=""6"" Name=""value"" />
                          </Expression>
                        </DynamicCSharpArgument>
                      </Arguments>
                    </CSharpDynamicInvokeMember>
                  </Expression>
                </CSharpDynamicConvert>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1D5D_1392();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1D5D_1392() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A6E0_98ED()
        {
            // (Expression<Func<dynamic, SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool>>)(x => $"x = {x}")
            var actual = GetDebugView(@"(Expression<Func<dynamic, SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool>>)(x => $""x = {x}"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandlerWithShouldAppend`1[SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                <Parameter Type=""System.Boolean"" Id=""3"" Name=""appendShouldProceed"" IsByRef=""true"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Constructor=""Void .ctor(Int32, Int32, Boolean ByRef)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""1"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""2"" Name=""formattedCount"" />
                    <Parameter Type=""System.Boolean"" Id=""3"" Name=""appendShouldProceed"" IsByRef=""true"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.TryAppendLiteral`1[SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Boolean"" Method=""Boolean AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Id=""4"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""5"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.TryAppendFormatted`2[SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool,System.Object]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Object"" Id=""7"" Name=""value"" />
              </Parameters>
              <Body>
                <CSharpDynamicConvert Type=""System.Boolean"" Context=""Expressions"">
                  <Expression>
                    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""AppendFormatted"" Context=""Expressions"">
                      <Object>
                        <Parameter Type=""SimpleInterpolatedStringHandlerCtorOutBoolAppendReturnBool"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                      </Object>
                      <Arguments>
                        <DynamicCSharpArgument>
                          <Expression>
                            <Parameter Type=""System.Object"" Id=""7"" Name=""value"" />
                          </Expression>
                        </DynamicCSharpArgument>
                      </Arguments>
                    </CSharpDynamicInvokeMember>
                  </Expression>
                </CSharpDynamicConvert>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <CSharpInterpolatedString Type=""System.String"">
          <Interpolations>
            <InterpolationStringLiteral>
              <Value>x = </Value>
            </InterpolationStringLiteral>
            <InterpolationStringLiteral>
              <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
            </InterpolationStringLiteral>
          </Interpolations>
        </CSharpInterpolatedString>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A6E0_98ED();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A6E0_98ED() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_56C2_F36B()
        {
            // (Expression<Func<int, bool, string, SimpleInterpolatedStringHandler>>)((x, y, z) => $"x = {x}, " + ($"y = {y}, " + $"z = {z}"))
            var actual = GetDebugView(@"(Expression<Func<int, bool, string, SimpleInterpolatedStringHandler>>)((x, y, z) => $""x = {x}, "" + ($""y = {y}, "" + $""z = {z}""))");
            var expected = @"
<Lambda Type=""System.Func`4[System.Int32,System.Boolean,System.String,SimpleInterpolatedStringHandler]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Boolean"" Id=""1"" Name=""y"" />
    <Parameter Type=""System.String"" Id=""2"" Name=""z"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandler"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandler"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""4"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""3"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""4"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""6"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""6"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""7"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""8"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[Int32](Int32)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""7"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""8"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""9"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""10"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""9"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""10"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""11"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""12"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""11"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""12"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.Boolean]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""13"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Boolean"" Id=""14"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[Boolean](Boolean)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""13"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Boolean"" Id=""14"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""15"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""16"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""15"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""16"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""17"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""18"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""17"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""18"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.String]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""19"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""20"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[String](System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""19"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""20"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <Add Type=""System.String"" Method=""System.String Concat(System.String, System.String)"">
          <Left>
            <CSharpInterpolatedString Type=""System.String"">
              <Interpolations>
                <InterpolationStringLiteral>
                  <Value>x = </Value>
                </InterpolationStringLiteral>
                <InterpolationStringLiteral>
                  <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
                </InterpolationStringLiteral>
                <InterpolationStringLiteral>
                  <Value>, </Value>
                </InterpolationStringLiteral>
              </Interpolations>
            </CSharpInterpolatedString>
          </Left>
          <Right>
            <Add Type=""System.String"" Method=""System.String Concat(System.String, System.String)"">
              <Left>
                <CSharpInterpolatedString Type=""System.String"">
                  <Interpolations>
                    <InterpolationStringLiteral>
                      <Value>y = </Value>
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Boolean"" Id=""1"" Name=""y"" />
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Value>, </Value>
                    </InterpolationStringLiteral>
                  </Interpolations>
                </CSharpInterpolatedString>
              </Left>
              <Right>
                <CSharpInterpolatedString Type=""System.String"">
                  <Interpolations>
                    <InterpolationStringLiteral>
                      <Value>z = </Value>
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.String"" Id=""2"" Name=""z"" />
                    </InterpolationStringLiteral>
                  </Interpolations>
                </CSharpInterpolatedString>
              </Right>
            </Add>
          </Right>
        </Add>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_56C2_F36B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_56C2_F36B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3809_1F73()
        {
            // (Expression<Func<int, bool, string, SimpleInterpolatedStringHandler>>)((x, y, z) => ($"x = {x}, " + $"y = {y}, ") + $"z = {z}")
            var actual = GetDebugView(@"(Expression<Func<int, bool, string, SimpleInterpolatedStringHandler>>)((x, y, z) => ($""x = {x}, "" + $""y = {y}, "") + $""z = {z}"")");
            var expected = @"
<Lambda Type=""System.Func`4[System.Int32,System.Boolean,System.String,SimpleInterpolatedStringHandler]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Boolean"" Id=""1"" Name=""y"" />
    <Parameter Type=""System.String"" Id=""2"" Name=""z"" />
  </Parameters>
  <Body>
    <CSharpInterpolatedStringHandlerConversion Type=""SimpleInterpolatedStringHandler"">
      <Info>
        <InterpolatedStringHandlerInfo Type=""SimpleInterpolatedStringHandler"">
          <Construction>
            <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""literalLength"" />
                <Parameter Type=""System.Int32"" Id=""4"" Name=""formattedCount"" />
              </Parameters>
              <Body>
                <New Type=""SimpleInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""3"" Name=""literalLength"" />
                    <Parameter Type=""System.Int32"" Id=""4"" Name=""formattedCount"" />
                  </Arguments>
                </New>
              </Body>
            </Lambda>
          </Construction>
          <Append>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""6"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""5"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""6"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.Int32]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""7"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Int32"" Id=""8"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[Int32](Int32)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""7"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""8"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""9"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""10"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""9"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""10"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""11"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""12"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""11"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""12"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.Boolean]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""13"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.Boolean"" Id=""14"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[Boolean](Boolean)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""13"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.Boolean"" Id=""14"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""15"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""16"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""15"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""16"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[SimpleInterpolatedStringHandler]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""17"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""18"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""17"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""18"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
            <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[SimpleInterpolatedStringHandler,System.String]"">
              <Parameters>
                <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""19"" Name=""handler"" IsByRef=""true"" />
                <Parameter Type=""System.String"" Id=""20"" Name=""value"" />
              </Parameters>
              <Body>
                <Call Type=""System.Void"" Method=""Void AppendFormatted[String](System.String)"">
                  <Object>
                    <Parameter Type=""SimpleInterpolatedStringHandler"" Id=""19"" Name=""handler"" IsByRef=""true"" />
                  </Object>
                  <Arguments>
                    <Parameter Type=""System.String"" Id=""20"" Name=""value"" />
                  </Arguments>
                </Call>
              </Body>
            </Lambda>
          </Append>
        </InterpolatedStringHandlerInfo>
      </Info>
      <Operand>
        <Add Type=""System.String"" Method=""System.String Concat(System.String, System.String)"">
          <Left>
            <Add Type=""System.String"" Method=""System.String Concat(System.String, System.String)"">
              <Left>
                <CSharpInterpolatedString Type=""System.String"">
                  <Interpolations>
                    <InterpolationStringLiteral>
                      <Value>x = </Value>
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Value>, </Value>
                    </InterpolationStringLiteral>
                  </Interpolations>
                </CSharpInterpolatedString>
              </Left>
              <Right>
                <CSharpInterpolatedString Type=""System.String"">
                  <Interpolations>
                    <InterpolationStringLiteral>
                      <Value>y = </Value>
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Boolean"" Id=""1"" Name=""y"" />
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Value>, </Value>
                    </InterpolationStringLiteral>
                  </Interpolations>
                </CSharpInterpolatedString>
              </Right>
            </Add>
          </Left>
          <Right>
            <CSharpInterpolatedString Type=""System.String"">
              <Interpolations>
                <InterpolationStringLiteral>
                  <Value>z = </Value>
                </InterpolationStringLiteral>
                <InterpolationStringLiteral>
                  <Parameter Type=""System.String"" Id=""2"" Name=""z"" />
                </InterpolationStringLiteral>
              </Interpolations>
            </CSharpInterpolatedString>
          </Right>
        </Add>
      </Operand>
    </CSharpInterpolatedStringHandlerConversion>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3809_1F73();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3809_1F73() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1FF7_87E2()
        {
            // (Expression<Action<Logger, int>>)((logger, x) => logger.LogMessage(LogLevel.Error, $"x = {x}"))
            var actual = GetDebugView(@"(Expression<Action<Logger, int>>)((logger, x) => logger.LogMessage(LogLevel.Error, $""x = {x}""))");
            var expected = @"
<Lambda Type=""System.Action`2[Logger,System.Int32]"">
  <Parameters>
    <Parameter Type=""Logger"" Id=""0"" Name=""logger"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.Void"" Method=""Void LogMessage(LogLevel, LogInterpolatedStringHandler)"">
      <Object>
        <Parameter Type=""Logger"" Id=""0"" Name=""logger"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""LogLevel level"">
          <Expression>
            <Constant Type=""LogLevel"" Value=""Error"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""LogInterpolatedStringHandler builder"">
          <Expression>
            <CSharpInterpolatedStringHandlerConversion Type=""LogInterpolatedStringHandler"">
              <Info>
                <InterpolatedStringHandlerInfo Type=""LogInterpolatedStringHandler"">
                  <Construction>
                    <Lambda Type=""System.Runtime.CompilerServices.ConstructInterpolatedStringHandler`3[LogInterpolatedStringHandler,Logger,LogLevel]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""2"" Name=""literalLength"" />
                        <Parameter Type=""System.Int32"" Id=""3"" Name=""formattedCount"" />
                        <Parameter Type=""Logger"" Id=""4"" Name=""this"" />
                        <Parameter Type=""LogLevel"" Id=""5"" Name=""arg0"" />
                      </Parameters>
                      <Body>
                        <New Type=""LogInterpolatedStringHandler"" Constructor=""Void .ctor(Int32, Int32, Logger, LogLevel)"">
                          <Arguments>
                            <Parameter Type=""System.Int32"" Id=""2"" Name=""literalLength"" />
                            <Parameter Type=""System.Int32"" Id=""3"" Name=""formattedCount"" />
                            <Parameter Type=""Logger"" Id=""4"" Name=""this"" />
                            <Parameter Type=""LogLevel"" Id=""5"" Name=""arg0"" />
                          </Arguments>
                        </New>
                      </Body>
                    </Lambda>
                  </Construction>
                  <ArgumentIndices>
                    <Index Value=""-1"" />
                    <Index Value=""0"" />
                  </ArgumentIndices>
                  <Append>
                    <Lambda Type=""System.Runtime.CompilerServices.AppendLiteral`1[LogInterpolatedStringHandler]"">
                      <Parameters>
                        <Parameter Type=""LogInterpolatedStringHandler"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                        <Parameter Type=""System.String"" Id=""7"" Name=""value"" />
                      </Parameters>
                      <Body>
                        <Call Type=""System.Void"" Method=""Void AppendLiteral(System.String)"">
                          <Object>
                            <Parameter Type=""LogInterpolatedStringHandler"" Id=""6"" Name=""handler"" IsByRef=""true"" />
                          </Object>
                          <Arguments>
                            <Parameter Type=""System.String"" Id=""7"" Name=""value"" />
                          </Arguments>
                        </Call>
                      </Body>
                    </Lambda>
                    <Lambda Type=""System.Runtime.CompilerServices.AppendFormatted`2[LogInterpolatedStringHandler,System.Int32]"">
                      <Parameters>
                        <Parameter Type=""LogInterpolatedStringHandler"" Id=""8"" Name=""handler"" IsByRef=""true"" />
                        <Parameter Type=""System.Int32"" Id=""9"" Name=""value"" />
                      </Parameters>
                      <Body>
                        <Call Type=""System.Void"" Method=""Void AppendFormatted[Int32](Int32)"">
                          <Object>
                            <Parameter Type=""LogInterpolatedStringHandler"" Id=""8"" Name=""handler"" IsByRef=""true"" />
                          </Object>
                          <Arguments>
                            <Parameter Type=""System.Int32"" Id=""9"" Name=""value"" />
                          </Arguments>
                        </Call>
                      </Body>
                    </Lambda>
                  </Append>
                </InterpolatedStringHandlerInfo>
              </Info>
              <Operand>
                <CSharpInterpolatedString Type=""System.String"">
                  <Interpolations>
                    <InterpolationStringLiteral>
                      <Value>x = </Value>
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                    </InterpolationStringLiteral>
                  </Interpolations>
                </CSharpInterpolatedString>
              </Operand>
            </CSharpInterpolatedStringHandlerConversion>
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1FF7_87E2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1FF7_87E2() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { Assert.Inconclusive(); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp100_InterpolatedStringHandlers
    {
        partial class Reviewed
        {
            public override void CompilerTest_87DF_089A() => OK();
            public override void CompilerTest_7395_1C24() => OK();
            public override void CompilerTest_7B35_4D2E() => OK();
            public override void CompilerTest_856E_8640() => OK();
            public override void CompilerTest_3CDF_C020() => OK();
            public override void CompilerTest_A49F_41E1() => OK();
            public override void CompilerTest_C2F4_B3FA() => OK();
            public override void CompilerTest_D484_7A71() => OK();
            public override void CompilerTest_A221_B2CB() => OK();
            public override void CompilerTest_A227_1CB0() => OK();
            public override void CompilerTest_B033_4813() => OK();
            public override void CompilerTest_1D5D_1392() => OK();
            public override void CompilerTest_A6E0_98ED() => OK();
            public override void CompilerTest_56C2_F36B() => OK();
            public override void CompilerTest_3809_1F73() => OK();
            public override void CompilerTest_1FF7_87E2() => OK();
        }
    }
}
*/
}
