// Prototyping extended expression trees for C#.
//
// bartde - December 2021

<#
// NB: When ading a test, it will be *SKIPPED* by default. In order to enable it, review the generated
//     test code and go to the .Verify.cs file to add an entry acknowledging the manual inspection by
//     providing an outcome.

// NB: Editing and saving this file can take a *VERY LONG* time because it invokes the C# compiler at
//     text template processing time. Be patient while Visual Studio appears to hang.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#
var name = "CSharp80_PatternMatching";

var exprs = new[]
{
    // Positional - Tuple
    "(Expression<Func<(int, string), bool>>)(o => o is (1, \"bar\"))",
    "(Expression<Func<(int x, string s), bool>>)(o => o is (x: 1, s: \"bar\"))",

    // Positional - Deconstruct (instance method)
    "(Expression<Func<Point, bool>>)(o => o is (1, 2))",
    "(Expression<Func<Point, bool>>)(o => o is (x: 1, y: 2))",

    // Positional - Deconstruct (extension method)
    "(Expression<Func<Point2D, bool>>)(o => o is (1, 2))",
    "(Expression<Func<Point2D, bool>>)(o => o is (x: 1, y: 2))",

    // Positional - ITuple
    "(Expression<Func<object, bool>>)(o => o is (1, \"bar\"))",

    // Property
    "(Expression<Func<object, bool>>)(o => o is Point { X: 0 })",
    "(Expression<Func<object, bool>>)(o => o is Point { X: 0, Y: 1 })",
    "(Expression<Func<object, bool>>)(o => o is Point { Y: 1, X: 1 })",
};
#>
<#@ include file="CompilerTests.t4" #>