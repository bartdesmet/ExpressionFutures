// Prototyping extended expression trees for C#.
//
// bartde - December 2021

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Xunit;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    public partial class CompilerTests_CSharp110_PatternMatching
    {
        [Fact]
        public void CompilerTest_62B2_B138()
        {
            // (Expression<Func<int[], bool>>)(xs => xs is [])
            var actual = GetDebugView(@"(Expression<Func<int[], bool>>)(xs => xs is [])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32[],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpArrayAccess Type=""System.Int32"">
                  <Array>
                    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                  </Array>
                  <Indexes>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Indexes>
                </CSharpArrayAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns />
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_62B2_B138();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_62B2_B138() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_5F9A_3106()
        {
            // (Expression<Func<int[], bool>>)(xs => xs is [1])
            var actual = GetDebugView(@"(Expression<Func<int[], bool>>)(xs => xs is [1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32[],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpArrayAccess Type=""System.Int32"">
                  <Array>
                    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                  </Array>
                  <Indexes>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Indexes>
                </CSharpArrayAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5F9A_3106();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5F9A_3106() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_78B5_4AC6()
        {
            // (Expression<Func<int[], bool>>)(xs => xs is [1, 2])
            var actual = GetDebugView(@"(Expression<Func<int[], bool>>)(xs => xs is [1, 2])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32[],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpArrayAccess Type=""System.Int32"">
                  <Array>
                    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                  </Array>
                  <Indexes>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Indexes>
                </CSharpArrayAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""2"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_78B5_4AC6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_78B5_4AC6() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_D6FE_2688()
        {
            // (Expression<Func<int[], bool>>)(xs => xs is [1, _, 3])
            var actual = GetDebugView(@"(Expression<Func<int[], bool>>)(xs => xs is [1, _, 3])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32[],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpArrayAccess Type=""System.Int32"">
                  <Array>
                    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                  </Array>
                  <Indexes>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Indexes>
                </CSharpArrayAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
            <DiscardPattern InputType=""System.Int32"" NarrowedType=""System.Int32"" />
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""3"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D6FE_2688();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D6FE_2688() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_5C89_352D()
        {
            // (Expression<Func<string, bool>>)(s => s is [])
            var actual = GetDebugView(@"(Expression<Func<string, bool>>)(s => s is [])");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.String"" NarrowedType=""System.String"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.String,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.String,System.Index,System.Char]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Char"" LengthOrCount=""Int32 Length"" IndexOrSlice=""Char Chars [Int32]"">
                  <Object>
                    <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns />
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5C89_352D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5C89_352D() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_3064_1ACC()
        {
            // (Expression<Func<string, bool>>)(s => s is ['a'])
            var actual = GetDebugView(@"(Expression<Func<string, bool>>)(s => s is ['a'])");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.String"" NarrowedType=""System.String"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.String,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.String,System.Index,System.Char]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Char"" LengthOrCount=""Int32 Length"" IndexOrSlice=""Char Chars [Int32]"">
                  <Object>
                    <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Char"" NarrowedType=""System.Char"">
              <Constant Type=""System.Char"" Value=""a"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3064_1ACC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3064_1ACC() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_57A5_FF9E()
        {
            // (Expression<Func<string, bool>>)(s => s is ['a', >= '0' and <= '9'])
            var actual = GetDebugView(@"(Expression<Func<string, bool>>)(s => s is ['a', >= '0' and <= '9'])");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.String"" NarrowedType=""System.String"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.String,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.String,System.Index,System.Char]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Char"" LengthOrCount=""Int32 Length"" IndexOrSlice=""Char Chars [Int32]"">
                  <Object>
                    <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Char"" NarrowedType=""System.Char"">
              <Constant Type=""System.Char"" Value=""a"" />
            </ConstantPattern>
            <AndPattern InputType=""System.Char"" NarrowedType=""System.Char"">
              <Left>
                <GreaterThanOrEqualPattern InputType=""System.Char"" NarrowedType=""System.Char"">
                  <Constant Type=""System.Char"" Value=""0"" />
                </GreaterThanOrEqualPattern>
              </Left>
              <Right>
                <LessThanOrEqualPattern InputType=""System.Char"" NarrowedType=""System.Char"">
                  <Constant Type=""System.Char"" Value=""9"" />
                </LessThanOrEqualPattern>
              </Right>
            </AndPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_57A5_FF9E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_57A5_FF9E() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_A02D_6A56()
        {
            // (Expression<Func<List<int>, bool>>)(xs => xs is [])
            var actual = GetDebugView(@"(Expression<Func<List<int>, bool>>)(xs => xs is [])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Count"">
                  <Expression>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.Int32],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Int32"" LengthOrCount=""Int32 Count"" IndexOrSlice=""Int32 Item [Int32]"">
                  <Object>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns />
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A02D_6A56();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A02D_6A56() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_ED9D_BF0C()
        {
            // (Expression<Func<List<int>, bool>>)(xs => xs is [1])
            var actual = GetDebugView(@"(Expression<Func<List<int>, bool>>)(xs => xs is [1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Count"">
                  <Expression>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.Int32],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Int32"" LengthOrCount=""Int32 Count"" IndexOrSlice=""Int32 Item [Int32]"">
                  <Object>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_ED9D_BF0C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_ED9D_BF0C() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_FB44_8752()
        {
            // (Expression<Func<List<int>, bool>>)(xs => xs is [1, 2])
            var actual = GetDebugView(@"(Expression<Func<List<int>, bool>>)(xs => xs is [1, 2])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Count"">
                  <Expression>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.Int32],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Int32"" LengthOrCount=""Int32 Count"" IndexOrSlice=""Int32 Item [Int32]"">
                  <Object>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""2"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FB44_8752();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FB44_8752() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_3A56_04D4()
        {
            // (Expression<Func<List<int>, bool>>)(xs => xs is [1, _, 3])
            var actual = GetDebugView(@"(Expression<Func<List<int>, bool>>)(xs => xs is [1, _, 3])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Count"">
                  <Expression>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.Int32],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Int32"" LengthOrCount=""Int32 Count"" IndexOrSlice=""Int32 Item [Int32]"">
                  <Object>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
            <DiscardPattern InputType=""System.Int32"" NarrowedType=""System.Int32"" />
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""3"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3A56_04D4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3A56_04D4() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_ADF5_FF71()
        {
            // (Expression<Func<int[], bool>>)(xs => xs is [..])
            var actual = GetDebugView(@"(Expression<Func<int[], bool>>)(xs => xs is [..])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32[],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpArrayAccess Type=""System.Int32"">
                  <Array>
                    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                  </Array>
                  <Indexes>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Indexes>
                </CSharpArrayAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <SlicePattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"" />
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_ADF5_FF71();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_ADF5_FF71() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_30F8_A1FF()
        {
            // (Expression<Func<int[], bool>>)(xs => xs is [1, ..])
            var actual = GetDebugView(@"(Expression<Func<int[], bool>>)(xs => xs is [1, ..])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32[],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpArrayAccess Type=""System.Int32"">
                  <Array>
                    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                  </Array>
                  <Indexes>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Indexes>
                </CSharpArrayAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
            <SlicePattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"" />
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_30F8_A1FF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_30F8_A1FF() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_DE25_4566()
        {
            // (Expression<Func<int[], bool>>)(xs => xs is [.., 2])
            var actual = GetDebugView(@"(Expression<Func<int[], bool>>)(xs => xs is [.., 2])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32[],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpArrayAccess Type=""System.Int32"">
                  <Array>
                    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                  </Array>
                  <Indexes>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Indexes>
                </CSharpArrayAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <SlicePattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"" />
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""2"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DE25_4566();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DE25_4566() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_4E09_514D()
        {
            // (Expression<Func<int[], bool>>)(xs => xs is [1, .., 2])
            var actual = GetDebugView(@"(Expression<Func<int[], bool>>)(xs => xs is [1, .., 2])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32[],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpArrayAccess Type=""System.Int32"">
                  <Array>
                    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                  </Array>
                  <Indexes>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Indexes>
                </CSharpArrayAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
            <SlicePattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"" />
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""2"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4E09_514D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4E09_514D() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_A52D_B4CD()
        {
            // (Expression<Func<int[], bool>>)(xs => xs is [1, .. [3, .., 4], 2])
            var actual = GetDebugView(@"(Expression<Func<int[], bool>>)(xs => xs is [1, .. [3, .., 4], 2])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32[],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.Int32[]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpArrayAccess Type=""System.Int32"">
                  <Array>
                    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""o"" />
                  </Array>
                  <Indexes>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Indexes>
                </CSharpArrayAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
            <SlicePattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
              <IndexerAccess>
                <Lambda Type=""System.Func`3[System.Int32[],System.Range,System.Int32[]]"">
                  <Parameters>
                    <Parameter Type=""System.Int32[]"" Id=""4"" Name=""o"" />
                    <Parameter Type=""System.Range"" Id=""5"" Name=""i"" />
                  </Parameters>
                  <Body>
                    <CSharpArrayAccess Type=""System.Int32[]"">
                      <Array>
                        <Parameter Type=""System.Int32[]"" Id=""4"" Name=""o"" />
                      </Array>
                      <Indexes>
                        <Parameter Type=""System.Range"" Id=""5"" Name=""i"" />
                      </Indexes>
                    </CSharpArrayAccess>
                  </Body>
                </Lambda>
              </IndexerAccess>
              <Pattern>
                <ListPattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"">
                  <LengthAccess>
                    <Lambda Type=""System.Func`2[System.Int32[],System.Int32]"">
                      <Parameters>
                        <Parameter Type=""System.Int32[]"" Id=""6"" Name=""o"" />
                      </Parameters>
                      <Body>
                        <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                          <Expression>
                            <Parameter Type=""System.Int32[]"" Id=""6"" Name=""o"" />
                          </Expression>
                        </MemberAccess>
                      </Body>
                    </Lambda>
                  </LengthAccess>
                  <IndexerAccess>
                    <Lambda Type=""System.Func`3[System.Int32[],System.Index,System.Int32]"">
                      <Parameters>
                        <Parameter Type=""System.Int32[]"" Id=""7"" Name=""o"" />
                        <Parameter Type=""System.Index"" Id=""8"" Name=""i"" />
                      </Parameters>
                      <Body>
                        <CSharpArrayAccess Type=""System.Int32"">
                          <Array>
                            <Parameter Type=""System.Int32[]"" Id=""7"" Name=""o"" />
                          </Array>
                          <Indexes>
                            <Parameter Type=""System.Index"" Id=""8"" Name=""i"" />
                          </Indexes>
                        </CSharpArrayAccess>
                      </Body>
                    </Lambda>
                  </IndexerAccess>
                  <Patterns>
                    <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
                      <Constant Type=""System.Int32"" Value=""3"" />
                    </ConstantPattern>
                    <SlicePattern InputType=""System.Int32[]"" NarrowedType=""System.Int32[]"" />
                    <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
                      <Constant Type=""System.Int32"" Value=""4"" />
                    </ConstantPattern>
                  </Patterns>
                </ListPattern>
              </Pattern>
            </SlicePattern>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""2"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A52D_B4CD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A52D_B4CD() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_D697_D368()
        {
            // (Expression<Func<string, bool>>)(s => s is [..])
            var actual = GetDebugView(@"(Expression<Func<string, bool>>)(s => s is [..])");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.String"" NarrowedType=""System.String"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.String,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.String,System.Index,System.Char]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Char"" LengthOrCount=""Int32 Length"" IndexOrSlice=""Char Chars [Int32]"">
                  <Object>
                    <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <SlicePattern InputType=""System.String"" NarrowedType=""System.String"" />
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D697_D368();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D697_D368() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_E026_7511()
        {
            // (Expression<Func<string, bool>>)(s => s is ['a', ..])
            var actual = GetDebugView(@"(Expression<Func<string, bool>>)(s => s is ['a', ..])");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.String"" NarrowedType=""System.String"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.String,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.String,System.Index,System.Char]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Char"" LengthOrCount=""Int32 Length"" IndexOrSlice=""Char Chars [Int32]"">
                  <Object>
                    <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Char"" NarrowedType=""System.Char"">
              <Constant Type=""System.Char"" Value=""a"" />
            </ConstantPattern>
            <SlicePattern InputType=""System.String"" NarrowedType=""System.String"" />
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E026_7511();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E026_7511() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_9665_3D75()
        {
            // (Expression<Func<string, bool>>)(s => s is [.., 'z'])
            var actual = GetDebugView(@"(Expression<Func<string, bool>>)(s => s is [.., 'z'])");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.String"" NarrowedType=""System.String"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.String,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.String,System.Index,System.Char]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Char"" LengthOrCount=""Int32 Length"" IndexOrSlice=""Char Chars [Int32]"">
                  <Object>
                    <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <SlicePattern InputType=""System.String"" NarrowedType=""System.String"" />
            <ConstantPattern InputType=""System.Char"" NarrowedType=""System.Char"">
              <Constant Type=""System.Char"" Value=""z"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9665_3D75();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9665_3D75() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_C735_7D9F()
        {
            // (Expression<Func<string, bool>>)(s => s is ['a', .. { Length: 24 }, 'z'])
            var actual = GetDebugView(@"(Expression<Func<string, bool>>)(s => s is ['a', .. { Length: 24 }, 'z'])");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.String"" NarrowedType=""System.String"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.String,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
                  <Expression>
                    <Parameter Type=""System.String"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.String,System.Index,System.Char]"">
              <Parameters>
                <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Char"" LengthOrCount=""Int32 Length"" IndexOrSlice=""Char Chars [Int32]"">
                  <Object>
                    <Parameter Type=""System.String"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Char"" NarrowedType=""System.Char"">
              <Constant Type=""System.Char"" Value=""a"" />
            </ConstantPattern>
            <SlicePattern InputType=""System.String"" NarrowedType=""System.String"">
              <IndexerAccess>
                <Lambda Type=""System.Func`3[System.String,System.Range,System.String]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""4"" Name=""o"" />
                    <Parameter Type=""System.Range"" Id=""5"" Name=""i"" />
                  </Parameters>
                  <Body>
                    <CSharpIndexerAccess Type=""System.String"" LengthOrCount=""Int32 Length"" IndexOrSlice=""System.String Substring(Int32, Int32)"">
                      <Object>
                        <Parameter Type=""System.String"" Id=""4"" Name=""o"" />
                      </Object>
                      <Argument>
                        <Parameter Type=""System.Range"" Id=""5"" Name=""i"" />
                      </Argument>
                    </CSharpIndexerAccess>
                  </Body>
                </Lambda>
              </IndexerAccess>
              <Pattern>
                <RecursivePattern InputType=""System.String"" NarrowedType=""System.String"">
                  <Properties>
                    <Property>
                      <Member>
                        <PropertyCSharpSubpatternMember Member=""Int32 Length"" />
                      </Member>
                      <Pattern>
                        <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
                          <Constant Type=""System.Int32"" Value=""24"" />
                        </ConstantPattern>
                      </Pattern>
                    </Property>
                  </Properties>
                </RecursivePattern>
              </Pattern>
            </SlicePattern>
            <ConstantPattern InputType=""System.Char"" NarrowedType=""System.Char"">
              <Constant Type=""System.Char"" Value=""z"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C735_7D9F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C735_7D9F() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_D9D1_E051()
        {
            // (Expression<Func<List<int>, bool>>)(xs => xs is [..])
            var actual = GetDebugView(@"(Expression<Func<List<int>, bool>>)(xs => xs is [..])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Count"">
                  <Expression>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.Int32],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Int32"" LengthOrCount=""Int32 Count"" IndexOrSlice=""Int32 Item [Int32]"">
                  <Object>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <SlicePattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"" />
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D9D1_E051();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D9D1_E051() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_1B3B_81F8()
        {
            // (Expression<Func<List<int>, bool>>)(xs => xs is [1, ..])
            var actual = GetDebugView(@"(Expression<Func<List<int>, bool>>)(xs => xs is [1, ..])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Count"">
                  <Expression>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.Int32],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Int32"" LengthOrCount=""Int32 Count"" IndexOrSlice=""Int32 Item [Int32]"">
                  <Object>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
            <SlicePattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"" />
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1B3B_81F8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1B3B_81F8() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_91EC_446C()
        {
            // (Expression<Func<List<int>, bool>>)(xs => xs is [.., 2])
            var actual = GetDebugView(@"(Expression<Func<List<int>, bool>>)(xs => xs is [.., 2])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Count"">
                  <Expression>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.Int32],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Int32"" LengthOrCount=""Int32 Count"" IndexOrSlice=""Int32 Item [Int32]"">
                  <Object>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <SlicePattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"" />
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""2"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_91EC_446C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_91EC_446C() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_8836_D862()
        {
            // (Expression<Func<List<int>, bool>>)(xs => xs is [1, .., 2])
            var actual = GetDebugView(@"(Expression<Func<List<int>, bool>>)(xs => xs is [1, .., 2])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Expression>
      <Pattern>
        <ListPattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"">
          <LengthAccess>
            <Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
              </Parameters>
              <Body>
                <MemberAccess Type=""System.Int32"" Member=""Int32 Count"">
                  <Expression>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""o"" />
                  </Expression>
                </MemberAccess>
              </Body>
            </Lambda>
          </LengthAccess>
          <IndexerAccess>
            <Lambda Type=""System.Func`3[System.Collections.Generic.List`1[System.Int32],System.Index,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
              </Parameters>
              <Body>
                <CSharpIndexerAccess Type=""System.Int32"" LengthOrCount=""Int32 Count"" IndexOrSlice=""Int32 Item [Int32]"">
                  <Object>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""2"" Name=""o"" />
                  </Object>
                  <Argument>
                    <Parameter Type=""System.Index"" Id=""3"" Name=""i"" />
                  </Argument>
                </CSharpIndexerAccess>
              </Body>
            </Lambda>
          </IndexerAccess>
          <Patterns>
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""1"" />
            </ConstantPattern>
            <SlicePattern InputType=""System.Collections.Generic.List`1[System.Int32]"" NarrowedType=""System.Collections.Generic.List`1[System.Int32]"" />
            <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Constant Type=""System.Int32"" Value=""2"" />
            </ConstantPattern>
          </Patterns>
        </ListPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8836_D862();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8836_D862() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { /* Assert.Inconclusive(); */ Assert.True(false, "INCONCLUSIVE"); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.True(false, message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp110_PatternMatching
    {
        partial class Reviewed
        {
            public override void CompilerTest_62B2_B138() => OK();
            public override void CompilerTest_5F9A_3106() => OK();
            public override void CompilerTest_78B5_4AC6() => OK();
            public override void CompilerTest_D6FE_2688() => OK();
            public override void CompilerTest_5C89_352D() => OK();
            public override void CompilerTest_3064_1ACC() => OK();
            public override void CompilerTest_57A5_FF9E() => OK();
            public override void CompilerTest_A02D_6A56() => OK();
            public override void CompilerTest_ED9D_BF0C() => OK();
            public override void CompilerTest_FB44_8752() => OK();
            public override void CompilerTest_3A56_04D4() => OK();
            public override void CompilerTest_ADF5_FF71() => OK();
            public override void CompilerTest_30F8_A1FF() => OK();
            public override void CompilerTest_DE25_4566() => OK();
            public override void CompilerTest_4E09_514D() => OK();
            public override void CompilerTest_A52D_B4CD() => OK();
            public override void CompilerTest_D697_D368() => OK();
            public override void CompilerTest_E026_7511() => OK();
            public override void CompilerTest_9665_3D75() => OK();
            public override void CompilerTest_C735_7D9F() => OK();
            public override void CompilerTest_D9D1_E051() => OK();
            public override void CompilerTest_1B3B_81F8() => OK();
            public override void CompilerTest_91EC_446C() => OK();
            public override void CompilerTest_8836_D862() => OK();
        }
    }
}
*/
}
