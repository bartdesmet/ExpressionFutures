// Prototyping extended expression trees for C#.
//
// bartde - November 2015

<#
// NB: When ading a test, it will be *SKIPPED* by default. In order to enable it, review the generated
//     test code and go to the .Verify.cs file to add an entry acknowledging the manual inspection by
//     providing an outcome.

// NB: Editing and saving this file can take a *VERY LONG* time because it invokes the C# compiler at
//     text template processing time. Be patient while Visual Studio appears to hang.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#
var name = "CSharp80_IndexRange";

var exprs = new[]
{
    // Index
    "(Expression<Func<Index>>)(() =>  1)",
    "(Expression<Func<Index>>)(() => ^1)",
    
    "(Expression<Func<int , Index>>) (i =>  i)",
    "(Expression<Func<int,  Index>>) (i => ^i)",
    "(Expression<Func<int?, Index?>>)(i =>  i)",
    "(Expression<Func<int?, Index?>>)(i => ^i)",

    // Range
    "(Expression<Func<Range>>)(() =>   ..  )",
    "(Expression<Func<Range>>)(() =>  1..  )",
    "(Expression<Func<Range>>)(() => ^1..  )",
    "(Expression<Func<Range>>)(() =>   .. 2)",
    "(Expression<Func<Range>>)(() =>   ..^2)",
    "(Expression<Func<Range>>)(() =>  1.. 2)",
    "(Expression<Func<Range>>)(() => ^1.. 2)",
    "(Expression<Func<Range>>)(() =>  1..^2)",
    "(Expression<Func<Range>>)(() => ^1..^2)",
    
    "(Expression<Func<Index, Index, Range>>)((l, r) => l..)",
    "(Expression<Func<Index, Index, Range>>)((l, r) =>  ..r)",
    "(Expression<Func<Index, Index, Range>>)((l, r) => l..r)",

    "(Expression<Func<Index?, Index?, Range?>>)((l, r) => l..)",
    "(Expression<Func<Index?, Index?, Range?>>)((l, r) =>  ..r)",
    "(Expression<Func<Index?, Index?, Range?>>)((l, r) => l..r)",

    // Indexing
    "(Expression<Func<int[], int>>)    (xs => xs[^1])",
    "(Expression<Func<List<int>, int>>)(xs => xs[^1])",
    "(Expression<Func<string, char>>)  ( s =>  s[^1])",

    // Slicing
    "(Expression<Func<int[], int[]>>)  (xs => xs[1..2])",
    "(Expression<Func<string, string>>)( s =>  s[1..2])",
};
#>
<#@ include file="CompilerTests.t4" #>