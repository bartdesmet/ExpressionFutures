// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Xunit;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    public partial class CompilerTests_CSharp30_Statements_If
    {
        [Fact]
        public void CompilerTest_C043_D2B0()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""T"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Default Type=""System.Void"" />
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C043_D2B0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C043_D2B0() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_2216_A3C9()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); else Console.Write('F'); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); else Console.Write('F'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""T"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""F"" />
              </Arguments>
            </Call>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2216_A3C9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2216_A3C9() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_6319_CF5C()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfTrue>
          <IfFalse>
            <Default Type=""System.Void"" />
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6319_CF5C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6319_CF5C() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_1D89_F94D()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfTrue>
          <IfFalse>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1D89_F94D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1D89_F94D() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_B73D_03FA()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else if (x < 5) { Console.Write('E'); } else { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else if (x < 5) { Console.Write('E'); } else { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfTrue>
          <IfFalse>
            <Conditional Type=""System.Void"">
              <Test>
                <LessThan Type=""System.Boolean"">
                  <Left>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
                  </Left>
                  <Right>
                    <Constant Type=""System.Int32"" Value=""5"" />
                  </Right>
                </LessThan>
              </Test>
              <IfTrue>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""E"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </IfTrue>
              <IfFalse>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""F"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </IfFalse>
            </Conditional>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B73D_03FA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B73D_03FA() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_5419_99E8()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) int.Parse("42"); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) int.Parse(""42""); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""42"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Default Type=""System.Void"" />
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5419_99E8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5419_99E8() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_EB64_66C6()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) int.Parse("42"); else long.Parse("42"); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) int.Parse(""42""); else long.Parse(""42""); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""42"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Call Type=""System.Int64"" Method=""Int64 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""42"" />
              </Arguments>
            </Call>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EB64_66C6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EB64_66C6() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { /* Assert.Inconclusive(); */ Assert.Fail("INCONCLUSIVE"); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp30_Statements_If
    {
        partial class Reviewed
        {
            public override void CompilerTest_C043_D2B0() => OK();
            public override void CompilerTest_2216_A3C9() => OK();
            public override void CompilerTest_6319_CF5C() => OK();
            public override void CompilerTest_1D89_F94D() => OK();
            public override void CompilerTest_B73D_03FA() => OK();
            public override void CompilerTest_5419_99E8() => OK();
            public override void CompilerTest_EB64_66C6() => OK();
        }
    }
}
*/
}
