// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    [TestClass]
    public partial class CompilerTests_CSharp30_Statements
    {
        [TestMethod]
        public void CompilerTest_A8D0_49C3()
        {
            // (Expression<Action>)(() => { })
            var actual = GetDebugView(@"(Expression<Action>)(() => { })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements />
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A8D0_49C3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A8D0_49C3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_197A_C7FA()
        {
            // (Expression<Action>)(() => { int x; x = 5; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int x; x = 5; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""5"" />
          </Right>
        </CSharpAssign>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_197A_C7FA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_197A_C7FA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_27AA_4144()
        {
            // (Expression<Action>)(() => { int x; x = 5; { int y = x + 1; Console.WriteLine(y); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int x; x = 5; { int y = x + 1; Console.WriteLine(y); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""5"" />
          </Right>
        </CSharpAssign>
        <Block Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Variables>
          <Expressions>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
              </Left>
              <Right>
                <Add Type=""System.Int32"">
                  <Left>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
                  </Left>
                  <Right>
                    <Constant Type=""System.Int32"" Value=""1"" />
                  </Right>
                </Add>
              </Right>
            </CSharpAssign>
            <Call Type=""System.Void"" Method=""Void WriteLine(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
              </Arguments>
            </Call>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_27AA_4144();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_27AA_4144() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0BD6_C135()
        {
            // (Expression<Action>)(() => { ; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Default Type=""System.Void"" />
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0BD6_C135();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0BD6_C135() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7F95_E445()
        {
            // (Expression<Action>)(() => { ;; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ;; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Default Type=""System.Void"" />
        <Default Type=""System.Void"" />
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7F95_E445();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7F95_E445() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6102_7F8E()
        {
            // (Expression<Action>)(() => { return; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { return; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Goto Type=""System.Void"" Kind=""Return"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </Target>
        </Goto>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6102_7F8E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6102_7F8E() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AEF8_BB4B()
        {
            // (Expression<Func<int>>)(() => { int x = 42; return x; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { int x = 42; return x; })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Int32"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Right>
        </CSharpAssign>
        <Goto Type=""System.Void"" Kind=""Return"">
          <Target>
            <LabelTarget Type=""System.Int32"" Id=""1"" />
          </Target>
          <Value>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Value>
        </Goto>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Int32"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AEF8_BB4B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AEF8_BB4B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7381_AA02()
        {
            // (Expression<Func<int>>)(() => { return 42; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { return 42; })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Constant Type=""System.Int32"" Value=""42"" />
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7381_AA02();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7381_AA02() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_BBBC_6128()
        {
            // (Expression<Action>)(() => { goto A; A: Console.Write('A'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { goto A; A: Console.Write('A'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpGoto Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </CSharpGoto>
        <Label Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </Label>
        <Call Type=""System.Void"" Method=""Void Write(Char)"">
          <Arguments>
            <Constant Type=""System.Char"" Value=""A"" />
          </Arguments>
        </Call>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BBBC_6128();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BBBC_6128() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6FC7_B4A6()
        {
            // (Expression<Action>)(() => { A: Console.Write('A'); goto A; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { A: Console.Write('A'); goto A; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <Label Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </Label>
        <Call Type=""System.Void"" Method=""Void Write(Char)"">
          <Arguments>
            <Constant Type=""System.Char"" Value=""A"" />
          </Arguments>
        </Call>
        <CSharpGoto Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </CSharpGoto>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6FC7_B4A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6FC7_B4A6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C043_D2B0()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""T"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Default Type=""System.Void"" />
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C043_D2B0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C043_D2B0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2216_A3C9()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); else Console.Write('F'); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) Console.Write('T'); else Console.Write('F'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""T"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""F"" />
              </Arguments>
            </Call>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2216_A3C9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2216_A3C9() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6319_CF5C()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfTrue>
          <IfFalse>
            <Default Type=""System.Void"" />
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6319_CF5C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6319_CF5C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1D89_F94D()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfTrue>
          <IfFalse>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1D89_F94D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1D89_F94D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B73D_03FA()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else if (x < 5) { Console.Write('E'); } else { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) { Console.Write('T'); } else if (x < 5) { Console.Write('E'); } else { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </IfTrue>
          <IfFalse>
            <Conditional Type=""System.Void"">
              <Test>
                <LessThan Type=""System.Boolean"">
                  <Left>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
                  </Left>
                  <Right>
                    <Constant Type=""System.Int32"" Value=""5"" />
                  </Right>
                </LessThan>
              </Test>
              <IfTrue>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""E"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </IfTrue>
              <IfFalse>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""F"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </IfFalse>
            </Conditional>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B73D_03FA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B73D_03FA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5419_99E8()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) int.Parse("42"); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) int.Parse(""42""); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""42"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Default Type=""System.Void"" />
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5419_99E8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5419_99E8() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_EB64_66C6()
        {
            // (Expression<Action<int>>)(x => { if (x > 0) int.Parse("42"); else long.Parse("42"); })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { if (x > 0) int.Parse(""42""); else long.Parse(""42""); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Conditional Type=""System.Void"">
          <Test>
            <GreaterThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </GreaterThan>
          </Test>
          <IfTrue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""42"" />
              </Arguments>
            </Call>
          </IfTrue>
          <IfFalse>
            <Call Type=""System.Int64"" Method=""Int64 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""42"" />
              </Arguments>
            </Call>
          </IfFalse>
        </Conditional>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EB64_66C6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EB64_66C6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C90B_9C05()
        {
            // (Expression<Action>)(() => { while (true) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C90B_9C05();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C90B_9C05() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C5C5_4E9F()
        {
            // (Expression<Action>)(() => { while (true) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C5C5_4E9F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C5C5_4E9F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7D34_66D1()
        {
            // (Expression<Action>)(() => { while (true) { break; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) { break; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""0"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7D34_66D1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7D34_66D1() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_40EC_DA92()
        {
            // (Expression<Action>)(() => { while (true) { continue; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) { continue; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Goto Type=""System.Void"" Kind=""Continue"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""0"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </ContinueLabel>
        </CSharpWhile>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_40EC_DA92();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_40EC_DA92() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_FC9A_C797()
        {
            // (Expression<Action>)(() => { while (true) { return; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) { return; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Goto Type=""System.Void"" Kind=""Return"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""0"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FC9A_C797();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FC9A_C797() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6C15_9FA8()
        {
            // (Expression<Action>)(() => { int i = 0; while (i < 10) { if (i == 5) continue; if (i == 8) break; i++; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int i = 0; while (i < 10) { if (i == 5) continue; if (i == 8) break; i++; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""0"" />
          </Right>
        </CSharpAssign>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Body>
            <Block Type=""System.Int32"">
              <Expressions>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""5"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Continue"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""1"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""8"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Break"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""2"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <CSharpPostIncrementAssign Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                  </Operand>
                </CSharpPostIncrementAssign>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6C15_9FA8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6C15_9FA8() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_242C_68A7()
        {
            // (Expression<Action<int, int>>)((x, y) => { while (x < 1) { while (y < 2) { break; } continue; } })
            var actual = GetDebugView(@"(Expression<Action<int, int>>)((x, y) => { while (x < 1) { while (y < 2) { break; } continue; } })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int32,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </LessThan>
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <CSharpWhile Type=""System.Void"">
                  <Test>
                    <LessThan Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""2"" />
                      </Right>
                    </LessThan>
                  </Test>
                  <Body>
                    <Block Type=""System.Void"">
                      <Expressions>
                        <Goto Type=""System.Void"" Kind=""Break"">
                          <Target>
                            <LabelTarget Type=""System.Void"" Id=""2"" />
                          </Target>
                        </Goto>
                      </Expressions>
                    </Block>
                  </Body>
                  <BreakLabel>
                    <LabelTarget Type=""System.Void"" Id=""2"" />
                  </BreakLabel>
                  <ContinueLabel>
                    <LabelTarget Type=""System.Void"" Id=""3"" />
                  </ContinueLabel>
                </CSharpWhile>
                <Goto Type=""System.Void"" Kind=""Continue"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""4"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""6"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_242C_68A7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_242C_68A7() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2503_AEF6()
        {
            // (Expression<Action<int, int>>)((x, y) => { while (x < 1) { while (y < 2) { continue; } break; } })
            var actual = GetDebugView(@"(Expression<Action<int, int>>)((x, y) => { while (x < 1) { while (y < 2) { continue; } break; } })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int32,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </LessThan>
          </Test>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <CSharpWhile Type=""System.Void"">
                  <Test>
                    <LessThan Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""2"" />
                      </Right>
                    </LessThan>
                  </Test>
                  <Body>
                    <Block Type=""System.Void"">
                      <Expressions>
                        <Goto Type=""System.Void"" Kind=""Continue"">
                          <Target>
                            <LabelTarget Type=""System.Void"" Id=""2"" />
                          </Target>
                        </Goto>
                      </Expressions>
                    </Block>
                  </Body>
                  <BreakLabel>
                    <LabelTarget Type=""System.Void"" Id=""3"" />
                  </BreakLabel>
                  <ContinueLabel>
                    <LabelTarget Type=""System.Void"" Id=""2"" />
                  </ContinueLabel>
                </CSharpWhile>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""4"" />
                  </Target>
                </Goto>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </ContinueLabel>
        </CSharpWhile>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""6"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2503_AEF6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2503_AEF6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6674_1E31()
        {
            // (Expression<Action>)(() => { do { Console.Write('.'); } while (true); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { do { Console.Write('.'); } while (true); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpDo Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpDo>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6674_1E31();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6674_1E31() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_B6D5_79C3()
        {
            // (Expression<Action>)(() => { int i = 0; do { if (i == 5) continue; if (i == 8) break; i++; } while (i < 10); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int i = 0; do { if (i == 5) continue; if (i == 8) break; i++; } while (i < 10); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""0"" />
          </Right>
        </CSharpAssign>
        <CSharpDo Type=""System.Void"">
          <Body>
            <Block Type=""System.Int32"">
              <Expressions>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""5"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Continue"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""1"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""8"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Break"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""2"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <CSharpPostIncrementAssign Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                  </Operand>
                </CSharpPostIncrementAssign>
              </Expressions>
            </Block>
          </Body>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpDo>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B6D5_79C3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B6D5_79C3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_25E2_35E6()
        {
            // (Expression<Action>)(() => { for (;;) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (;;) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpFor Type=""System.Void"">
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpFor>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_25E2_35E6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_25E2_35E6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AD48_86CB()
        {
            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Variables>
          <Initializers>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </CSharpAssign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <CSharpPostIncrementAssign Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Operand>
            </CSharpPostIncrementAssign>
          </Iterators>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD48_86CB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD48_86CB() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5EF7_9418()
        {
            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) { Console.Write(i); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) { Console.Write(i); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Variables>
          <Initializers>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </CSharpAssign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <CSharpPostIncrementAssign Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Operand>
            </CSharpPostIncrementAssign>
          </Iterators>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Int32)"">
                  <Arguments>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5EF7_9418();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5EF7_9418() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_26D5_E9FE()
        {
            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) { if (i == 5) continue; if (i == 8) break; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) { if (i == 5) continue; if (i == 8) break; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Variables>
          <Initializers>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </CSharpAssign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <CSharpPostIncrementAssign Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Operand>
            </CSharpPostIncrementAssign>
          </Iterators>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""5"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Continue"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""1"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""8"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Break"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""2"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_26D5_E9FE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_26D5_E9FE() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F7F3_AD6D()
        {
            // (Expression<Action>)(() => { for (int i = 1, j = 2; i < 3; i += 4, j -= 5) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (int i = 1, j = 2; i < 3; i += 4, j -= 5) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
            <Parameter Type=""System.Int32"" Id=""1"" Name=""j"" />
          </Variables>
          <Initializers>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </CSharpAssign>
            <CSharpAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""j"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""2"" />
              </Right>
            </CSharpAssign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""3"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <CSharpAddAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""4"" />
              </Right>
            </CSharpAddAssign>
            <CSharpSubtractAssign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""j"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""5"" />
              </Right>
            </CSharpSubtractAssign>
          </Iterators>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F7F3_AD6D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F7F3_AD6D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_245A_0917()
        {
            // (Expression<Action<string>>)(s => { foreach (var c in s) Console.Write(c); })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { foreach (var c in s) Console.Write(c); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Char"" Id=""1"" Name=""c"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Parameter Type=""System.Char"" Id=""1"" Name=""c"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_245A_0917();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_245A_0917() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_DA7B_AAFD()
        {
            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32[]]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DA7B_AAFD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DA7B_AAFD() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_34B8_D561()
        {
            // (Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object[]]"">
  <Parameters>
    <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variables>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_34B8_D561();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_34B8_D561() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3958_FB90()
        {
            // (Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.IEnumerable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.IEnumerable`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Collections.Generic.IEnumerable`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3958_FB90();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3958_FB90() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1525_8CFA()
        {
            // (Expression<Action<List<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<List<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.List`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1525_8CFA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1525_8CFA() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_720D_2F5A()
        {
            // (Expression<Action<IList<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<IList<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.IList`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.IList`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Collections.Generic.IList`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_720D_2F5A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_720D_2F5A() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0041_2906()
        {
            // (Expression<Action<ArrayList>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<ArrayList>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.ArrayList]"">
  <Parameters>
    <Parameter Type=""System.Collections.ArrayList"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variables>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <Parameter Type=""System.Collections.ArrayList"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0041_2906();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0041_2906() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AE67_825B()
        {
            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) { if (x == 5) continue; if (x == 8) break; } })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) { if (x == 5) continue; if (x == 8) break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32[]]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""5"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Continue"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""2"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""8"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Break"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""3"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AE67_825B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AE67_825B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_8AE9_7D52()
        {
            // (Expression<Action<dynamic>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<dynamic>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variables>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""2"" Name=""__element"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <CSharpDynamicConvert Type=""System.Collections.IEnumerable"" Context=""Expressions"">
              <Expression>
                <Parameter Type=""System.Object"" Id=""0"" Name=""xs"" />
              </Expression>
            </CSharpDynamicConvert>
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8AE9_7D52();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8AE9_7D52() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_5598_03A6()
        {
            // (Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5598_03A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5598_03A6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_62CA_03A6()
        {
            // (Expression<Action<IDisposable>>)(d => { using (d) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (d) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_62CA_03A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_62CA_03A6() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_BB7C_25AF()
        {
            // (Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
          </Variables>
          <Declarations>
            <LocalDeclaration>
              <Variable>
                <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
              </Variable>
              <Expression>
                <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
              </Expression>
            </LocalDeclaration>
          </Declarations>
          <Body>
            <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
              <Arguments>
                <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
              </Arguments>
            </Call>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BB7C_25AF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BB7C_25AF() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_51A3_8AB4()
        {
            // (Expression<Action<IDisposable>>)(d => { using (var e = d) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (var e = d) { Console.WriteLine(e); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
          </Variables>
          <Declarations>
            <LocalDeclaration>
              <Variable>
                <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
              </Variable>
              <Expression>
                <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
              </Expression>
            </LocalDeclaration>
          </Declarations>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                  <Arguments>
                    <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_51A3_8AB4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_51A3_8AB4() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_57C3_FE40()
        {
            // (Expression<Action>)(() => { using (var fs = File.OpenRead("foo.txt")) { } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { using (var fs = File.OpenRead(""foo.txt"")) { } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.IO.FileStream"" Id=""0"" Name=""fs"" />
          </Variables>
          <Declarations>
            <LocalDeclaration>
              <Variable>
                <Parameter Type=""System.IO.FileStream"" Id=""0"" Name=""fs"" />
              </Variable>
              <Expression>
                <Call Type=""System.IO.FileStream"" Method=""System.IO.FileStream OpenRead(System.String)"">
                  <Arguments>
                    <Constant Type=""System.String"" Value=""foo.txt"" />
                  </Arguments>
                </Call>
              </Expression>
            </LocalDeclaration>
          </Declarations>
          <Body>
            <Default Type=""System.Void"" />
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_57C3_FE40();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_57C3_FE40() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7AF8_56F5()
        {
            // (Expression<Action>)(() => { using (FileStream fs1 = File.OpenRead("foo.txt"), fs2 = File.OpenRead("bar.txt")) { } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { using (FileStream fs1 = File.OpenRead(""foo.txt""), fs2 = File.OpenRead(""bar.txt"")) { } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.IO.FileStream"" Id=""0"" Name=""fs1"" />
            <Parameter Type=""System.IO.FileStream"" Id=""1"" Name=""fs2"" />
          </Variables>
          <Declarations>
            <LocalDeclaration>
              <Variable>
                <Parameter Type=""System.IO.FileStream"" Id=""0"" Name=""fs1"" />
              </Variable>
              <Expression>
                <Call Type=""System.IO.FileStream"" Method=""System.IO.FileStream OpenRead(System.String)"">
                  <Arguments>
                    <Constant Type=""System.String"" Value=""foo.txt"" />
                  </Arguments>
                </Call>
              </Expression>
            </LocalDeclaration>
            <LocalDeclaration>
              <Variable>
                <Parameter Type=""System.IO.FileStream"" Id=""1"" Name=""fs2"" />
              </Variable>
              <Expression>
                <Call Type=""System.IO.FileStream"" Method=""System.IO.FileStream OpenRead(System.String)"">
                  <Arguments>
                    <Constant Type=""System.String"" Value=""bar.txt"" />
                  </Arguments>
                </Call>
              </Expression>
            </LocalDeclaration>
          </Declarations>
          <Body>
            <Default Type=""System.Void"" />
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7AF8_56F5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7AF8_56F5() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_7005_B197()
        {
            // (Expression<Action<object>>)(o => { using (o is IDisposable d ? d : null) {} })
            var actual = GetDebugView(@"(Expression<Action<object>>)(o => { using (o is IDisposable d ? d : null) {} })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.IDisposable"" Id=""1"" Name=""d"" />
          </Variables>
          <Resource>
            <Conditional Type=""System.IDisposable"">
              <Test>
                <CSharpIsPattern Type=""System.Boolean"">
                  <Expression>
                    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
                  </Expression>
                  <Pattern>
                    <DeclarationPattern InputType=""System.Object"" NarrowedType=""System.IDisposable"" Type=""System.IDisposable"">
                      <Variable>
                        <Parameter Type=""System.IDisposable"" Id=""1"" Name=""d"" />
                      </Variable>
                    </DeclarationPattern>
                  </Pattern>
                </CSharpIsPattern>
              </Test>
              <IfTrue>
                <Parameter Type=""System.IDisposable"" Id=""1"" Name=""d"" />
              </IfTrue>
              <IfFalse>
                <Constant Type=""System.IDisposable"" Value=""null"" />
              </IfFalse>
            </Conditional>
          </Resource>
          <Body>
            <Default Type=""System.Void"" />
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7005_B197();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7005_B197() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2CF2_18B2()
        {
            // (Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpLock Type=""System.Void"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
          </Expression>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpLock>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2CF2_18B2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2CF2_18B2() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_CD60_A086()
        {
            // (Expression<Action>)(() => { lock (new object()) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { lock (new object()) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpLock Type=""System.Void"">
          <Expression>
            <New Type=""System.Object"" Constructor=""Void .ctor()"">
              <Arguments />
            </New>
          </Expression>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpLock>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CD60_A086();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CD60_A086() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_880F_A24B()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Finally>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Finally>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_880F_A24B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_880F_A24B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_19B3_485B()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""C"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_19B3_485B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_19B3_485B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_0662_485B()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""C"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0662_485B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0662_485B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F63E_8707()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F63E_8707();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F63E_8707() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_02EE_D49C()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) when (e != null) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) when (e != null) { Console.WriteLine(e); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
              <Filter>
                <NotEqual Type=""System.Boolean"">
                  <Left>
                    <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                  </Left>
                  <Right>
                    <Constant Type=""System.Object"" Value=""null"" />
                  </Right>
                </NotEqual>
              </Filter>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_02EE_D49C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_02EE_D49C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1C02_6E0D()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.InvalidOperationException"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""I"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
            <CatchBlock Test=""System.OverflowException"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""O"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1C02_6E0D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1C02_6E0D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_744C_C5E7()
        {
            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
          <Finally>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Finally>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_744C_C5E7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_744C_C5E7() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_9329_A4F3()
        {
            // (Expression<Action>)(() => { throw new Exception(); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { throw new Exception(); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <Throw Type=""System.Void"">
          <Operand>
            <New Type=""System.Exception"" Constructor=""Void .ctor()"">
              <Arguments />
            </New>
          </Operand>
        </Throw>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9329_A4F3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9329_A4F3() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_F778_9166()
        {
            // (Expression<Action>)(() => { try { } catch { throw; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { } catch { throw; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Default Type=""System.Void"" />
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Throw Type=""System.Void"" />
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F778_9166();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F778_9166() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_34FC_99EF()
        {
            // (Expression<Action>)(() => { try { } catch (Exception ex) { throw ex; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { } catch (Exception ex) { throw ex; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Default Type=""System.Void"" />
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""ex"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Throw Type=""System.Void"">
                      <Operand>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""ex"" />
                      </Operand>
                    </Throw>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_34FC_99EF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_34FC_99EF() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_2156_D7F7()
        {
            // (Expression<Action<int>>)(x => { switch (x) {} })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) {} })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases />
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2156_D7F7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2156_D7F7() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_FCA9_3B3F()
        {
            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""0"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FCA9_3B3F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FCA9_3B3F() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6832_C62D()
        {
            // (Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0, 1"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""A"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6832_C62D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6832_C62D() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_4E9F_42FD()
        {
            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""A"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""D"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4E9F_42FD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4E9F_42FD() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_30E5_8D77()
        {
            // (Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0, null"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_30E5_8D77();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_30E5_8D77() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1754_0766()
        {
            // (Expression<Action<int?>>)(x => { switch (x) { case 0: goto case null; case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: goto case null; case null: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <CSharpGotoCase Type=""System.Void"" Value=""null"" />
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1754_0766();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1754_0766() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AD7C_C86B()
        {
            // (Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <CSharpGotoCase Type=""System.Void"" Value=""0"" />
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD7C_C86B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD7C_C86B() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_3E56_6022()
        {
            // (Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <CSharpGotoDefault Type=""System.Void"" />
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3E56_6022();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3E56_6022() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6D08_923C()
        {
            // (Expression<Action<int>>)(x => { switch (x) { default: break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { default: break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6D08_923C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6D08_923C() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_205E_7D00()
        {
            // (Expression<Action>)(() => { switch (int.Parse("1")) { } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { switch (int.Parse(""1"")) { } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""1"" />
              </Arguments>
            </Call>
          </SwitchValue>
          <Cases />
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_205E_7D00();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_205E_7D00() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_A00C_0847()
        {
            // (Expression<Action>)(() => { switch (int.Parse("1")) { default: break; } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { switch (int.Parse(""1"")) { default: break; } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Call Type=""System.Int32"" Method=""Int32 Parse(System.String)"">
              <Arguments>
                <Constant Type=""System.String"" Value=""1"" />
              </Arguments>
            </Call>
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""0"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A00C_0847();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A00C_0847() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { Assert.Inconclusive(); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp30_Statements
    {
        partial class Reviewed
        {
            public override void CompilerTest_A8D0_49C3() => OK();
            public override void CompilerTest_197A_C7FA() => OK();
            public override void CompilerTest_27AA_4144() => OK();
            public override void CompilerTest_0BD6_C135() => OK();
            public override void CompilerTest_7F95_E445() => OK();
            public override void CompilerTest_6102_7F8E() => OK();
            public override void CompilerTest_AEF8_BB4B() => OK();
            public override void CompilerTest_7381_AA02() => OK();
            public override void CompilerTest_BBBC_6128() => OK();
            public override void CompilerTest_6FC7_B4A6() => OK();
            public override void CompilerTest_C043_D2B0() => OK();
            public override void CompilerTest_2216_A3C9() => OK();
            public override void CompilerTest_6319_CF5C() => OK();
            public override void CompilerTest_1D89_F94D() => OK();
            public override void CompilerTest_B73D_03FA() => OK();
            public override void CompilerTest_5419_99E8() => OK();
            public override void CompilerTest_EB64_66C6() => OK();
            public override void CompilerTest_C90B_9C05() => OK();
            public override void CompilerTest_C5C5_4E9F() => OK();
            public override void CompilerTest_7D34_66D1() => OK();
            public override void CompilerTest_40EC_DA92() => OK();
            public override void CompilerTest_FC9A_C797() => OK();
            public override void CompilerTest_6C15_9FA8() => OK();
            public override void CompilerTest_242C_68A7() => OK();
            public override void CompilerTest_2503_AEF6() => OK();
            public override void CompilerTest_6674_1E31() => OK();
            public override void CompilerTest_B6D5_79C3() => OK();
            public override void CompilerTest_25E2_35E6() => OK();
            public override void CompilerTest_AD48_86CB() => OK();
            public override void CompilerTest_5EF7_9418() => OK();
            public override void CompilerTest_26D5_E9FE() => OK();
            public override void CompilerTest_F7F3_AD6D() => OK();
            public override void CompilerTest_245A_0917() => OK();
            public override void CompilerTest_DA7B_AAFD() => OK();
            public override void CompilerTest_34B8_D561() => OK();
            public override void CompilerTest_3958_FB90() => OK();
            public override void CompilerTest_1525_8CFA() => OK();
            public override void CompilerTest_720D_2F5A() => OK();
            public override void CompilerTest_0041_2906() => OK();
            public override void CompilerTest_AE67_825B() => OK();
            public override void CompilerTest_8AE9_7D52() => OK();
            public override void CompilerTest_5598_03A6() => OK();
            public override void CompilerTest_62CA_03A6() => OK();
            public override void CompilerTest_BB7C_25AF() => OK();
            public override void CompilerTest_51A3_8AB4() => OK();
            public override void CompilerTest_57C3_FE40() => OK();
            public override void CompilerTest_7AF8_56F5() => OK();
            public override void CompilerTest_7005_B197() => OK();
            public override void CompilerTest_2CF2_18B2() => OK();
            public override void CompilerTest_CD60_A086() => OK();
            public override void CompilerTest_880F_A24B() => OK();
            public override void CompilerTest_19B3_485B() => OK();
            public override void CompilerTest_0662_485B() => OK();
            public override void CompilerTest_F63E_8707() => OK();
            public override void CompilerTest_02EE_D49C() => OK();
            public override void CompilerTest_1C02_6E0D() => OK();
            public override void CompilerTest_744C_C5E7() => OK();
            public override void CompilerTest_9329_A4F3() => OK();
            public override void CompilerTest_F778_9166() => OK();
            public override void CompilerTest_34FC_99EF() => OK();
            public override void CompilerTest_2156_D7F7() => OK();
            public override void CompilerTest_FCA9_3B3F() => OK();
            public override void CompilerTest_6832_C62D() => OK();
            public override void CompilerTest_4E9F_42FD() => OK();
            public override void CompilerTest_30E5_8D77() => OK();
            public override void CompilerTest_1754_0766() => OK();
            public override void CompilerTest_AD7C_C86B() => OK();
            public override void CompilerTest_3E56_6022() => OK();
            public override void CompilerTest_6D08_923C() => OK();
            public override void CompilerTest_205E_7D00() => OK();
            public override void CompilerTest_A00C_0847() => OK();
        }
    }
}
*/
}
