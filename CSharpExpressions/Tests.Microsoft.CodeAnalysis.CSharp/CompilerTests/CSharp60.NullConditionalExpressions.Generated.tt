// Prototyping extended expression trees for C#.
//
// bartde - November 2015

<#
// NB: When ading a test, it will be *SKIPPED* by default. In order to enable it, review the generated
//     test code and go to the .Verify.cs file to add an entry acknowledging the manual inspection by
//     providing an outcome.

// NB: Editing and saving this file can take a *VERY LONG* time because it invokes the C# compiler at
//     text template processing time. Be patient while Visual Studio appears to hang.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#
var name = "CSharp60_NullConditionalExpressions";

var exprs = new[]
{
    // Conditional access
    "(Expression<Func<string, int?>>)(s => s?.Length)",
    "(Expression<Func<string, int?>>)(s => s?.ToUpper()?.Length)",
    "(Expression<Func<string, string>>)(s => s?.ToUpper())",
    "(Expression<Func<string, string>>)(s => s?.Substring(1)?.ToUpper())",
    "(Expression<Func<DateTimeOffset?, TimeSpan?>>)(d => d?.Offset)",
    "(Expression<Func<DateTimeOffset?, int?>>)(d => (d?.Offset)?.Hours)",
    "(Expression<Func<DateTimeOffset?, int?>>)(d => d?.Offset.Hours)",
    "(Expression<Func<string, char?>>)(s => s?[42])",
    "(Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))",
    "(Expression<Func<string, string>>)(s => s?.Substring(length: 1, startIndex: 0).ToUpper()?.ToLower())",
};
#>
<#@ include file="CompilerTests.t4" #>