// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Xunit;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    public partial class CompilerTests_CSharp30_Assignments
    {
        [Fact]
        public void CompilerTest_F94F_ACD8()
        {
            // (Expression<Action<int>>)(x => { var y = x; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { var y = x; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
      </Variables>
      <Statements>
        <CSharpAssign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Left>
          <Right>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Right>
        </CSharpAssign>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F94F_ACD8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F94F_ACD8() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_044F_D3EC()
        {
            // (Expression<Action<int>>)(x => { x += 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x += 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_044F_D3EC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_044F_D3EC() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_094E_F5F3()
        {
            // (Expression<Action<int>>)(x => { x -= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x -= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_094E_F5F3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_094E_F5F3() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_8BE1_8041()
        {
            // (Expression<Action<int>>)(x => { x *= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x *= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpMultiplyAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpMultiplyAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8BE1_8041();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8BE1_8041() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_F3D0_F9A7()
        {
            // (Expression<Action<int>>)(x => { x /= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x /= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDivideAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpDivideAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F3D0_F9A7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F3D0_F9A7() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_EB02_69E4()
        {
            // (Expression<Action<int>>)(x => { x %= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x %= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpModuloAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpModuloAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EB02_69E4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EB02_69E4() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_6EC4_AD12()
        {
            // (Expression<Action<int>>)(x => { x &= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x &= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpAndAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpAndAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6EC4_AD12();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6EC4_AD12() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_7D09_A1B7()
        {
            // (Expression<Action<int>>)(x => { x |= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x |= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpOrAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpOrAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7D09_A1B7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7D09_A1B7() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_ED89_63D1()
        {
            // (Expression<Action<int>>)(x => { x ^= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x ^= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpExclusiveOrAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpExclusiveOrAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_ED89_63D1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_ED89_63D1() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_6090_4BC9()
        {
            // (Expression<Action<int>>)(x => { x <<= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x <<= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpLeftShiftAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpLeftShiftAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6090_4BC9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6090_4BC9() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_D47A_FCEE()
        {
            // (Expression<Action<int>>)(x => { x >>= 1; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x >>= 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpRightShiftAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpRightShiftAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D47A_FCEE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D47A_FCEE() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_60B4_CC06()
        {
            // (Expression<Action<TimeSpan>>)(t => { t += TimeSpan.Zero; })
            var actual = GetDebugView(@"(Expression<Action<TimeSpan>>)(t => { t += TimeSpan.Zero; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.TimeSpan]"">
  <Parameters>
    <Parameter Type=""System.TimeSpan"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.TimeSpan"" Method=""System.TimeSpan op_Addition(System.TimeSpan, System.TimeSpan)"">
      <Left>
        <Parameter Type=""System.TimeSpan"" Id=""0"" Name=""t"" />
      </Left>
      <Right>
        <MemberAccess Type=""System.TimeSpan"" Member=""System.TimeSpan Zero"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_60B4_CC06();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_60B4_CC06() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_2DAA_6C38()
        {
            // (Expression<Action<DateTime>>)(d => { d -= TimeSpan.Zero; })
            var actual = GetDebugView(@"(Expression<Action<DateTime>>)(d => { d -= TimeSpan.Zero; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.DateTime]"">
  <Parameters>
    <Parameter Type=""System.DateTime"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.DateTime"" Method=""System.DateTime op_Subtraction(System.DateTime, System.TimeSpan)"">
      <Left>
        <Parameter Type=""System.DateTime"" Id=""0"" Name=""d"" />
      </Left>
      <Right>
        <MemberAccess Type=""System.TimeSpan"" Member=""System.TimeSpan Zero"" />
      </Right>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2DAA_6C38();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2DAA_6C38() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_7F56_2B0B()
        {
            // (Expression<Action<int>>)(x => { checked { x += 1; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x += 1; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpAddAssignChecked Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </CSharpAddAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7F56_2B0B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7F56_2B0B() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_27E3_F016()
        {
            // (Expression<Action<int>>)(x => { checked { x -= 1; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x -= 1; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpSubtractAssignChecked Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </CSharpSubtractAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_27E3_F016();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_27E3_F016() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_467C_C565()
        {
            // (Expression<Action<int>>)(x => { checked { x *= 1; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x *= 1; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpMultiplyAssignChecked Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""1"" />
              </Right>
            </CSharpMultiplyAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_467C_C565();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_467C_C565() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_B13A_1C7B()
        {
            // (Expression<Action<int?>>)(x => { x += 1; })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { x += 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Operand>
        </Convert>
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B13A_1C7B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B13A_1C7B() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_EE3F_5608()
        {
            // (Expression<Action<StrongBox<int>>>)(xs => { xs.Value += 1; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<int>>>)(xs => { xs.Value += 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int32"">
      <Left>
        <MemberAccess Type=""System.Int32"" Member=""Int32 Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Expression>
        </MemberAccess>
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EE3F_5608();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EE3F_5608() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_79AE_FDED()
        {
            // (Expression<Action<List<int>>>)(xs => { xs[0] += 1; })
            var actual = GetDebugView(@"(Expression<Action<List<int>>>)(xs => { xs[0] += 1; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.List`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int32"">
      <Left>
        <CSharpIndex Type=""System.Int32"" Indexer=""Int32 Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_79AE_FDED();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_79AE_FDED() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_A709_35ED()
        {
            // (Expression<Action<string>>)(s => { s += "!"; })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { s += ""!""; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.String"" Method=""System.String Concat(System.String, System.String)"">
      <Left>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Left>
      <Right>
        <Constant Type=""System.String"" Value=""!"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A709_35ED();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A709_35ED() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_8CA7_35F4()
        {
            // (Expression<Action<string>>)(s => { s += 0; })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { s += 0; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.String"" Method=""System.String Concat(System.Object, System.Object)"">
      <Left>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Left>
      <Right>
        <Convert Type=""System.Object"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""0"" />
          </Operand>
        </Convert>
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8CA7_35F4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8CA7_35F4() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_8BFE_5348()
        {
            // (Expression<Action<string>>)(s => { checked { s += "!"; } })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { checked { s += ""!""; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.String"">
          <Expressions>
            <CSharpAddAssign Type=""System.String"" Method=""System.String Concat(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
              </Left>
              <Right>
                <Constant Type=""System.String"" Value=""!"" />
              </Right>
            </CSharpAddAssign>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8BFE_5348();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8BFE_5348() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_18CC_52FA()
        {
            // (Expression<Action<string>>)(s => { checked { s += 0; } })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { checked { s += 0; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.String"">
          <Expressions>
            <CSharpAddAssign Type=""System.String"" Method=""System.String Concat(System.Object, System.Object)"">
              <Left>
                <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
              </Left>
              <Right>
                <Convert Type=""System.Object"">
                  <Operand>
                    <Constant Type=""System.Int32"" Value=""0"" />
                  </Operand>
                </Convert>
              </Right>
            </CSharpAddAssign>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_18CC_52FA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_18CC_52FA() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_7492_2165()
        {
            // (Expression<Action<byte, byte>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<byte, byte>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Byte,System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Byte"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Byte"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Byte"">
      <Left>
        <Parameter Type=""System.Byte"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.Byte"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Byte,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.Byte"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Byte"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.Byte]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Byte"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7492_2165();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7492_2165() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_6A94_CEB8()
        {
            // (Expression<Action<sbyte, sbyte>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<sbyte, sbyte>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.SByte,System.SByte]"">
  <Parameters>
    <Parameter Type=""System.SByte"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.SByte"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.SByte"">
      <Left>
        <Parameter Type=""System.SByte"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.SByte"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.SByte,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.SByte"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.SByte"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.SByte]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.SByte"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6A94_CEB8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6A94_CEB8() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_2F5D_78CC()
        {
            // (Expression<Action<short, short>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<short, short>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int16,System.Int16]"">
  <Parameters>
    <Parameter Type=""System.Int16"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int16"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int16"">
      <Left>
        <Parameter Type=""System.Int16"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.Int16"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Int16,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.Int16"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int16"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.Int16]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int16"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2F5D_78CC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2F5D_78CC() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_EAFD_44CE()
        {
            // (Expression<Action<ushort, ushort>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<ushort, ushort>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.UInt16,System.UInt16]"">
  <Parameters>
    <Parameter Type=""System.UInt16"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.UInt16"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.UInt16"">
      <Left>
        <Parameter Type=""System.UInt16"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.UInt16"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.UInt16,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.UInt16"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.UInt16"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.UInt16]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.UInt16"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EAFD_44CE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EAFD_44CE() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_AC8A_1D36()
        {
            // (Expression<Action<char, char>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<char, char>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Char,System.Char]"">
  <Parameters>
    <Parameter Type=""System.Char"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Char"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Char"">
      <Left>
        <Parameter Type=""System.Char"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Convert Type=""System.Int32"">
          <Operand>
            <Parameter Type=""System.Char"" Id=""1"" Name=""y"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Char,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.Char"" Id=""2"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Char"" Id=""2"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.Char]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Char"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AC8A_1D36();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AC8A_1D36() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_C8F7_9590()
        {
            // (Expression<Action<int, int>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<int, int>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int32,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int32"">
      <Left>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C8F7_9590();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C8F7_9590() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_3859_C424()
        {
            // (Expression<Action<uint, uint>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<uint, uint>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.UInt32,System.UInt32]"">
  <Parameters>
    <Parameter Type=""System.UInt32"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.UInt32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.UInt32"">
      <Left>
        <Parameter Type=""System.UInt32"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.UInt32"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3859_C424();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3859_C424() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_3AC9_2A4D()
        {
            // (Expression<Action<long, long>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<long, long>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Int64,System.Int64]"">
  <Parameters>
    <Parameter Type=""System.Int64"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int64"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Int64"">
      <Left>
        <Parameter Type=""System.Int64"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Int64"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3AC9_2A4D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3AC9_2A4D() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_93FC_E500()
        {
            // (Expression<Action<ulong, ulong>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<ulong, ulong>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.UInt64,System.UInt64]"">
  <Parameters>
    <Parameter Type=""System.UInt64"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.UInt64"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.UInt64"">
      <Left>
        <Parameter Type=""System.UInt64"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.UInt64"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_93FC_E500();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_93FC_E500() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_1D2F_7FC2()
        {
            // (Expression<Action<float, float>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<float, float>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Single,System.Single]"">
  <Parameters>
    <Parameter Type=""System.Single"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Single"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Single"">
      <Left>
        <Parameter Type=""System.Single"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Single"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1D2F_7FC2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1D2F_7FC2() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_1EDE_F8E3()
        {
            // (Expression<Action<double, double>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<double, double>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Double,System.Double]"">
  <Parameters>
    <Parameter Type=""System.Double"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Double"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Double"">
      <Left>
        <Parameter Type=""System.Double"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Double"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1EDE_F8E3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1EDE_F8E3() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_A171_560A()
        {
            // (Expression<Action<decimal, decimal>>)((x, y) => { x += y; })
            var actual = GetDebugView(@"(Expression<Action<decimal, decimal>>)((x, y) => { x += y; })");
            var expected = @"
<Lambda Type=""System.Action`2[System.Decimal,System.Decimal]"">
  <Parameters>
    <Parameter Type=""System.Decimal"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Decimal"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Decimal"" Method=""System.Decimal op_Addition(System.Decimal, System.Decimal)"">
      <Left>
        <Parameter Type=""System.Decimal"" Id=""0"" Name=""x"" />
      </Left>
      <Right>
        <Parameter Type=""System.Decimal"" Id=""1"" Name=""y"" />
      </Right>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A171_560A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A171_560A() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_E00F_CAB4()
        {
            // (Expression<Func<Action, Action, Action>>)((a, b) => a += b)
            var actual = GetDebugView(@"(Expression<Func<Action, Action, Action>>)((a, b) => a += b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Action,System.Action,System.Action]"">
  <Parameters>
    <Parameter Type=""System.Action"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Action"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Action"" Method=""System.Delegate Combine(System.Delegate, System.Delegate)"">
      <Left>
        <Parameter Type=""System.Action"" Id=""0"" Name=""a"" />
      </Left>
      <Right>
        <Parameter Type=""System.Action"" Id=""1"" Name=""b"" />
      </Right>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Delegate,System.Action]"">
          <Parameters>
            <Parameter Type=""System.Delegate"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Action"">
              <Operand>
                <Parameter Type=""System.Delegate"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E00F_CAB4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E00F_CAB4() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_1D70_2F15()
        {
            // (Expression<Func<Action, Action, Action>>)((a, b) => a -= b)
            var actual = GetDebugView(@"(Expression<Func<Action, Action, Action>>)((a, b) => a -= b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Action,System.Action,System.Action]"">
  <Parameters>
    <Parameter Type=""System.Action"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Action"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.Action"" Method=""System.Delegate Remove(System.Delegate, System.Delegate)"">
      <Left>
        <Parameter Type=""System.Action"" Id=""0"" Name=""a"" />
      </Left>
      <Right>
        <Parameter Type=""System.Action"" Id=""1"" Name=""b"" />
      </Right>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Delegate,System.Action]"">
          <Parameters>
            <Parameter Type=""System.Delegate"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Action"">
              <Operand>
                <Parameter Type=""System.Delegate"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1D70_2F15();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1D70_2F15() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_530B_F222()
        {
            // (Expression<Func<ConsoleColor, ConsoleColor>>)(c => c += 1)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor, ConsoleColor>>)(c => c += 1)");
            var expected = @"
<Lambda Type=""System.Func`2[System.ConsoleColor,System.ConsoleColor]"">
  <Parameters>
    <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.ConsoleColor"">
      <Left>
        <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.ConsoleColor,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.ConsoleColor"" Id=""1"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.ConsoleColor"" Id=""1"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.ConsoleColor]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.ConsoleColor"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_530B_F222();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_530B_F222() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_C266_EBD1()
        {
            // (Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c += 1)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c += 1)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.ConsoleColor]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpAddAssign Type=""System.Nullable`1[System.ConsoleColor]"" IsLifted=""true"" IsLiftedToNull=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
      </Left>
      <Right>
        <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""1"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
              <Operand>
                <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""1"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Nullable`1[System.Int32],System.Nullable`1[System.ConsoleColor]]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Nullable`1[System.ConsoleColor]"" IsLifted=""true"" IsLiftedToNull=""true"">
              <Operand>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C266_EBD1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C266_EBD1() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_E15F_B595()
        {
            // (Expression<Func<ConsoleColor, ConsoleColor>>)(c => c -= 1)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor, ConsoleColor>>)(c => c -= 1)");
            var expected = @"
<Lambda Type=""System.Func`2[System.ConsoleColor,System.ConsoleColor]"">
  <Parameters>
    <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.ConsoleColor"">
      <Left>
        <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
      </Left>
      <Right>
        <Constant Type=""System.Int32"" Value=""1"" />
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.ConsoleColor,System.Int32]"">
          <Parameters>
            <Parameter Type=""System.ConsoleColor"" Id=""1"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.ConsoleColor"" Id=""1"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Int32,System.ConsoleColor]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.ConsoleColor"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E15F_B595();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E15F_B595() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_2C91_A398()
        {
            // (Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c -= 1)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c -= 1)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.ConsoleColor]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpSubtractAssign Type=""System.Nullable`1[System.ConsoleColor]"" IsLifted=""true"" IsLiftedToNull=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
      </Left>
      <Right>
        <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
          <Operand>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Operand>
        </Convert>
      </Right>
      <LeftConversion>
        <Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""1"" Name=""__left"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
              <Operand>
                <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""1"" Name=""__left"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </LeftConversion>
      <FinalConversion>
        <Lambda Type=""System.Func`2[System.Nullable`1[System.Int32],System.Nullable`1[System.ConsoleColor]]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""__result"" />
          </Parameters>
          <Body>
            <Convert Type=""System.Nullable`1[System.ConsoleColor]"" IsLifted=""true"" IsLiftedToNull=""true"">
              <Operand>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""__result"" />
              </Operand>
            </Convert>
          </Body>
        </Lambda>
      </FinalConversion>
    </CSharpSubtractAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2C91_A398();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2C91_A398() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_00CF_F74C()
        {
            // (Expression<Action<int>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Int32"">
      <Operand>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_00CF_F74C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_00CF_F74C() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_9C51_A974()
        {
            // (Expression<Action<int>>)(x => { x--; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { x--; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostDecrementAssign Type=""System.Int32"">
      <Operand>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostDecrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9C51_A974();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9C51_A974() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_2115_988C()
        {
            // (Expression<Action<int>>)(x => { ++x; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { ++x; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreIncrementAssign Type=""System.Int32"">
      <Operand>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPreIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2115_988C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2115_988C() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_09D9_F0A4()
        {
            // (Expression<Action<int>>)(x => { --x; })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { --x; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssign Type=""System.Int32"">
      <Operand>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPreDecrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_09D9_F0A4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_09D9_F0A4() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_C9BD_6C2B()
        {
            // (Expression<Action<int>>)(x => { checked { x++; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x++; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpPostIncrementAssignChecked Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Operand>
            </CSharpPostIncrementAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C9BD_6C2B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C9BD_6C2B() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_1C12_C262()
        {
            // (Expression<Action<int>>)(x => { checked { x--; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { x--; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpPostDecrementAssignChecked Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Operand>
            </CSharpPostDecrementAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1C12_C262();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1C12_C262() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_B58C_BABA()
        {
            // (Expression<Action<int>>)(x => { checked { ++x; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { ++x; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpPreIncrementAssignChecked Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Operand>
            </CSharpPreIncrementAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B58C_BABA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B58C_BABA() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_2817_4DD1()
        {
            // (Expression<Action<int>>)(x => { checked { --x; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { checked { --x; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Block Type=""System.Int32"">
          <Expressions>
            <CSharpPreDecrementAssignChecked Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
              </Operand>
            </CSharpPreDecrementAssignChecked>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2817_4DD1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2817_4DD1() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_64E0_6F8F()
        {
            // (Expression<Action<byte>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<byte>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Byte"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Byte"">
      <Operand>
        <Parameter Type=""System.Byte"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_64E0_6F8F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_64E0_6F8F() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_73AB_B92F()
        {
            // (Expression<Action<sbyte>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<sbyte>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.SByte]"">
  <Parameters>
    <Parameter Type=""System.SByte"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.SByte"">
      <Operand>
        <Parameter Type=""System.SByte"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_73AB_B92F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_73AB_B92F() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_F997_C431()
        {
            // (Expression<Action<short>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<short>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int16]"">
  <Parameters>
    <Parameter Type=""System.Int16"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Int16"">
      <Operand>
        <Parameter Type=""System.Int16"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F997_C431();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F997_C431() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_C633_B342()
        {
            // (Expression<Action<ushort>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<ushort>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.UInt16]"">
  <Parameters>
    <Parameter Type=""System.UInt16"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.UInt16"">
      <Operand>
        <Parameter Type=""System.UInt16"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C633_B342();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C633_B342() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_6BBF_B4A0()
        {
            // (Expression<Action<char>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<char>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Char]"">
  <Parameters>
    <Parameter Type=""System.Char"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Char"">
      <Operand>
        <Parameter Type=""System.Char"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6BBF_B4A0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6BBF_B4A0() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_893C_BAAE()
        {
            // (Expression<Action<uint>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<uint>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.UInt32]"">
  <Parameters>
    <Parameter Type=""System.UInt32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.UInt32"">
      <Operand>
        <Parameter Type=""System.UInt32"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_893C_BAAE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_893C_BAAE() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_A586_E8F9()
        {
            // (Expression<Action<long>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<long>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int64]"">
  <Parameters>
    <Parameter Type=""System.Int64"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Int64"">
      <Operand>
        <Parameter Type=""System.Int64"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A586_E8F9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A586_E8F9() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_B251_AFB5()
        {
            // (Expression<Action<ulong>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<ulong>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.UInt64]"">
  <Parameters>
    <Parameter Type=""System.UInt64"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.UInt64"">
      <Operand>
        <Parameter Type=""System.UInt64"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B251_AFB5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B251_AFB5() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_98BA_6FFB()
        {
            // (Expression<Action<float>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<float>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Single]"">
  <Parameters>
    <Parameter Type=""System.Single"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Single"">
      <Operand>
        <Parameter Type=""System.Single"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_98BA_6FFB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_98BA_6FFB() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_5002_049B()
        {
            // (Expression<Action<double>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<double>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Double]"">
  <Parameters>
    <Parameter Type=""System.Double"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Double"">
      <Operand>
        <Parameter Type=""System.Double"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5002_049B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5002_049B() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_2E6E_DC66()
        {
            // (Expression<Action<decimal>>)(x => { x++; })
            var actual = GetDebugView(@"(Expression<Action<decimal>>)(x => { x++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Decimal]"">
  <Parameters>
    <Parameter Type=""System.Decimal"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Decimal"" Method=""System.Decimal op_Increment(System.Decimal)"">
      <Operand>
        <Parameter Type=""System.Decimal"" Id=""0"" Name=""x"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2E6E_DC66();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2E6E_DC66() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_0162_65C6()
        {
            // (Expression<Action<StrongBox<byte>>>)(x => { x.Value++; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<byte>>>)(x => { x.Value++; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Byte]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Byte"">
      <Operand>
        <MemberAccess Type=""System.Byte"" Member=""Byte Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Expression>
        </MemberAccess>
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0162_65C6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0162_65C6() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_C668_6525()
        {
            // (Expression<Action<StrongBox<byte>>>)(x => { ++x.Value; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<byte>>>)(x => { ++x.Value; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Byte]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreIncrementAssign Type=""System.Byte"">
      <Operand>
        <MemberAccess Type=""System.Byte"" Member=""Byte Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Expression>
        </MemberAccess>
      </Operand>
    </CSharpPreIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C668_6525();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C668_6525() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_AD28_1A20()
        {
            // (Expression<Action<StrongBox<byte>>>)(x => { x.Value--; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<byte>>>)(x => { x.Value--; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Byte]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostDecrementAssign Type=""System.Byte"">
      <Operand>
        <MemberAccess Type=""System.Byte"" Member=""Byte Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Expression>
        </MemberAccess>
      </Operand>
    </CSharpPostDecrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD28_1A20();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD28_1A20() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_0D46_A139()
        {
            // (Expression<Action<StrongBox<byte>>>)(x => { --x.Value; })
            var actual = GetDebugView(@"(Expression<Action<StrongBox<byte>>>)(x => { --x.Value; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Runtime.CompilerServices.StrongBox`1[System.Byte]]"">
  <Parameters>
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssign Type=""System.Byte"">
      <Operand>
        <MemberAccess Type=""System.Byte"" Member=""Byte Value"">
          <Expression>
            <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Expression>
        </MemberAccess>
      </Operand>
    </CSharpPreDecrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0D46_A139();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0D46_A139() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_EDA6_9661()
        {
            // (Expression<Func<List<byte>, byte>>)(x => checked(x[0]++))
            var actual = GetDebugView(@"(Expression<Func<List<byte>, byte>>)(x => checked(x[0]++))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Byte],System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssignChecked Type=""System.Byte"">
      <Operand>
        <CSharpIndex Type=""System.Byte"" Indexer=""Byte Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Operand>
    </CSharpPostIncrementAssignChecked>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EDA6_9661();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EDA6_9661() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_8D15_759F()
        {
            // (Expression<Func<List<byte>, byte>>)(x => checked(++x[0]))
            var actual = GetDebugView(@"(Expression<Func<List<byte>, byte>>)(x => checked(++x[0]))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Byte],System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreIncrementAssignChecked Type=""System.Byte"">
      <Operand>
        <CSharpIndex Type=""System.Byte"" Indexer=""Byte Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Operand>
    </CSharpPreIncrementAssignChecked>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8D15_759F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8D15_759F() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_E582_3900()
        {
            // (Expression<Func<List<byte>, byte>>)(x => checked(x[0]--))
            var actual = GetDebugView(@"(Expression<Func<List<byte>, byte>>)(x => checked(x[0]--))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Byte],System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPostDecrementAssignChecked Type=""System.Byte"">
      <Operand>
        <CSharpIndex Type=""System.Byte"" Indexer=""Byte Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Operand>
    </CSharpPostDecrementAssignChecked>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E582_3900();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E582_3900() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_859E_AB64()
        {
            // (Expression<Func<List<byte>, byte>>)(x => checked(--x[0]))
            var actual = GetDebugView(@"(Expression<Func<List<byte>, byte>>)(x => checked(--x[0]))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Byte],System.Byte]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssignChecked Type=""System.Byte"">
      <Operand>
        <CSharpIndex Type=""System.Byte"" Indexer=""Byte Item [Int32]"">
          <Object>
            <Parameter Type=""System.Collections.Generic.List`1[System.Byte]"" Id=""0"" Name=""x"" />
          </Object>
          <Arguments>
            <ParameterAssignment Parameter=""Int32 index"">
              <Expression>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Expression>
            </ParameterAssignment>
          </Arguments>
        </CSharpIndex>
      </Operand>
    </CSharpPreDecrementAssignChecked>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_859E_AB64();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_859E_AB64() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_790B_3BA4()
        {
            // (Expression<Func<ConsoleColor, ConsoleColor>>)(c => c++)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor, ConsoleColor>>)(c => c++)");
            var expected = @"
<Lambda Type=""System.Func`2[System.ConsoleColor,System.ConsoleColor]"">
  <Parameters>
    <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.ConsoleColor"">
      <Operand>
        <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_790B_3BA4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_790B_3BA4() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_5B70_B34F()
        {
            // (Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c++)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c++)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.ConsoleColor]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpPostIncrementAssign Type=""System.Nullable`1[System.ConsoleColor]"">
      <Operand>
        <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
      </Operand>
    </CSharpPostIncrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5B70_B34F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5B70_B34F() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_09B1_7323()
        {
            // (Expression<Func<ConsoleColor, ConsoleColor>>)(c => --c)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor, ConsoleColor>>)(c => --c)");
            var expected = @"
<Lambda Type=""System.Func`2[System.ConsoleColor,System.ConsoleColor]"">
  <Parameters>
    <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssign Type=""System.ConsoleColor"">
      <Operand>
        <Parameter Type=""System.ConsoleColor"" Id=""0"" Name=""c"" />
      </Operand>
    </CSharpPreDecrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_09B1_7323();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_09B1_7323() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_361E_5216()
        {
            // (Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => --c)
            var actual = GetDebugView(@"(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => --c)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.ConsoleColor],System.Nullable`1[System.ConsoleColor]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
  </Parameters>
  <Body>
    <CSharpPreDecrementAssign Type=""System.Nullable`1[System.ConsoleColor]"">
      <Operand>
        <Parameter Type=""System.Nullable`1[System.ConsoleColor]"" Id=""0"" Name=""c"" />
      </Operand>
    </CSharpPreDecrementAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_361E_5216();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_361E_5216() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_7421_665F()
        {
            // (Expression<Action<Event, Action>>)((e, a) => { e.MyEvent += a; })
            var actual = GetDebugView(@"(Expression<Action<Event, Action>>)((e, a) => { e.MyEvent += a; })");
            var expected = @"
<Lambda Type=""System.Action`2[Event,System.Action]"">
  <Parameters>
    <Parameter Type=""Event"" Id=""0"" Name=""e"" />
    <Parameter Type=""System.Action"" Id=""1"" Name=""a"" />
  </Parameters>
  <Body>
    <CSharpEventAddAssign Type=""System.Void"" Event=""System.Action MyEvent"">
      <Object>
        <Parameter Type=""Event"" Id=""0"" Name=""e"" />
      </Object>
      <Handler>
        <Parameter Type=""System.Action"" Id=""1"" Name=""a"" />
      </Handler>
    </CSharpEventAddAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7421_665F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7421_665F() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_19AF_884D()
        {
            // (Expression<Action<Event, Action>>)((e, a) => { e.MyEvent -= a; })
            var actual = GetDebugView(@"(Expression<Action<Event, Action>>)((e, a) => { e.MyEvent -= a; })");
            var expected = @"
<Lambda Type=""System.Action`2[Event,System.Action]"">
  <Parameters>
    <Parameter Type=""Event"" Id=""0"" Name=""e"" />
    <Parameter Type=""System.Action"" Id=""1"" Name=""a"" />
  </Parameters>
  <Body>
    <CSharpEventSubtractAssign Type=""System.Void"" Event=""System.Action MyEvent"">
      <Object>
        <Parameter Type=""Event"" Id=""0"" Name=""e"" />
      </Object>
      <Handler>
        <Parameter Type=""System.Action"" Id=""1"" Name=""a"" />
      </Handler>
    </CSharpEventSubtractAssign>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_19AF_884D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_19AF_884D() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { /* Assert.Inconclusive(); */ Assert.True(false, "INCONCLUSIVE"); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.True(false, message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp30_Assignments
    {
        partial class Reviewed
        {
            public override void CompilerTest_F94F_ACD8() => OK();
            public override void CompilerTest_044F_D3EC() => OK();
            public override void CompilerTest_094E_F5F3() => OK();
            public override void CompilerTest_8BE1_8041() => OK();
            public override void CompilerTest_F3D0_F9A7() => OK();
            public override void CompilerTest_EB02_69E4() => OK();
            public override void CompilerTest_6EC4_AD12() => OK();
            public override void CompilerTest_7D09_A1B7() => OK();
            public override void CompilerTest_ED89_63D1() => OK();
            public override void CompilerTest_6090_4BC9() => OK();
            public override void CompilerTest_D47A_FCEE() => OK();
            public override void CompilerTest_60B4_CC06() => OK();
            public override void CompilerTest_2DAA_6C38() => OK();
            public override void CompilerTest_7F56_2B0B() => OK();
            public override void CompilerTest_27E3_F016() => OK();
            public override void CompilerTest_467C_C565() => OK();
            public override void CompilerTest_B13A_1C7B() => OK();
            public override void CompilerTest_EE3F_5608() => OK();
            public override void CompilerTest_79AE_FDED() => OK();
            public override void CompilerTest_A709_35ED() => OK();
            public override void CompilerTest_8CA7_35F4() => OK();
            public override void CompilerTest_8BFE_5348() => OK();
            public override void CompilerTest_18CC_52FA() => OK();
            public override void CompilerTest_7492_2165() => OK();
            public override void CompilerTest_6A94_CEB8() => OK();
            public override void CompilerTest_2F5D_78CC() => OK();
            public override void CompilerTest_EAFD_44CE() => OK();
            public override void CompilerTest_AC8A_1D36() => OK();
            public override void CompilerTest_C8F7_9590() => OK();
            public override void CompilerTest_3859_C424() => OK();
            public override void CompilerTest_3AC9_2A4D() => OK();
            public override void CompilerTest_93FC_E500() => OK();
            public override void CompilerTest_1D2F_7FC2() => OK();
            public override void CompilerTest_1EDE_F8E3() => OK();
            public override void CompilerTest_A171_560A() => OK();
            public override void CompilerTest_E00F_CAB4() => OK();
            public override void CompilerTest_1D70_2F15() => OK();
            public override void CompilerTest_530B_F222() => OK();
            public override void CompilerTest_C266_EBD1() => OK();
            public override void CompilerTest_E15F_B595() => OK();
            public override void CompilerTest_2C91_A398() => OK();
            public override void CompilerTest_00CF_F74C() => OK();
            public override void CompilerTest_9C51_A974() => OK();
            public override void CompilerTest_2115_988C() => OK();
            public override void CompilerTest_09D9_F0A4() => OK();
            public override void CompilerTest_C9BD_6C2B() => OK();
            public override void CompilerTest_1C12_C262() => OK();
            public override void CompilerTest_B58C_BABA() => OK();
            public override void CompilerTest_2817_4DD1() => OK();
            public override void CompilerTest_64E0_6F8F() => OK();
            public override void CompilerTest_73AB_B92F() => OK();
            public override void CompilerTest_F997_C431() => OK();
            public override void CompilerTest_C633_B342() => OK();
            public override void CompilerTest_6BBF_B4A0() => OK();
            public override void CompilerTest_893C_BAAE() => OK();
            public override void CompilerTest_A586_E8F9() => OK();
            public override void CompilerTest_B251_AFB5() => OK();
            public override void CompilerTest_98BA_6FFB() => OK();
            public override void CompilerTest_5002_049B() => OK();
            public override void CompilerTest_2E6E_DC66() => OK();
            public override void CompilerTest_0162_65C6() => OK();
            public override void CompilerTest_C668_6525() => OK();
            public override void CompilerTest_AD28_1A20() => OK();
            public override void CompilerTest_0D46_A139() => OK();
            public override void CompilerTest_EDA6_9661() => OK();
            public override void CompilerTest_8D15_759F() => OK();
            public override void CompilerTest_E582_3900() => OK();
            public override void CompilerTest_859E_AB64() => OK();
            public override void CompilerTest_790B_3BA4() => OK();
            public override void CompilerTest_5B70_B34F() => OK();
            public override void CompilerTest_09B1_7323() => OK();
            public override void CompilerTest_361E_5216() => OK();
            public override void CompilerTest_7421_665F() => OK();
            public override void CompilerTest_19AF_884D() => OK();
        }
    }
}
*/
}
