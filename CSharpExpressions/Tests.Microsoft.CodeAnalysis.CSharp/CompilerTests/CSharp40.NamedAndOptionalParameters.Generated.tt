// Prototyping extended expression trees for C#.
//
// bartde - November 2015

<#
// NB: When ading a test, it will be *SKIPPED* by default. In order to enable it, review the generated
//     test code and go to the .Verify.cs file to add an entry acknowledging the manual inspection by
//     providing an outcome.

// NB: Editing and saving this file can take a *VERY LONG* time because it invokes the C# compiler at
//     text template processing time. Be patient while Visual Studio appears to hang.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#
var name = "CSharp40_NamedAndOptionalParameters";

var exprs = new[]
{
    // Named parameters for calls
    "(Expression<Func<int>>)(() => Math.Abs(value: 42))",
    "(Expression<Func<string, string>>)(s => s.Substring(startIndex: 42))",
    "(Expression<Func<string, string>>)(s => s.Substring(startIndex: 42, length: 43))",
    "(Expression<Func<string, string>>)(s => s.Substring(length: 43, startIndex: 42))",
    "(Expression<Func<string, string>>)(s => s.Substring(42, length: 43))",
    // TODO: ref/out

    // Named parameters for constructors
    "(Expression<Func<TimeSpan>>)(() => new TimeSpan(ticks: 42L))",
    "(Expression<Func<TimeSpan>>)(() => new TimeSpan(seconds: 3, minutes: 2, hours: 1))",
    // TODO: ref/out

    // Named parameters for indexers
    "(Expression<Func<List<int>, int>>)(xs => xs[index: 42])",
    // TODO: ref/out

    // Named parameters for invocations
    "(Expression<Action<Action<int>>>)(a => a(obj: 42))",
    "(Expression<Action<Action<string, int, bool>>>)(a => a(arg2: 42, arg1: \"foo\", arg3: false))",
    // TODO: ref/out

    // TODO: optional parameters
};
#>
<#@ include file="CompilerTests.t4" #>