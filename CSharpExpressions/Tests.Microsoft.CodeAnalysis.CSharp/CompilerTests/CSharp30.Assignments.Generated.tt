// Prototyping extended expression trees for C#.
//
// bartde - November 2015

<#
// NB: When ading a test, it will be *SKIPPED* by default. In order to enable it, review the generated
//     test code and go to the .Verify.cs file to add an entry acknowledging the manual inspection by
//     providing an outcome.

// NB: Editing and saving this file can take a *VERY LONG* time because it invokes the C# compiler at
//     text template processing time. Be patient while Visual Studio appears to hang.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#
var name = "CSharp30_Assignments";

var exprs = new[]
{
    // Assignments binary
    "(Expression<Action<int>>)(x => { var y = x; })",
    "(Expression<Action<int>>)(x => { x += 1; })",
    "(Expression<Action<int>>)(x => { x -= 1; })",
    "(Expression<Action<int>>)(x => { x *= 1; })",
    "(Expression<Action<int>>)(x => { x /= 1; })",
    "(Expression<Action<int>>)(x => { x %= 1; })",
    "(Expression<Action<int>>)(x => { x &= 1; })",
    "(Expression<Action<int>>)(x => { x |= 1; })",
    "(Expression<Action<int>>)(x => { x ^= 1; })",
    "(Expression<Action<int>>)(x => { x <<= 1; })",
    "(Expression<Action<int>>)(x => { x >>= 1; })",
    "(Expression<Action<TimeSpan>>)(t => { t += TimeSpan.Zero; })",
    "(Expression<Action<DateTime>>)(d => { d -= TimeSpan.Zero; })",
    "(Expression<Action<int>>)(x => { checked { x += 1; } })",
    "(Expression<Action<int>>)(x => { checked { x -= 1; } })",
    "(Expression<Action<int>>)(x => { checked { x *= 1; } })",
    "(Expression<Action<int?>>)(x => { x += 1; })",
    "(Expression<Action<StrongBox<int>>>)(xs => { xs.Value += 1; })",
    "(Expression<Action<List<int>>>)(xs => { xs[0] += 1; })",
    "(Expression<Action<string>>)(s => { s += \"!\"; })",
    "(Expression<Action<string>>)(s => { s += 0; })",
    "(Expression<Action<string>>)(s => { checked { s += \"!\"; } })",
    "(Expression<Action<string>>)(s => { checked { s += 0; } })",
    "(Expression<Action<byte, byte>>)((x, y) => { x += y; })",
    "(Expression<Action<sbyte, sbyte>>)((x, y) => { x += y; })",
    "(Expression<Action<short, short>>)((x, y) => { x += y; })",
    "(Expression<Action<ushort, ushort>>)((x, y) => { x += y; })",
    "(Expression<Action<char, char>>)((x, y) => { x += y; })",
    "(Expression<Action<int, int>>)((x, y) => { x += y; })",
    "(Expression<Action<uint, uint>>)((x, y) => { x += y; })",
    "(Expression<Action<long, long>>)((x, y) => { x += y; })",
    "(Expression<Action<ulong, ulong>>)((x, y) => { x += y; })",
    "(Expression<Action<float, float>>)((x, y) => { x += y; })",
    "(Expression<Action<double, double>>)((x, y) => { x += y; })",
    "(Expression<Action<decimal, decimal>>)((x, y) => { x += y; })",
    "(Expression<Func<Action, Action, Action>>)((a, b) => a += b)",
    "(Expression<Func<Action, Action, Action>>)((a, b) => a -= b)",
    "(Expression<Func<ConsoleColor, ConsoleColor>>)(c => c += 1)",
    "(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c += 1)",
    "(Expression<Func<ConsoleColor, ConsoleColor>>)(c => c -= 1)",
    "(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c -= 1)",

    // Assignments unary
    "(Expression<Action<int>>)(x => { x++; })",
    "(Expression<Action<int>>)(x => { x--; })",
    "(Expression<Action<int>>)(x => { ++x; })",
    "(Expression<Action<int>>)(x => { --x; })",
    "(Expression<Action<int>>)(x => { checked { x++; } })",
    "(Expression<Action<int>>)(x => { checked { x--; } })",
    "(Expression<Action<int>>)(x => { checked { ++x; } })",
    "(Expression<Action<int>>)(x => { checked { --x; } })",
    "(Expression<Action<byte>>)(x => { x++; })",
    "(Expression<Action<sbyte>>)(x => { x++; })",
    "(Expression<Action<short>>)(x => { x++; })",
    "(Expression<Action<ushort>>)(x => { x++; })",
    "(Expression<Action<char>>)(x => { x++; })",
    "(Expression<Action<uint>>)(x => { x++; })",
    "(Expression<Action<long>>)(x => { x++; })",
    "(Expression<Action<ulong>>)(x => { x++; })",
    "(Expression<Action<float>>)(x => { x++; })",
    "(Expression<Action<double>>)(x => { x++; })",
    "(Expression<Action<decimal>>)(x => { x++; })",
    "(Expression<Action<StrongBox<byte>>>)(x => { x.Value++; })",
    "(Expression<Action<StrongBox<byte>>>)(x => { ++x.Value; })",
    "(Expression<Action<StrongBox<byte>>>)(x => { x.Value--; })",
    "(Expression<Action<StrongBox<byte>>>)(x => { --x.Value; })",
    "(Expression<Func<List<byte>, byte>>)(x => checked(x[0]++))",
    "(Expression<Func<List<byte>, byte>>)(x => checked(++x[0]))",
    "(Expression<Func<List<byte>, byte>>)(x => checked(x[0]--))",
    "(Expression<Func<List<byte>, byte>>)(x => checked(--x[0]))",
    "(Expression<Func<ConsoleColor, ConsoleColor>>)(c => c++)",
    "(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => c++)",
    "(Expression<Func<ConsoleColor, ConsoleColor>>)(c => --c)",
    "(Expression<Func<ConsoleColor?, ConsoleColor?>>)(c => --c)",
};
#>
<#@ include file="CompilerTests.t4" #>