// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Xunit;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    public partial class CompilerTests_CSharp30_Statements_ForEach
    {
        [Fact]
        public void CompilerTest_245A_D038()
        {
            // (Expression<Action<string>>)(s => { foreach (var c in s) Console.Write(c); })
            var actual = GetDebugView(@"(Expression<Action<string>>)(s => { foreach (var c in s) Console.Write(c); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <EnumeratorInfo>
            <EnumeratorInfo IsAsync=""false"" CollectionType=""System.String"" ElementType=""System.Char"" NeedsDisposal=""true"" Current=""Char Current"">
              <GetEnumerator>
                <Lambda Type=""System.Func`2[System.String,System.CharEnumerator]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""1"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.CharEnumerator"" Method=""System.CharEnumerator GetEnumerator()"">
                      <Object>
                        <Parameter Type=""System.String"" Id=""1"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </GetEnumerator>
              <MoveNext>
                <Lambda Type=""System.Func`2[System.CharEnumerator,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.CharEnumerator"" Id=""2"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Boolean"" Method=""Boolean MoveNext()"">
                      <Object>
                        <Parameter Type=""System.CharEnumerator"" Id=""2"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </MoveNext>
              <CurrentConversion>
                <Lambda Type=""System.Func`2[System.Char,System.Char]"">
                  <Parameters>
                    <Parameter Type=""System.Char"" Id=""3"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Char"" Id=""3"" Name=""p"" />
                  </Body>
                </Lambda>
              </CurrentConversion>
            </EnumeratorInfo>
          </EnumeratorInfo>
          <Variables>
            <Parameter Type=""System.Char"" Id=""4"" Name=""c"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Parameter Type=""System.Char"" Id=""4"" Name=""c"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""7"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_245A_D038();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_245A_D038() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_DA7B_94B8()
        {
            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32[]]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <EnumeratorInfo>
            <EnumeratorInfo IsAsync=""false"" CollectionType=""System.Collections.IEnumerable"" ElementType=""System.Int32"" NeedsDisposal=""true"" Current=""System.Object Current"">
              <GetEnumerator>
                <Lambda Type=""System.Func`2[System.Collections.IEnumerable,System.Collections.IEnumerator]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.IEnumerable"" Id=""1"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Collections.IEnumerator"" Method=""System.Collections.IEnumerator GetEnumerator()"">
                      <Object>
                        <Parameter Type=""System.Collections.IEnumerable"" Id=""1"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </GetEnumerator>
              <MoveNext>
                <Lambda Type=""System.Func`2[System.Collections.IEnumerator,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Boolean"" Method=""Boolean MoveNext()"">
                      <Object>
                        <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </MoveNext>
              <CurrentConversion>
                <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Convert Type=""System.Int32"">
                      <Operand>
                        <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                      </Operand>
                    </Convert>
                  </Body>
                </Lambda>
              </CurrentConversion>
            </EnumeratorInfo>
          </EnumeratorInfo>
          <Variables>
            <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""7"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DA7B_94B8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DA7B_94B8() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_34B8_1000()
        {
            // (Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object[]]"">
  <Parameters>
    <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <EnumeratorInfo>
            <EnumeratorInfo IsAsync=""false"" CollectionType=""System.Collections.IEnumerable"" ElementType=""System.Object"" NeedsDisposal=""true"" Current=""System.Object Current"">
              <GetEnumerator>
                <Lambda Type=""System.Func`2[System.Collections.IEnumerable,System.Collections.IEnumerator]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.IEnumerable"" Id=""1"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Collections.IEnumerator"" Method=""System.Collections.IEnumerator GetEnumerator()"">
                      <Object>
                        <Parameter Type=""System.Collections.IEnumerable"" Id=""1"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </GetEnumerator>
              <MoveNext>
                <Lambda Type=""System.Func`2[System.Collections.IEnumerator,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Boolean"" Method=""Boolean MoveNext()"">
                      <Object>
                        <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </MoveNext>
              <CurrentConversion>
                <Lambda Type=""System.Func`2[System.Object,System.Object]"">
                  <Parameters>
                    <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                  </Body>
                </Lambda>
              </CurrentConversion>
            </EnumeratorInfo>
          </EnumeratorInfo>
          <Variables>
            <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
          </Variables>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""5"" Name=""__element"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""5"" Name=""__element"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""7"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""8"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_34B8_1000();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_34B8_1000() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_3958_BEB6()
        {
            // (Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.IEnumerable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.IEnumerable`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <EnumeratorInfo>
            <EnumeratorInfo IsAsync=""false"" CollectionType=""System.Collections.Generic.IEnumerable`1[System.Int32]"" ElementType=""System.Int32"" NeedsDisposal=""true"" Current=""Int32 Current"">
              <GetEnumerator>
                <Lambda Type=""System.Func`2[System.Collections.Generic.IEnumerable`1[System.Int32],System.Collections.Generic.IEnumerator`1[System.Int32]]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.Generic.IEnumerable`1[System.Int32]"" Id=""1"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Collections.Generic.IEnumerator`1[System.Int32]"" Method=""System.Collections.Generic.IEnumerator`1[System.Int32] GetEnumerator()"">
                      <Object>
                        <Parameter Type=""System.Collections.Generic.IEnumerable`1[System.Int32]"" Id=""1"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </GetEnumerator>
              <MoveNext>
                <Lambda Type=""System.Func`2[System.Collections.Generic.IEnumerator`1[System.Int32],System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.Generic.IEnumerator`1[System.Int32]"" Id=""2"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Boolean"" Method=""Boolean MoveNext()"">
                      <Object>
                        <Parameter Type=""System.Collections.Generic.IEnumerator`1[System.Int32]"" Id=""2"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </MoveNext>
              <CurrentConversion>
                <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                  </Body>
                </Lambda>
              </CurrentConversion>
            </EnumeratorInfo>
          </EnumeratorInfo>
          <Variables>
            <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Collections.Generic.IEnumerable`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""7"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3958_BEB6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3958_BEB6() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_1525_A28E()
        {
            // (Expression<Action<List<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<List<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.List`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <EnumeratorInfo>
            <EnumeratorInfo IsAsync=""false"" CollectionType=""System.Collections.Generic.List`1[System.Int32]"" ElementType=""System.Int32"" NeedsDisposal=""true"" Current=""Int32 Current"">
              <GetEnumerator>
                <Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Collections.Generic.List`1+Enumerator[System.Int32]]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Collections.Generic.List`1+Enumerator[System.Int32]"" Method=""Enumerator GetEnumerator()"">
                      <Object>
                        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""1"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </GetEnumerator>
              <MoveNext>
                <Lambda Type=""System.Func`2[System.Collections.Generic.List`1+Enumerator[System.Int32],System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.Generic.List`1+Enumerator[System.Int32]"" Id=""2"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Boolean"" Method=""Boolean MoveNext()"">
                      <Object>
                        <Parameter Type=""System.Collections.Generic.List`1+Enumerator[System.Int32]"" Id=""2"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </MoveNext>
              <CurrentConversion>
                <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                  </Body>
                </Lambda>
              </CurrentConversion>
            </EnumeratorInfo>
          </EnumeratorInfo>
          <Variables>
            <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""7"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1525_A28E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1525_A28E() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_720D_F421()
        {
            // (Expression<Action<IList<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<IList<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.Generic.IList`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.IList`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <EnumeratorInfo>
            <EnumeratorInfo IsAsync=""false"" CollectionType=""System.Collections.Generic.IList`1[System.Int32]"" ElementType=""System.Int32"" NeedsDisposal=""true"" Current=""Int32 Current"">
              <GetEnumerator>
                <Lambda Type=""System.Func`2[System.Collections.Generic.IList`1[System.Int32],System.Collections.Generic.IEnumerator`1[System.Int32]]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.Generic.IList`1[System.Int32]"" Id=""1"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Collections.Generic.IEnumerator`1[System.Int32]"" Method=""System.Collections.Generic.IEnumerator`1[System.Int32] GetEnumerator()"">
                      <Object>
                        <Parameter Type=""System.Collections.Generic.IList`1[System.Int32]"" Id=""1"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </GetEnumerator>
              <MoveNext>
                <Lambda Type=""System.Func`2[System.Collections.Generic.IEnumerator`1[System.Int32],System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.Generic.IEnumerator`1[System.Int32]"" Id=""2"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Boolean"" Method=""Boolean MoveNext()"">
                      <Object>
                        <Parameter Type=""System.Collections.Generic.IEnumerator`1[System.Int32]"" Id=""2"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </MoveNext>
              <CurrentConversion>
                <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                  </Body>
                </Lambda>
              </CurrentConversion>
            </EnumeratorInfo>
          </EnumeratorInfo>
          <Variables>
            <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Collections.Generic.IList`1[System.Int32]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""7"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_720D_F421();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_720D_F421() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_0041_CDCE()
        {
            // (Expression<Action<ArrayList>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<ArrayList>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Collections.ArrayList]"">
  <Parameters>
    <Parameter Type=""System.Collections.ArrayList"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <EnumeratorInfo>
            <EnumeratorInfo IsAsync=""false"" CollectionType=""System.Collections.ArrayList"" ElementType=""System.Object"" NeedsDisposal=""true"" Current=""System.Object Current"">
              <GetEnumerator>
                <Lambda Type=""System.Func`2[System.Collections.ArrayList,System.Collections.IEnumerator]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.ArrayList"" Id=""1"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Collections.IEnumerator"" Method=""System.Collections.IEnumerator GetEnumerator()"">
                      <Object>
                        <Parameter Type=""System.Collections.ArrayList"" Id=""1"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </GetEnumerator>
              <MoveNext>
                <Lambda Type=""System.Func`2[System.Collections.IEnumerator,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Boolean"" Method=""Boolean MoveNext()"">
                      <Object>
                        <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </MoveNext>
              <CurrentConversion>
                <Lambda Type=""System.Func`2[System.Object,System.Object]"">
                  <Parameters>
                    <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                  </Body>
                </Lambda>
              </CurrentConversion>
            </EnumeratorInfo>
          </EnumeratorInfo>
          <Variables>
            <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
          </Variables>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""5"" Name=""__element"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""5"" Name=""__element"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <Parameter Type=""System.Collections.ArrayList"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""7"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""8"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0041_CDCE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0041_CDCE() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_AE67_70A6()
        {
            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) { if (x == 5) continue; if (x == 8) break; } })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) { if (x == 5) continue; if (x == 8) break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32[]]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <EnumeratorInfo>
            <EnumeratorInfo IsAsync=""false"" CollectionType=""System.Collections.IEnumerable"" ElementType=""System.Int32"" NeedsDisposal=""true"" Current=""System.Object Current"">
              <GetEnumerator>
                <Lambda Type=""System.Func`2[System.Collections.IEnumerable,System.Collections.IEnumerator]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.IEnumerable"" Id=""1"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Collections.IEnumerator"" Method=""System.Collections.IEnumerator GetEnumerator()"">
                      <Object>
                        <Parameter Type=""System.Collections.IEnumerable"" Id=""1"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </GetEnumerator>
              <MoveNext>
                <Lambda Type=""System.Func`2[System.Collections.IEnumerator,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Boolean"" Method=""Boolean MoveNext()"">
                      <Object>
                        <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </MoveNext>
              <CurrentConversion>
                <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Convert Type=""System.Int32"">
                      <Operand>
                        <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                      </Operand>
                    </Convert>
                  </Body>
                </Lambda>
              </CurrentConversion>
            </EnumeratorInfo>
          </EnumeratorInfo>
          <Variables>
            <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
          </Variables>
          <Collection>
            <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""5"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Continue"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""5"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
                <Conditional Type=""System.Void"">
                  <Test>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
                      </Left>
                      <Right>
                        <Constant Type=""System.Int32"" Value=""8"" />
                      </Right>
                    </Equal>
                  </Test>
                  <IfTrue>
                    <Goto Type=""System.Void"" Kind=""Break"">
                      <Target>
                        <LabelTarget Type=""System.Void"" Id=""6"" />
                      </Target>
                    </Goto>
                  </IfTrue>
                  <IfFalse>
                    <Default Type=""System.Void"" />
                  </IfFalse>
                </Conditional>
              </Expressions>
            </Block>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""5"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""7"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AE67_70A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AE67_70A6() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_8AE9_1642()
        {
            // (Expression<Action<dynamic>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<dynamic>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <EnumeratorInfo>
            <EnumeratorInfo IsAsync=""false"" CollectionType=""System.Collections.IEnumerable"" ElementType=""System.Object"" NeedsDisposal=""true"" Current=""System.Object Current"">
              <GetEnumerator>
                <Lambda Type=""System.Func`2[System.Collections.IEnumerable,System.Collections.IEnumerator]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.IEnumerable"" Id=""1"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Collections.IEnumerator"" Method=""System.Collections.IEnumerator GetEnumerator()"">
                      <Object>
                        <Parameter Type=""System.Collections.IEnumerable"" Id=""1"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </GetEnumerator>
              <MoveNext>
                <Lambda Type=""System.Func`2[System.Collections.IEnumerator,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Boolean"" Method=""Boolean MoveNext()"">
                      <Object>
                        <Parameter Type=""System.Collections.IEnumerator"" Id=""2"" Name=""t"" />
                      </Object>
                      <Arguments />
                    </Call>
                  </Body>
                </Lambda>
              </MoveNext>
              <CurrentConversion>
                <Lambda Type=""System.Func`2[System.Object,System.Object]"">
                  <Parameters>
                    <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Object"" Id=""3"" Name=""p"" />
                  </Body>
                </Lambda>
              </CurrentConversion>
            </EnumeratorInfo>
          </EnumeratorInfo>
          <Variables>
            <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
          </Variables>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""5"" Name=""__element"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""5"" Name=""__element"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <CSharpDynamicConvert Type=""System.Collections.IEnumerable"" Context=""Expressions"">
              <Expression>
                <Parameter Type=""System.Object"" Id=""0"" Name=""xs"" />
              </Expression>
            </CSharpDynamicConvert>
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""4"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""7"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""8"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8AE9_1642();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8AE9_1642() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { /* Assert.Inconclusive(); */ Assert.Fail("INCONCLUSIVE"); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp30_Statements_ForEach
    {
        partial class Reviewed
        {
            public override void CompilerTest_245A_D038() => OK();
            public override void CompilerTest_DA7B_94B8() => OK();
            public override void CompilerTest_34B8_1000() => OK();
            public override void CompilerTest_3958_BEB6() => OK();
            public override void CompilerTest_1525_A28E() => OK();
            public override void CompilerTest_720D_F421() => OK();
            public override void CompilerTest_0041_CDCE() => OK();
            public override void CompilerTest_AE67_70A6() => OK();
            public override void CompilerTest_8AE9_1642() => OK();
        }
    }
}
*/
}
