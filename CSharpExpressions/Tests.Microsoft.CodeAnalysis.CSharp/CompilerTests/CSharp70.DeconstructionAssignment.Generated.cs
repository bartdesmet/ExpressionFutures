// Prototyping extended expression trees for C#.
//
// bartde - December 2021

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    [TestClass]
    public partial class CompilerTests_CSharp70_DeconstructionAssignment
    {
        [TestMethod]
        public void CompilerTest_B78B_4415()
        {
            // (Expression<Action<(int, int)>>)(t => { (int x, int y) = t; })
            var actual = GetDebugView(@"(Expression<Action<(int, int)>>)(t => { (int x, int y) = t; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.ValueTuple`2[System.Int32,System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
        <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
      </Variables>
      <Statements>
        <CSharpDeconstructionAssignment Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
          <Left>
            <TupleLiteral Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
              <Arguments>
                <Argument Name=""x"">
                  <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                </Argument>
                <Argument Name=""y"">
                  <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
                </Argument>
              </Arguments>
            </TupleLiteral>
          </Left>
          <Right>
            <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""0"" Name=""t"" />
          </Right>
          <Conversion>
            <DeconstructionConversion>
              <Deconstruct />
              <Conversions>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
              </Conversions>
            </DeconstructionConversion>
          </Conversion>
        </CSharpDeconstructionAssignment>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B78B_4415();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B78B_4415() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_1D1C_97F0()
        {
            // (Expression<Action<(int, int)>>)(t => { (int? x, long y) = t; })
            var actual = GetDebugView(@"(Expression<Action<(int, int)>>)(t => { (int? x, long y) = t; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.ValueTuple`2[System.Int32,System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""x"" />
        <Parameter Type=""System.Int64"" Id=""2"" Name=""y"" />
      </Variables>
      <Statements>
        <CSharpDeconstructionAssignment Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.Int64]"">
          <Left>
            <TupleLiteral Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.Int64]"">
              <Arguments>
                <Argument Name=""x"">
                  <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""x"" />
                </Argument>
                <Argument Name=""y"">
                  <Parameter Type=""System.Int64"" Id=""2"" Name=""y"" />
                </Argument>
              </Arguments>
            </TupleLiteral>
          </Left>
          <Right>
            <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""0"" Name=""t"" />
          </Right>
          <Conversion>
            <DeconstructionConversion>
              <Deconstruct />
              <Conversions>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.Int32,System.Nullable`1[System.Int32]]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
                          <Operand>
                            <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                          </Operand>
                        </Convert>
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.Int32,System.Int64]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Convert Type=""System.Int64"">
                          <Operand>
                            <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                          </Operand>
                        </Convert>
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
              </Conversions>
            </DeconstructionConversion>
          </Conversion>
        </CSharpDeconstructionAssignment>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1D1C_97F0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1D1C_97F0() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6DA3_CACF()
        {
            // (Expression<Action<(int, (bool, char))>>)(t => { var (x, bc) = t; })
            var actual = GetDebugView(@"(Expression<Action<(int, (bool, char))>>)(t => { var (x, bc) = t; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
        <Parameter Type=""System.ValueTuple`2[System.Boolean,System.Char]"" Id=""2"" Name=""bc"" />
      </Variables>
      <Statements>
        <CSharpDeconstructionAssignment Type=""System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]"">
          <Left>
            <TupleLiteral Type=""System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]"">
              <Arguments>
                <Argument Name=""x"">
                  <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                </Argument>
                <Argument Name=""bc"">
                  <Parameter Type=""System.ValueTuple`2[System.Boolean,System.Char]"" Id=""2"" Name=""bc"" />
                </Argument>
              </Arguments>
            </TupleLiteral>
          </Left>
          <Right>
            <Parameter Type=""System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]"" Id=""0"" Name=""t"" />
          </Right>
          <Conversion>
            <DeconstructionConversion>
              <Deconstruct />
              <Conversions>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Parameter Type=""System.Int32"" Id=""3"" Name=""p"" />
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.ValueTuple`2[System.Boolean,System.Char],System.ValueTuple`2[System.Boolean,System.Char]]"">
                      <Parameters>
                        <Parameter Type=""System.ValueTuple`2[System.Boolean,System.Char]"" Id=""4"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Parameter Type=""System.ValueTuple`2[System.Boolean,System.Char]"" Id=""4"" Name=""p"" />
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
              </Conversions>
            </DeconstructionConversion>
          </Conversion>
        </CSharpDeconstructionAssignment>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6DA3_CACF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6DA3_CACF() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_130F_B859()
        {
            // (Expression<Action<(int, (bool, char))>>)(t => { (int x, (bool b, char c)) = t; })
            var actual = GetDebugView(@"(Expression<Action<(int, (bool, char))>>)(t => { (int x, (bool b, char c)) = t; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
        <Parameter Type=""System.Boolean"" Id=""2"" Name=""b"" />
        <Parameter Type=""System.Char"" Id=""3"" Name=""c"" />
      </Variables>
      <Statements>
        <CSharpDeconstructionAssignment Type=""System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]"">
          <Left>
            <TupleLiteral Type=""System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]"">
              <Arguments>
                <Argument Name=""x"">
                  <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                </Argument>
                <Argument>
                  <TupleLiteral Type=""System.ValueTuple`2[System.Boolean,System.Char]"">
                    <Arguments>
                      <Argument Name=""b"">
                        <Parameter Type=""System.Boolean"" Id=""2"" Name=""b"" />
                      </Argument>
                      <Argument Name=""c"">
                        <Parameter Type=""System.Char"" Id=""3"" Name=""c"" />
                      </Argument>
                    </Arguments>
                  </TupleLiteral>
                </Argument>
              </Arguments>
            </TupleLiteral>
          </Left>
          <Right>
            <Parameter Type=""System.ValueTuple`2[System.Int32,System.ValueTuple`2[System.Boolean,System.Char]]"" Id=""0"" Name=""t"" />
          </Right>
          <Conversion>
            <DeconstructionConversion>
              <Deconstruct />
              <Conversions>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
                <DeconstructionConversion>
                  <Deconstruct />
                  <Conversions>
                    <SimpleConversion>
                      <Conversion>
                        <Lambda Type=""System.Func`2[System.Boolean,System.Boolean]"">
                          <Parameters>
                            <Parameter Type=""System.Boolean"" Id=""5"" Name=""p"" />
                          </Parameters>
                          <Body>
                            <Parameter Type=""System.Boolean"" Id=""5"" Name=""p"" />
                          </Body>
                        </Lambda>
                      </Conversion>
                    </SimpleConversion>
                    <SimpleConversion>
                      <Conversion>
                        <Lambda Type=""System.Func`2[System.Char,System.Char]"">
                          <Parameters>
                            <Parameter Type=""System.Char"" Id=""6"" Name=""p"" />
                          </Parameters>
                          <Body>
                            <Parameter Type=""System.Char"" Id=""6"" Name=""p"" />
                          </Body>
                        </Lambda>
                      </Conversion>
                    </SimpleConversion>
                  </Conversions>
                </DeconstructionConversion>
              </Conversions>
            </DeconstructionConversion>
          </Conversion>
        </CSharpDeconstructionAssignment>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""7"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_130F_B859();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_130F_B859() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_702A_64C8()
        {
            // (Expression<Action<Point>>)(p => { (int x, int y) = p; })
            var actual = GetDebugView(@"(Expression<Action<Point>>)(p => { (int x, int y) = p; })");
            var expected = @"
<Lambda Type=""System.Action`1[Point]"">
  <Parameters>
    <Parameter Type=""Point"" Id=""0"" Name=""p"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
        <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
      </Variables>
      <Statements>
        <CSharpDeconstructionAssignment Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
          <Left>
            <TupleLiteral Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
              <Arguments>
                <Argument Name=""x"">
                  <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                </Argument>
                <Argument Name=""y"">
                  <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
                </Argument>
              </Arguments>
            </TupleLiteral>
          </Left>
          <Right>
            <Parameter Type=""Point"" Id=""0"" Name=""p"" />
          </Right>
          <Conversion>
            <DeconstructionConversion>
              <Deconstruct>
                <Lambda Type=""System.Runtime.CompilerServices.DeconstructAction`3[Point,System.Int32,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""Point"" Id=""3"" Name=""i"" />
                    <Parameter Type=""System.Int32"" Id=""4"" Name=""o0"" />
                    <Parameter Type=""System.Int32"" Id=""5"" Name=""o1"" />
                  </Parameters>
                  <Body>
                    <Call Type=""System.Void"" Method=""Void Deconstruct(Int32 ByRef, Int32 ByRef)"">
                      <Object>
                        <Parameter Type=""Point"" Id=""3"" Name=""i"" />
                      </Object>
                      <Arguments>
                        <Parameter Type=""System.Int32"" Id=""4"" Name=""o0"" />
                        <Parameter Type=""System.Int32"" Id=""5"" Name=""o1"" />
                      </Arguments>
                    </Call>
                  </Body>
                </Lambda>
              </Deconstruct>
              <Conversions>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""6"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Parameter Type=""System.Int32"" Id=""6"" Name=""p"" />
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""7"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Parameter Type=""System.Int32"" Id=""7"" Name=""p"" />
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
              </Conversions>
            </DeconstructionConversion>
          </Conversion>
        </CSharpDeconstructionAssignment>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""8"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_702A_64C8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_702A_64C8() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_D0CE_7364()
        {
            // (Expression<Action<(int, Point, string)>>)(t => { (long a, (double x, double y), string s) = t; })
            var actual = GetDebugView(@"(Expression<Action<(int, Point, string)>>)(t => { (long a, (double x, double y), string s) = t; })");
            var expected = @"
<Lambda Type=""System.Action`1[System.ValueTuple`3[System.Int32,Point,System.String]]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`3[System.Int32,Point,System.String]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int64"" Id=""1"" Name=""a"" />
        <Parameter Type=""System.Double"" Id=""2"" Name=""x"" />
        <Parameter Type=""System.Double"" Id=""3"" Name=""y"" />
        <Parameter Type=""System.String"" Id=""4"" Name=""s"" />
      </Variables>
      <Statements>
        <CSharpDeconstructionAssignment Type=""System.ValueTuple`3[System.Int64,System.ValueTuple`2[System.Double,System.Double],System.String]"">
          <Left>
            <TupleLiteral Type=""System.ValueTuple`3[System.Int64,System.ValueTuple`2[System.Double,System.Double],System.String]"">
              <Arguments>
                <Argument Name=""a"">
                  <Parameter Type=""System.Int64"" Id=""1"" Name=""a"" />
                </Argument>
                <Argument>
                  <TupleLiteral Type=""System.ValueTuple`2[System.Double,System.Double]"">
                    <Arguments>
                      <Argument Name=""x"">
                        <Parameter Type=""System.Double"" Id=""2"" Name=""x"" />
                      </Argument>
                      <Argument Name=""y"">
                        <Parameter Type=""System.Double"" Id=""3"" Name=""y"" />
                      </Argument>
                    </Arguments>
                  </TupleLiteral>
                </Argument>
                <Argument Name=""s"">
                  <Parameter Type=""System.String"" Id=""4"" Name=""s"" />
                </Argument>
              </Arguments>
            </TupleLiteral>
          </Left>
          <Right>
            <Parameter Type=""System.ValueTuple`3[System.Int32,Point,System.String]"" Id=""0"" Name=""t"" />
          </Right>
          <Conversion>
            <DeconstructionConversion>
              <Deconstruct />
              <Conversions>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.Int32,System.Int64]"">
                      <Parameters>
                        <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Convert Type=""System.Int64"">
                          <Operand>
                            <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                          </Operand>
                        </Convert>
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
                <DeconstructionConversion>
                  <Deconstruct>
                    <Lambda Type=""System.Runtime.CompilerServices.DeconstructAction`3[Point,System.Int32,System.Int32]"">
                      <Parameters>
                        <Parameter Type=""Point"" Id=""6"" Name=""i"" />
                        <Parameter Type=""System.Int32"" Id=""7"" Name=""o0"" />
                        <Parameter Type=""System.Int32"" Id=""8"" Name=""o1"" />
                      </Parameters>
                      <Body>
                        <Call Type=""System.Void"" Method=""Void Deconstruct(Int32 ByRef, Int32 ByRef)"">
                          <Object>
                            <Parameter Type=""Point"" Id=""6"" Name=""i"" />
                          </Object>
                          <Arguments>
                            <Parameter Type=""System.Int32"" Id=""7"" Name=""o0"" />
                            <Parameter Type=""System.Int32"" Id=""8"" Name=""o1"" />
                          </Arguments>
                        </Call>
                      </Body>
                    </Lambda>
                  </Deconstruct>
                  <Conversions>
                    <SimpleConversion>
                      <Conversion>
                        <Lambda Type=""System.Func`2[System.Int32,System.Double]"">
                          <Parameters>
                            <Parameter Type=""System.Int32"" Id=""9"" Name=""p"" />
                          </Parameters>
                          <Body>
                            <Convert Type=""System.Double"">
                              <Operand>
                                <Parameter Type=""System.Int32"" Id=""9"" Name=""p"" />
                              </Operand>
                            </Convert>
                          </Body>
                        </Lambda>
                      </Conversion>
                    </SimpleConversion>
                    <SimpleConversion>
                      <Conversion>
                        <Lambda Type=""System.Func`2[System.Int32,System.Double]"">
                          <Parameters>
                            <Parameter Type=""System.Int32"" Id=""10"" Name=""p"" />
                          </Parameters>
                          <Body>
                            <Convert Type=""System.Double"">
                              <Operand>
                                <Parameter Type=""System.Int32"" Id=""10"" Name=""p"" />
                              </Operand>
                            </Convert>
                          </Body>
                        </Lambda>
                      </Conversion>
                    </SimpleConversion>
                  </Conversions>
                </DeconstructionConversion>
                <SimpleConversion>
                  <Conversion>
                    <Lambda Type=""System.Func`2[System.String,System.String]"">
                      <Parameters>
                        <Parameter Type=""System.String"" Id=""11"" Name=""p"" />
                      </Parameters>
                      <Body>
                        <Parameter Type=""System.String"" Id=""11"" Name=""p"" />
                      </Body>
                    </Lambda>
                  </Conversion>
                </SimpleConversion>
              </Conversions>
            </DeconstructionConversion>
          </Conversion>
        </CSharpDeconstructionAssignment>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""12"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D0CE_7364();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D0CE_7364() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_AF2A_5B45()
        {
            // (Expression<Action<(int, int, int, int), StrongBox<int>, int[], int[], List<int>>>)((t, sb, xs, ys, zs) => { (sb.Value, xs[0], ys[^1], zs[2]) = t; })
            var actual = GetDebugView(@"(Expression<Action<(int, int, int, int), StrongBox<int>, int[], int[], List<int>>>)((t, sb, xs, ys, zs) => { (sb.Value, xs[0], ys[^1], zs[2]) = t; })");
            var expected = @"
<Lambda Type=""System.Action`5[System.ValueTuple`4[System.Int32,System.Int32,System.Int32,System.Int32],System.Runtime.CompilerServices.StrongBox`1[System.Int32],System.Int32[],System.Int32[],System.Collections.Generic.List`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`4[System.Int32,System.Int32,System.Int32,System.Int32]"" Id=""0"" Name=""t"" />
    <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Int32]"" Id=""1"" Name=""sb"" />
    <Parameter Type=""System.Int32[]"" Id=""2"" Name=""xs"" />
    <Parameter Type=""System.Int32[]"" Id=""3"" Name=""ys"" />
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""4"" Name=""zs"" />
  </Parameters>
  <Body>
    <CSharpDeconstructionAssignment Type=""System.ValueTuple`4[System.Int32,System.Int32,System.Int32,System.Int32]"">
      <Left>
        <TupleLiteral Type=""System.ValueTuple`4[System.Int32,System.Int32,System.Int32,System.Int32]"">
          <Arguments>
            <Argument Name=""Value"">
              <MemberAccess Type=""System.Int32"" Member=""Int32 Value"">
                <Expression>
                  <Parameter Type=""System.Runtime.CompilerServices.StrongBox`1[System.Int32]"" Id=""1"" Name=""sb"" />
                </Expression>
              </MemberAccess>
            </Argument>
            <Argument>
              <ArrayIndex Type=""System.Int32"">
                <Left>
                  <Parameter Type=""System.Int32[]"" Id=""2"" Name=""xs"" />
                </Left>
                <Right>
                  <Constant Type=""System.Int32"" Value=""0"" />
                </Right>
              </ArrayIndex>
            </Argument>
            <Argument>
              <CSharpArrayAccess Type=""System.Int32"">
                <Array>
                  <Parameter Type=""System.Int32[]"" Id=""3"" Name=""ys"" />
                </Array>
                <Indexes>
                  <CSharpFromEndIndex Type=""System.Index"" Method=""Void .ctor(Int32, Boolean)"">
                    <Operand>
                      <Constant Type=""System.Int32"" Value=""1"" />
                    </Operand>
                  </CSharpFromEndIndex>
                </Indexes>
              </CSharpArrayAccess>
            </Argument>
            <Argument>
              <CSharpIndex Type=""System.Int32"" Indexer=""Int32 Item [Int32]"">
                <Object>
                  <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""4"" Name=""zs"" />
                </Object>
                <Arguments>
                  <ParameterAssignment Parameter=""Int32 index"">
                    <Expression>
                      <Constant Type=""System.Int32"" Value=""2"" />
                    </Expression>
                  </ParameterAssignment>
                </Arguments>
              </CSharpIndex>
            </Argument>
          </Arguments>
        </TupleLiteral>
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`4[System.Int32,System.Int32,System.Int32,System.Int32]"" Id=""0"" Name=""t"" />
      </Right>
      <Conversion>
        <DeconstructionConversion>
          <Deconstruct />
          <Conversions>
            <SimpleConversion>
              <Conversion>
                <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                  </Body>
                </Lambda>
              </Conversion>
            </SimpleConversion>
            <SimpleConversion>
              <Conversion>
                <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""System.Int32"" Id=""6"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Int32"" Id=""6"" Name=""p"" />
                  </Body>
                </Lambda>
              </Conversion>
            </SimpleConversion>
            <SimpleConversion>
              <Conversion>
                <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""System.Int32"" Id=""7"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Int32"" Id=""7"" Name=""p"" />
                  </Body>
                </Lambda>
              </Conversion>
            </SimpleConversion>
            <SimpleConversion>
              <Conversion>
                <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                  <Parameters>
                    <Parameter Type=""System.Int32"" Id=""8"" Name=""p"" />
                  </Parameters>
                  <Body>
                    <Parameter Type=""System.Int32"" Id=""8"" Name=""p"" />
                  </Body>
                </Lambda>
              </Conversion>
            </SimpleConversion>
          </Conversions>
        </DeconstructionConversion>
      </Conversion>
    </CSharpDeconstructionAssignment>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AF2A_5B45();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AF2A_5B45() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_6624_5FDD()
        {
            // (Expression<Action<(int, int)[]>>)(xs => { foreach (var (x, y) in xs) Console.WriteLine($"{x}, {y}"); })
            var actual = GetDebugView(@"(Expression<Action<(int, int)[]>>)(xs => { foreach (var (x, y) in xs) Console.WriteLine($""{x}, {y}""); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.ValueTuple`2[System.Int32,System.Int32][]]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32][]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
            <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
          </Variables>
          <Deconstruction>
            <Lambda Type=""System.Func`2[System.ValueTuple`2[System.Int32,System.Int32],System.ValueTuple`2[System.Int32,System.Int32]]"">
              <Parameters>
                <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""3"" Name=""t"" />
              </Parameters>
              <Body>
                <CSharpDeconstructionAssignment Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
                  <Left>
                    <TupleLiteral Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
                      <Arguments>
                        <Argument Name=""x"">
                          <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                        </Argument>
                        <Argument Name=""y"">
                          <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
                        </Argument>
                      </Arguments>
                    </TupleLiteral>
                  </Left>
                  <Right>
                    <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""3"" Name=""t"" />
                  </Right>
                  <Conversion>
                    <DeconstructionConversion>
                      <Deconstruct />
                      <Conversions>
                        <SimpleConversion>
                          <Conversion>
                            <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                              <Parameters>
                                <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                              </Parameters>
                              <Body>
                                <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                              </Body>
                            </Lambda>
                          </Conversion>
                        </SimpleConversion>
                        <SimpleConversion>
                          <Conversion>
                            <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                              <Parameters>
                                <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                              </Parameters>
                              <Body>
                                <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                              </Body>
                            </Lambda>
                          </Conversion>
                        </SimpleConversion>
                      </Conversions>
                    </DeconstructionConversion>
                  </Conversion>
                </CSharpDeconstructionAssignment>
              </Body>
            </Lambda>
          </Deconstruction>
          <Collection>
            <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32][]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void WriteLine(System.String)"">
              <Arguments>
                <CSharpInterpolatedString Type=""System.String"">
                  <Interpolations>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Value>, </Value>
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
                    </InterpolationStringLiteral>
                  </Interpolations>
                </CSharpInterpolatedString>
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""7"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""8"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6624_5FDD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6624_5FDD() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_CB13_5FDD()
        {
            // (Expression<Action<(int, int)[]>>)(xs => { foreach ((int x, int y) in xs) Console.WriteLine($"{x}, {y}"); })
            var actual = GetDebugView(@"(Expression<Action<(int, int)[]>>)(xs => { foreach ((int x, int y) in xs) Console.WriteLine($""{x}, {y}""); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.ValueTuple`2[System.Int32,System.Int32][]]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32][]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
            <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
          </Variables>
          <Deconstruction>
            <Lambda Type=""System.Func`2[System.ValueTuple`2[System.Int32,System.Int32],System.ValueTuple`2[System.Int32,System.Int32]]"">
              <Parameters>
                <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""3"" Name=""t"" />
              </Parameters>
              <Body>
                <CSharpDeconstructionAssignment Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
                  <Left>
                    <TupleLiteral Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
                      <Arguments>
                        <Argument Name=""x"">
                          <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                        </Argument>
                        <Argument Name=""y"">
                          <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
                        </Argument>
                      </Arguments>
                    </TupleLiteral>
                  </Left>
                  <Right>
                    <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""3"" Name=""t"" />
                  </Right>
                  <Conversion>
                    <DeconstructionConversion>
                      <Deconstruct />
                      <Conversions>
                        <SimpleConversion>
                          <Conversion>
                            <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                              <Parameters>
                                <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                              </Parameters>
                              <Body>
                                <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                              </Body>
                            </Lambda>
                          </Conversion>
                        </SimpleConversion>
                        <SimpleConversion>
                          <Conversion>
                            <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                              <Parameters>
                                <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                              </Parameters>
                              <Body>
                                <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                              </Body>
                            </Lambda>
                          </Conversion>
                        </SimpleConversion>
                      </Conversions>
                    </DeconstructionConversion>
                  </Conversion>
                </CSharpDeconstructionAssignment>
              </Body>
            </Lambda>
          </Deconstruction>
          <Collection>
            <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32][]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void WriteLine(System.String)"">
              <Arguments>
                <CSharpInterpolatedString Type=""System.String"">
                  <Interpolations>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Value>, </Value>
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
                    </InterpolationStringLiteral>
                  </Interpolations>
                </CSharpInterpolatedString>
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""7"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""8"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CB13_5FDD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CB13_5FDD() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_80A1_8959()
        {
            // (Expression<Action<(int, int)[]>>)(xs => { foreach ((int? x, long y) in xs) Console.WriteLine($"{x}, {y}"); })
            var actual = GetDebugView(@"(Expression<Action<(int, int)[]>>)(xs => { foreach ((int? x, long y) in xs) Console.WriteLine($""{x}, {y}""); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.ValueTuple`2[System.Int32,System.Int32][]]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32][]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""x"" />
            <Parameter Type=""System.Int64"" Id=""2"" Name=""y"" />
          </Variables>
          <Deconstruction>
            <Lambda Type=""System.Func`2[System.ValueTuple`2[System.Int32,System.Int32],System.ValueTuple`2[System.Nullable`1[System.Int32],System.Int64]]"">
              <Parameters>
                <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""3"" Name=""t"" />
              </Parameters>
              <Body>
                <CSharpDeconstructionAssignment Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.Int64]"">
                  <Left>
                    <TupleLiteral Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.Int64]"">
                      <Arguments>
                        <Argument Name=""x"">
                          <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""x"" />
                        </Argument>
                        <Argument Name=""y"">
                          <Parameter Type=""System.Int64"" Id=""2"" Name=""y"" />
                        </Argument>
                      </Arguments>
                    </TupleLiteral>
                  </Left>
                  <Right>
                    <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32]"" Id=""3"" Name=""t"" />
                  </Right>
                  <Conversion>
                    <DeconstructionConversion>
                      <Deconstruct />
                      <Conversions>
                        <SimpleConversion>
                          <Conversion>
                            <Lambda Type=""System.Func`2[System.Int32,System.Nullable`1[System.Int32]]"">
                              <Parameters>
                                <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                              </Parameters>
                              <Body>
                                <Convert Type=""System.Nullable`1[System.Int32]"" IsLifted=""true"" IsLiftedToNull=""true"">
                                  <Operand>
                                    <Parameter Type=""System.Int32"" Id=""4"" Name=""p"" />
                                  </Operand>
                                </Convert>
                              </Body>
                            </Lambda>
                          </Conversion>
                        </SimpleConversion>
                        <SimpleConversion>
                          <Conversion>
                            <Lambda Type=""System.Func`2[System.Int32,System.Int64]"">
                              <Parameters>
                                <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                              </Parameters>
                              <Body>
                                <Convert Type=""System.Int64"">
                                  <Operand>
                                    <Parameter Type=""System.Int32"" Id=""5"" Name=""p"" />
                                  </Operand>
                                </Convert>
                              </Body>
                            </Lambda>
                          </Conversion>
                        </SimpleConversion>
                      </Conversions>
                    </DeconstructionConversion>
                  </Conversion>
                </CSharpDeconstructionAssignment>
              </Body>
            </Lambda>
          </Deconstruction>
          <Collection>
            <Parameter Type=""System.ValueTuple`2[System.Int32,System.Int32][]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void WriteLine(System.String)"">
              <Arguments>
                <CSharpInterpolatedString Type=""System.String"">
                  <Interpolations>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""x"" />
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Value>, </Value>
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Int64"" Id=""2"" Name=""y"" />
                    </InterpolationStringLiteral>
                  </Interpolations>
                </CSharpInterpolatedString>
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""6"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""7"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""8"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_80A1_8959();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_80A1_8959() => INCONCLUSIVE(); }

        [TestMethod]
        public void CompilerTest_C73C_F587()
        {
            // (Expression<Action<Point[]>>)(xs => { foreach (var (x, y) in xs) Console.WriteLine($"{x}, {y}"); })
            var actual = GetDebugView(@"(Expression<Action<Point[]>>)(xs => { foreach (var (x, y) in xs) Console.WriteLine($""{x}, {y}""); })");
            var expected = @"
<Lambda Type=""System.Action`1[Point[]]"">
  <Parameters>
    <Parameter Type=""Point[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
            <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
          </Variables>
          <Deconstruction>
            <Lambda Type=""System.Func`2[Point,System.ValueTuple`2[System.Int32,System.Int32]]"">
              <Parameters>
                <Parameter Type=""Point"" Id=""3"" Name=""t"" />
              </Parameters>
              <Body>
                <CSharpDeconstructionAssignment Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
                  <Left>
                    <TupleLiteral Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
                      <Arguments>
                        <Argument Name=""x"">
                          <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                        </Argument>
                        <Argument Name=""y"">
                          <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
                        </Argument>
                      </Arguments>
                    </TupleLiteral>
                  </Left>
                  <Right>
                    <Parameter Type=""Point"" Id=""3"" Name=""t"" />
                  </Right>
                  <Conversion>
                    <DeconstructionConversion>
                      <Deconstruct>
                        <Lambda Type=""System.Runtime.CompilerServices.DeconstructAction`3[Point,System.Int32,System.Int32]"">
                          <Parameters>
                            <Parameter Type=""Point"" Id=""4"" Name=""i"" />
                            <Parameter Type=""System.Int32"" Id=""5"" Name=""o0"" />
                            <Parameter Type=""System.Int32"" Id=""6"" Name=""o1"" />
                          </Parameters>
                          <Body>
                            <Call Type=""System.Void"" Method=""Void Deconstruct(Int32 ByRef, Int32 ByRef)"">
                              <Object>
                                <Parameter Type=""Point"" Id=""4"" Name=""i"" />
                              </Object>
                              <Arguments>
                                <Parameter Type=""System.Int32"" Id=""5"" Name=""o0"" />
                                <Parameter Type=""System.Int32"" Id=""6"" Name=""o1"" />
                              </Arguments>
                            </Call>
                          </Body>
                        </Lambda>
                      </Deconstruct>
                      <Conversions>
                        <SimpleConversion>
                          <Conversion>
                            <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                              <Parameters>
                                <Parameter Type=""System.Int32"" Id=""7"" Name=""p"" />
                              </Parameters>
                              <Body>
                                <Parameter Type=""System.Int32"" Id=""7"" Name=""p"" />
                              </Body>
                            </Lambda>
                          </Conversion>
                        </SimpleConversion>
                        <SimpleConversion>
                          <Conversion>
                            <Lambda Type=""System.Func`2[System.Int32,System.Int32]"">
                              <Parameters>
                                <Parameter Type=""System.Int32"" Id=""8"" Name=""p"" />
                              </Parameters>
                              <Body>
                                <Parameter Type=""System.Int32"" Id=""8"" Name=""p"" />
                              </Body>
                            </Lambda>
                          </Conversion>
                        </SimpleConversion>
                      </Conversions>
                    </DeconstructionConversion>
                  </Conversion>
                </CSharpDeconstructionAssignment>
              </Body>
            </Lambda>
          </Deconstruction>
          <Collection>
            <Parameter Type=""Point[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void WriteLine(System.String)"">
              <Arguments>
                <CSharpInterpolatedString Type=""System.String"">
                  <Interpolations>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Value>, </Value>
                    </InterpolationStringLiteral>
                    <InterpolationStringLiteral>
                      <Parameter Type=""System.Int32"" Id=""2"" Name=""y"" />
                    </InterpolationStringLiteral>
                  </Interpolations>
                </CSharpInterpolatedString>
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""9"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""10"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""11"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C73C_F587();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C73C_F587() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { Assert.Inconclusive(); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp70_DeconstructionAssignment
    {
        partial class Reviewed
        {
            public override void CompilerTest_B78B_4415() => OK();
            public override void CompilerTest_1D1C_97F0() => OK();
            public override void CompilerTest_6DA3_CACF() => OK();
            public override void CompilerTest_130F_B859() => OK();
            public override void CompilerTest_702A_64C8() => OK();
            public override void CompilerTest_D0CE_7364() => OK();
            public override void CompilerTest_AF2A_5B45() => OK();
            public override void CompilerTest_6624_5FDD() => OK();
            public override void CompilerTest_CB13_5FDD() => OK();
            public override void CompilerTest_80A1_8959() => OK();
            public override void CompilerTest_C73C_F587() => OK();
        }
    }
}
*/
}
