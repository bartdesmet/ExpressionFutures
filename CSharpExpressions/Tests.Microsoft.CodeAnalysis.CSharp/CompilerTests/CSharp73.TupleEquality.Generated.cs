// Prototyping extended expression trees for C#.
//
// bartde - May 2020

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Xunit;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    public partial class CompilerTests_CSharp73_TupleEquality
    {
        [Fact]
        public void CompilerTest_41C6_D6EC()
        {
            // (Expression<Func<(int, string), (int, string), bool>>)((l, r) => l == r)
            var actual = GetDebugView(@"(Expression<Func<(int, string), (int, string), bool>>)((l, r) => l == r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`2[System.Int32,System.String],System.ValueTuple`2[System.Int32,System.String],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.String]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.String]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`2[System.Int32,System.String]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`2[System.Int32,System.String]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_41C6_D6EC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_41C6_D6EC() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_1183_EE62()
        {
            // (Expression<Func<(int, string), (int, string), bool>>)((l, r) => l != r)
            var actual = GetDebugView(@"(Expression<Func<(int, string), (int, string), bool>>)((l, r) => l != r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`2[System.Int32,System.String],System.ValueTuple`2[System.Int32,System.String],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.String]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`2[System.Int32,System.String]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleNotEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`2[System.Int32,System.String]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`2[System.Int32,System.String]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleNotEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1183_EE62();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1183_EE62() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_E39A_78A2()
        {
            // (Expression<Func<(int?, string), (int?, string), bool>>)((l, r) => l == r)
            var actual = GetDebugView(@"(Expression<Func<(int?, string), (int?, string), bool>>)((l, r) => l == r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`2[System.Nullable`1[System.Int32],System.String],System.ValueTuple`2[System.Nullable`1[System.Int32],System.String],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.String]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.String]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.String]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.String]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Nullable`1[System.Int32],System.Nullable`1[System.Int32],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"" IsLifted=""true"">
              <Left>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""3"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E39A_78A2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E39A_78A2() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_9A78_F30E()
        {
            // (Expression<Func<(int?, string), (int?, string), bool>>)((l, r) => l != r)
            var actual = GetDebugView(@"(Expression<Func<(int?, string), (int?, string), bool>>)((l, r) => l != r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`2[System.Nullable`1[System.Int32],System.String],System.ValueTuple`2[System.Nullable`1[System.Int32],System.String],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.String]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.String]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleNotEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.String]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`2[System.Nullable`1[System.Int32],System.String]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Nullable`1[System.Int32],System.Nullable`1[System.Int32],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"" IsLifted=""true"">
              <Left>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""3"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleNotEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9A78_F30E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9A78_F30E() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_B73C_68B9()
        {
            // (Expression<Func<(int, string, DateTime), (int, string, DateTime), bool>>)((l, r) => l == r)
            var actual = GetDebugView(@"(Expression<Func<(int, string, DateTime), (int, string, DateTime), bool>>)((l, r) => l == r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`3[System.Int32,System.String,System.DateTime],System.ValueTuple`3[System.Int32,System.String,System.DateTime],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.String,System.DateTime]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.String,System.DateTime]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.String,System.DateTime]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.String,System.DateTime]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.DateTime,System.DateTime,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.DateTime"" Id=""6"" Name=""left"" />
            <Parameter Type=""System.DateTime"" Id=""7"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.DateTime, System.DateTime)"">
              <Left>
                <Parameter Type=""System.DateTime"" Id=""6"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.DateTime"" Id=""7"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B73C_68B9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B73C_68B9() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_530F_CF5A()
        {
            // (Expression<Func<(int, string, DateTime), (int, string, DateTime), bool>>)((l, r) => l != r)
            var actual = GetDebugView(@"(Expression<Func<(int, string, DateTime), (int, string, DateTime), bool>>)((l, r) => l != r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`3[System.Int32,System.String,System.DateTime],System.ValueTuple`3[System.Int32,System.String,System.DateTime],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.String,System.DateTime]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.String,System.DateTime]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleNotEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.String,System.DateTime]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.String,System.DateTime]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.DateTime,System.DateTime,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.DateTime"" Id=""6"" Name=""left"" />
            <Parameter Type=""System.DateTime"" Id=""7"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.DateTime, System.DateTime)"">
              <Left>
                <Parameter Type=""System.DateTime"" Id=""6"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.DateTime"" Id=""7"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleNotEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_530F_CF5A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_530F_CF5A() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_E4CE_9D5B()
        {
            // (Expression<Func<(int, string)?, (int, string)?, bool>>)((l, r) => l == r)
            var actual = GetDebugView(@"(Expression<Func<(int, string)?, (int, string)?, bool>>)((l, r) => l == r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]],System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleEqual Type=""System.Boolean"" IsLifted=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E4CE_9D5B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E4CE_9D5B() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_0B1F_7212()
        {
            // (Expression<Func<(int, string)?, (int, string)?, bool>>)((l, r) => l != r)
            var actual = GetDebugView(@"(Expression<Func<(int, string)?, (int, string)?, bool>>)((l, r) => l != r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]],System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleNotEqual Type=""System.Boolean"" IsLifted=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.Int32,System.String]]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.String, System.String)"">
              <Left>
                <Parameter Type=""System.String"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.String"" Id=""5"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleNotEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0B1F_7212();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0B1F_7212() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_A78C_7F57()
        {
            // (Expression<Func<(int, (string, bool), long), (int, (string, bool), long), bool>>)((l, r) => l == r)
            var actual = GetDebugView(@"(Expression<Func<(int, (string, bool), long), (int, (string, bool), long), bool>>)((l, r) => l == r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64],System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.ValueTuple`2[System.String,System.Boolean],System.ValueTuple`2[System.String,System.Boolean],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.ValueTuple`2[System.String,System.Boolean]"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.ValueTuple`2[System.String,System.Boolean]"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <CSharpTupleEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.ValueTuple`2[System.String,System.Boolean]"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.ValueTuple`2[System.String,System.Boolean]"" Id=""5"" Name=""right"" />
              </Right>
              <EqualityChecks>
                <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                    <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.String, System.String)"">
                      <Left>
                        <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                      </Right>
                    </Equal>
                  </Body>
                </Lambda>
                <Lambda Type=""System.Func`3[System.Boolean,System.Boolean,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                    <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                      </Right>
                    </Equal>
                  </Body>
                </Lambda>
              </EqualityChecks>
            </CSharpTupleEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Int64,System.Int64,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
            <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A78C_7F57();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A78C_7F57() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_235E_24DF()
        {
            // (Expression<Func<(int, (string, bool), long), (int, (string, bool), long), bool>>)((l, r) => l != r)
            var actual = GetDebugView(@"(Expression<Func<(int, (string, bool), long), (int, (string, bool), long), bool>>)((l, r) => l != r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64],System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleNotEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.Boolean],System.Int64]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.ValueTuple`2[System.String,System.Boolean],System.ValueTuple`2[System.String,System.Boolean],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.ValueTuple`2[System.String,System.Boolean]"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.ValueTuple`2[System.String,System.Boolean]"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <CSharpTupleNotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.ValueTuple`2[System.String,System.Boolean]"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.ValueTuple`2[System.String,System.Boolean]"" Id=""5"" Name=""right"" />
              </Right>
              <EqualityChecks>
                <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                    <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.String, System.String)"">
                      <Left>
                        <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                      </Right>
                    </NotEqual>
                  </Body>
                </Lambda>
                <Lambda Type=""System.Func`3[System.Boolean,System.Boolean,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                    <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <NotEqual Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                      </Right>
                    </NotEqual>
                  </Body>
                </Lambda>
              </EqualityChecks>
            </CSharpTupleNotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Int64,System.Int64,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
            <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleNotEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_235E_24DF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_235E_24DF() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_D6B8_C461()
        {
            // (Expression<Func<(int, (string, bool)?, long), (int, (string, bool)?, long), bool>>)((l, r) => l == r)
            var actual = GetDebugView(@"(Expression<Func<(int, (string, bool)?, long), (int, (string, bool)?, long), bool>>)((l, r) => l == r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64],System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <CSharpTupleEqual Type=""System.Boolean"" IsLifted=""true"">
              <Left>
                <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""5"" Name=""right"" />
              </Right>
              <EqualityChecks>
                <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                    <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.String, System.String)"">
                      <Left>
                        <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                      </Right>
                    </Equal>
                  </Body>
                </Lambda>
                <Lambda Type=""System.Func`3[System.Boolean,System.Boolean,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                    <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                      </Right>
                    </Equal>
                  </Body>
                </Lambda>
              </EqualityChecks>
            </CSharpTupleEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Int64,System.Int64,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
            <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D6B8_C461();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D6B8_C461() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_5CFE_A5A4()
        {
            // (Expression<Func<(int, (string, bool)?, long), (int, (string, bool)?, long), bool>>)((l, r) => l != r)
            var actual = GetDebugView(@"(Expression<Func<(int, (string, bool)?, long), (int, (string, bool)?, long), bool>>)((l, r) => l != r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64],System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleNotEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <CSharpTupleNotEqual Type=""System.Boolean"" IsLifted=""true"">
              <Left>
                <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""5"" Name=""right"" />
              </Right>
              <EqualityChecks>
                <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                    <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.String, System.String)"">
                      <Left>
                        <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                      </Right>
                    </NotEqual>
                  </Body>
                </Lambda>
                <Lambda Type=""System.Func`3[System.Boolean,System.Boolean,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                    <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <NotEqual Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                      </Right>
                    </NotEqual>
                  </Body>
                </Lambda>
              </EqualityChecks>
            </CSharpTupleNotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Int64,System.Int64,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
            <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleNotEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5CFE_A5A4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5CFE_A5A4() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_27FD_7B61()
        {
            // (Expression<Func<(int, (string, bool)?, long)?, (int, (string, bool)?, long)?, bool>>)((l, r) => l == r)
            var actual = GetDebugView(@"(Expression<Func<(int, (string, bool)?, long)?, (int, (string, bool)?, long)?, bool>>)((l, r) => l == r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]],System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleEqual Type=""System.Boolean"" IsLifted=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <CSharpTupleEqual Type=""System.Boolean"" IsLifted=""true"">
              <Left>
                <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""5"" Name=""right"" />
              </Right>
              <EqualityChecks>
                <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                    <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.String, System.String)"">
                      <Left>
                        <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                      </Right>
                    </Equal>
                  </Body>
                </Lambda>
                <Lambda Type=""System.Func`3[System.Boolean,System.Boolean,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                    <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <Equal Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                      </Right>
                    </Equal>
                  </Body>
                </Lambda>
              </EqualityChecks>
            </CSharpTupleEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Int64,System.Int64,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
            <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_27FD_7B61();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_27FD_7B61() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_157E_20F1()
        {
            // (Expression<Func<(int, (string, bool)?, long)?, (int, (string, bool)?, long)?, bool>>)((l, r) => l != r)
            var actual = GetDebugView(@"(Expression<Func<(int, (string, bool)?, long)?, (int, (string, bool)?, long)?, bool>>)((l, r) => l != r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]],System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleNotEqual Type=""System.Boolean"" IsLifted=""true"">
      <Left>
        <Parameter Type=""System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.Nullable`1[System.ValueTuple`3[System.Int32,System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Int64]]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <CSharpTupleNotEqual Type=""System.Boolean"" IsLifted=""true"">
              <Left>
                <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Nullable`1[System.ValueTuple`2[System.String,System.Boolean]]"" Id=""5"" Name=""right"" />
              </Right>
              <EqualityChecks>
                <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                    <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.String, System.String)"">
                      <Left>
                        <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                      </Right>
                    </NotEqual>
                  </Body>
                </Lambda>
                <Lambda Type=""System.Func`3[System.Boolean,System.Boolean,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                    <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <NotEqual Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.Boolean"" Id=""8"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.Boolean"" Id=""9"" Name=""right"" />
                      </Right>
                    </NotEqual>
                  </Body>
                </Lambda>
              </EqualityChecks>
            </CSharpTupleNotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Int64,System.Int64,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
            <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int64"" Id=""10"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int64"" Id=""11"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleNotEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_157E_20F1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_157E_20F1() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_2CC6_948A()
        {
            // (Expression<Func<(int, (string, (bool, DateTime, double)), long), (int, (string, (bool, DateTime, double)), long), bool>>)((l, r) => l == r)
            var actual = GetDebugView(@"(Expression<Func<(int, (string, (bool, DateTime, double)), long), (int, (string, (bool, DateTime, double)), long), bool>>)((l, r) => l == r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64],System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]]"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]]"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <CSharpTupleEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]]"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]]"" Id=""5"" Name=""right"" />
              </Right>
              <EqualityChecks>
                <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                    <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.String, System.String)"">
                      <Left>
                        <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                      </Right>
                    </Equal>
                  </Body>
                </Lambda>
                <Lambda Type=""System.Func`3[System.ValueTuple`3[System.Boolean,System.DateTime,System.Double],System.ValueTuple`3[System.Boolean,System.DateTime,System.Double],System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]"" Id=""8"" Name=""left"" />
                    <Parameter Type=""System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]"" Id=""9"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <CSharpTupleEqual Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]"" Id=""8"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]"" Id=""9"" Name=""right"" />
                      </Right>
                      <EqualityChecks>
                        <Lambda Type=""System.Func`3[System.Boolean,System.Boolean,System.Boolean]"">
                          <Parameters>
                            <Parameter Type=""System.Boolean"" Id=""10"" Name=""left"" />
                            <Parameter Type=""System.Boolean"" Id=""11"" Name=""right"" />
                          </Parameters>
                          <Body>
                            <Equal Type=""System.Boolean"">
                              <Left>
                                <Parameter Type=""System.Boolean"" Id=""10"" Name=""left"" />
                              </Left>
                              <Right>
                                <Parameter Type=""System.Boolean"" Id=""11"" Name=""right"" />
                              </Right>
                            </Equal>
                          </Body>
                        </Lambda>
                        <Lambda Type=""System.Func`3[System.DateTime,System.DateTime,System.Boolean]"">
                          <Parameters>
                            <Parameter Type=""System.DateTime"" Id=""12"" Name=""left"" />
                            <Parameter Type=""System.DateTime"" Id=""13"" Name=""right"" />
                          </Parameters>
                          <Body>
                            <Equal Type=""System.Boolean"" Method=""Boolean op_Equality(System.DateTime, System.DateTime)"">
                              <Left>
                                <Parameter Type=""System.DateTime"" Id=""12"" Name=""left"" />
                              </Left>
                              <Right>
                                <Parameter Type=""System.DateTime"" Id=""13"" Name=""right"" />
                              </Right>
                            </Equal>
                          </Body>
                        </Lambda>
                        <Lambda Type=""System.Func`3[System.Double,System.Double,System.Boolean]"">
                          <Parameters>
                            <Parameter Type=""System.Double"" Id=""14"" Name=""left"" />
                            <Parameter Type=""System.Double"" Id=""15"" Name=""right"" />
                          </Parameters>
                          <Body>
                            <Equal Type=""System.Boolean"">
                              <Left>
                                <Parameter Type=""System.Double"" Id=""14"" Name=""left"" />
                              </Left>
                              <Right>
                                <Parameter Type=""System.Double"" Id=""15"" Name=""right"" />
                              </Right>
                            </Equal>
                          </Body>
                        </Lambda>
                      </EqualityChecks>
                    </CSharpTupleEqual>
                  </Body>
                </Lambda>
              </EqualityChecks>
            </CSharpTupleEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Int64,System.Int64,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int64"" Id=""16"" Name=""left"" />
            <Parameter Type=""System.Int64"" Id=""17"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int64"" Id=""16"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int64"" Id=""17"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2CC6_948A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2CC6_948A() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_B81E_0DAE()
        {
            // (Expression<Func<(int, (string, (bool, DateTime, double)), long), (int, (string, (bool, DateTime, double)), long), bool>>)((l, r) => l != r)
            var actual = GetDebugView(@"(Expression<Func<(int, (string, (bool, DateTime, double)), long), (int, (string, (bool, DateTime, double)), long), bool>>)((l, r) => l != r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64],System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleNotEqual Type=""System.Boolean"">
      <Left>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64]"" Id=""0"" Name=""l"" />
      </Left>
      <Right>
        <Parameter Type=""System.ValueTuple`3[System.Int32,System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Int64]"" Id=""1"" Name=""r"" />
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""2"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""3"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]],System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]]"" Id=""4"" Name=""left"" />
            <Parameter Type=""System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]]"" Id=""5"" Name=""right"" />
          </Parameters>
          <Body>
            <CSharpTupleNotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]]"" Id=""4"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.ValueTuple`2[System.String,System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]]"" Id=""5"" Name=""right"" />
              </Right>
              <EqualityChecks>
                <Lambda Type=""System.Func`3[System.String,System.String,System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                    <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.String, System.String)"">
                      <Left>
                        <Parameter Type=""System.String"" Id=""6"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.String"" Id=""7"" Name=""right"" />
                      </Right>
                    </NotEqual>
                  </Body>
                </Lambda>
                <Lambda Type=""System.Func`3[System.ValueTuple`3[System.Boolean,System.DateTime,System.Double],System.ValueTuple`3[System.Boolean,System.DateTime,System.Double],System.Boolean]"">
                  <Parameters>
                    <Parameter Type=""System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]"" Id=""8"" Name=""left"" />
                    <Parameter Type=""System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]"" Id=""9"" Name=""right"" />
                  </Parameters>
                  <Body>
                    <CSharpTupleNotEqual Type=""System.Boolean"">
                      <Left>
                        <Parameter Type=""System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]"" Id=""8"" Name=""left"" />
                      </Left>
                      <Right>
                        <Parameter Type=""System.ValueTuple`3[System.Boolean,System.DateTime,System.Double]"" Id=""9"" Name=""right"" />
                      </Right>
                      <EqualityChecks>
                        <Lambda Type=""System.Func`3[System.Boolean,System.Boolean,System.Boolean]"">
                          <Parameters>
                            <Parameter Type=""System.Boolean"" Id=""10"" Name=""left"" />
                            <Parameter Type=""System.Boolean"" Id=""11"" Name=""right"" />
                          </Parameters>
                          <Body>
                            <NotEqual Type=""System.Boolean"">
                              <Left>
                                <Parameter Type=""System.Boolean"" Id=""10"" Name=""left"" />
                              </Left>
                              <Right>
                                <Parameter Type=""System.Boolean"" Id=""11"" Name=""right"" />
                              </Right>
                            </NotEqual>
                          </Body>
                        </Lambda>
                        <Lambda Type=""System.Func`3[System.DateTime,System.DateTime,System.Boolean]"">
                          <Parameters>
                            <Parameter Type=""System.DateTime"" Id=""12"" Name=""left"" />
                            <Parameter Type=""System.DateTime"" Id=""13"" Name=""right"" />
                          </Parameters>
                          <Body>
                            <NotEqual Type=""System.Boolean"" Method=""Boolean op_Inequality(System.DateTime, System.DateTime)"">
                              <Left>
                                <Parameter Type=""System.DateTime"" Id=""12"" Name=""left"" />
                              </Left>
                              <Right>
                                <Parameter Type=""System.DateTime"" Id=""13"" Name=""right"" />
                              </Right>
                            </NotEqual>
                          </Body>
                        </Lambda>
                        <Lambda Type=""System.Func`3[System.Double,System.Double,System.Boolean]"">
                          <Parameters>
                            <Parameter Type=""System.Double"" Id=""14"" Name=""left"" />
                            <Parameter Type=""System.Double"" Id=""15"" Name=""right"" />
                          </Parameters>
                          <Body>
                            <NotEqual Type=""System.Boolean"">
                              <Left>
                                <Parameter Type=""System.Double"" Id=""14"" Name=""left"" />
                              </Left>
                              <Right>
                                <Parameter Type=""System.Double"" Id=""15"" Name=""right"" />
                              </Right>
                            </NotEqual>
                          </Body>
                        </Lambda>
                      </EqualityChecks>
                    </CSharpTupleNotEqual>
                  </Body>
                </Lambda>
              </EqualityChecks>
            </CSharpTupleNotEqual>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Int64,System.Int64,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int64"" Id=""16"" Name=""left"" />
            <Parameter Type=""System.Int64"" Id=""17"" Name=""right"" />
          </Parameters>
          <Body>
            <NotEqual Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int64"" Id=""16"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int64"" Id=""17"" Name=""right"" />
              </Right>
            </NotEqual>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleNotEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B81E_0DAE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B81E_0DAE() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_BC36_A04C()
        {
            // (Expression<Func<(char, byte), (char, byte), bool>>)((l, r) => l == r)
            var actual = GetDebugView(@"(Expression<Func<(char, byte), (char, byte), bool>>)((l, r) => l == r)");
            var expected = @"
<Lambda Type=""System.Func`3[System.ValueTuple`2[System.Char,System.Byte],System.ValueTuple`2[System.Char,System.Byte],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.ValueTuple`2[System.Char,System.Byte]"" Id=""0"" Name=""l"" />
    <Parameter Type=""System.ValueTuple`2[System.Char,System.Byte]"" Id=""1"" Name=""r"" />
  </Parameters>
  <Body>
    <CSharpTupleEqual Type=""System.Boolean"">
      <Left>
        <CSharpTupleConvert Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
          <Operand>
            <Parameter Type=""System.ValueTuple`2[System.Char,System.Byte]"" Id=""0"" Name=""l"" />
          </Operand>
          <ElementConversions>
            <Lambda Type=""System.Func`2[System.Char,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Char"" Id=""2"" Name=""p"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Char"" Id=""2"" Name=""p"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
            <Lambda Type=""System.Func`2[System.Byte,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Byte"" Id=""3"" Name=""p"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Byte"" Id=""3"" Name=""p"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </ElementConversions>
        </CSharpTupleConvert>
      </Left>
      <Right>
        <CSharpTupleConvert Type=""System.ValueTuple`2[System.Int32,System.Int32]"">
          <Operand>
            <Parameter Type=""System.ValueTuple`2[System.Char,System.Byte]"" Id=""1"" Name=""r"" />
          </Operand>
          <ElementConversions>
            <Lambda Type=""System.Func`2[System.Char,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Char"" Id=""4"" Name=""p"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Char"" Id=""4"" Name=""p"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
            <Lambda Type=""System.Func`2[System.Byte,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Byte"" Id=""5"" Name=""p"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Byte"" Id=""5"" Name=""p"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </ElementConversions>
        </CSharpTupleConvert>
      </Right>
      <EqualityChecks>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""6"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""7"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""6"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""7"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
        <Lambda Type=""System.Func`3[System.Int32,System.Int32,System.Boolean]"">
          <Parameters>
            <Parameter Type=""System.Int32"" Id=""8"" Name=""left"" />
            <Parameter Type=""System.Int32"" Id=""9"" Name=""right"" />
          </Parameters>
          <Body>
            <Equal Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""8"" Name=""left"" />
              </Left>
              <Right>
                <Parameter Type=""System.Int32"" Id=""9"" Name=""right"" />
              </Right>
            </Equal>
          </Body>
        </Lambda>
      </EqualityChecks>
    </CSharpTupleEqual>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BC36_A04C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BC36_A04C() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { /* Assert.Inconclusive(); */ Assert.Fail("INCONCLUSIVE"); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp73_TupleEquality
    {
        partial class Reviewed
        {
            public override void CompilerTest_41C6_D6EC() => OK();
            public override void CompilerTest_1183_EE62() => OK();
            public override void CompilerTest_E39A_78A2() => OK();
            public override void CompilerTest_9A78_F30E() => OK();
            public override void CompilerTest_B73C_68B9() => OK();
            public override void CompilerTest_530F_CF5A() => OK();
            public override void CompilerTest_E4CE_9D5B() => OK();
            public override void CompilerTest_0B1F_7212() => OK();
            public override void CompilerTest_A78C_7F57() => OK();
            public override void CompilerTest_235E_24DF() => OK();
            public override void CompilerTest_D6B8_C461() => OK();
            public override void CompilerTest_5CFE_A5A4() => OK();
            public override void CompilerTest_27FD_7B61() => OK();
            public override void CompilerTest_157E_20F1() => OK();
            public override void CompilerTest_2CC6_948A() => OK();
            public override void CompilerTest_B81E_0DAE() => OK();
            public override void CompilerTest_BC36_A04C() => OK();
        }
    }
}
*/
}
