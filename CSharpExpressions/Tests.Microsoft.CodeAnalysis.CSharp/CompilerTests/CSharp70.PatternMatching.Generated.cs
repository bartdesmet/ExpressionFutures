// Prototyping extended expression trees for C#.
//
// bartde - December 2021

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Xunit;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    public partial class CompilerTests_CSharp70_PatternMatching
    {
        [Fact]
        public void CompilerTest_1065_9158()
        {
            // (Expression<Func<object, bool>>)(o => o is var x)
            var actual = GetDebugView(@"(Expression<Func<object, bool>>)(o => o is var x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Boolean"">
      <Variables>
        <Parameter Type=""System.Object"" Id=""1"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpIsPattern Type=""System.Boolean"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
          </Expression>
          <Pattern>
            <VarPattern InputType=""System.Object"" NarrowedType=""System.Object"">
              <Variable>
                <Parameter Type=""System.Object"" Id=""1"" Name=""x"" />
              </Variable>
              <Variable>
                <Parameter Type=""System.Object"" Id=""1"" Name=""x"" />
              </Variable>
            </VarPattern>
          </Pattern>
        </CSharpIsPattern>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Boolean"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1065_9158();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1065_9158() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_9792_2260()
        {
            // (Expression<Func<int?,   bool>>)(o => o is var x)
            var actual = GetDebugView(@"(Expression<Func<int?,   bool>>)(o => o is var x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Boolean"">
      <Variables>
        <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpIsPattern Type=""System.Boolean"">
          <Expression>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""o"" />
          </Expression>
          <Pattern>
            <VarPattern InputType=""System.Nullable`1[System.Int32]"" NarrowedType=""System.Nullable`1[System.Int32]"">
              <Variable>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""x"" />
              </Variable>
              <Variable>
                <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""1"" Name=""x"" />
              </Variable>
            </VarPattern>
          </Pattern>
        </CSharpIsPattern>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Boolean"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9792_2260();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9792_2260() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_0C5C_E70E()
        {
            // (Expression<Func<int,    bool>>)(o => o is var x)
            var actual = GetDebugView(@"(Expression<Func<int,    bool>>)(o => o is var x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Boolean"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpIsPattern Type=""System.Boolean"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""o"" />
          </Expression>
          <Pattern>
            <VarPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
              <Variable>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Variable>
              <Variable>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Variable>
            </VarPattern>
          </Pattern>
        </CSharpIsPattern>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Boolean"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0C5C_E70E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0C5C_E70E() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_6A5C_E12F()
        {
            // (Expression<Func<object, bool>>)(o => o is int x)
            var actual = GetDebugView(@"(Expression<Func<object, bool>>)(o => o is int x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Boolean"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpIsPattern Type=""System.Boolean"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
          </Expression>
          <Pattern>
            <DeclarationPattern InputType=""System.Object"" NarrowedType=""System.Int32"" Type=""System.Int32"">
              <Variable>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Variable>
            </DeclarationPattern>
          </Pattern>
        </CSharpIsPattern>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Boolean"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6A5C_E12F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6A5C_E12F() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_F64B_2FFA()
        {
            // (Expression<Func<int?,   bool>>)(o => o is int x)
            var actual = GetDebugView(@"(Expression<Func<int?,   bool>>)(o => o is int x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Boolean"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpIsPattern Type=""System.Boolean"">
          <Expression>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""o"" />
          </Expression>
          <Pattern>
            <DeclarationPattern InputType=""System.Nullable`1[System.Int32]"" NarrowedType=""System.Int32"" Type=""System.Int32"">
              <Variable>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Variable>
            </DeclarationPattern>
          </Pattern>
        </CSharpIsPattern>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Boolean"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F64B_2FFA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F64B_2FFA() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_C2E0_5E14()
        {
            // (Expression<Func<int,    bool>>)(o => o is int x)
            var actual = GetDebugView(@"(Expression<Func<int,    bool>>)(o => o is int x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Boolean"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
      </Variables>
      <Statements>
        <CSharpIsPattern Type=""System.Boolean"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""o"" />
          </Expression>
          <Pattern>
            <DeclarationPattern InputType=""System.Int32"" NarrowedType=""System.Int32"" Type=""System.Int32"">
              <Variable>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Variable>
            </DeclarationPattern>
          </Pattern>
        </CSharpIsPattern>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Boolean"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C2E0_5E14();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C2E0_5E14() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_E7AD_1A3A()
        {
            // (Expression<Func<object, bool>>)(o => o is null)
            var actual = GetDebugView(@"(Expression<Func<object, bool>>)(o => o is null)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Object"" NarrowedType=""System.Object"">
          <Constant Type=""System.Object"" Value=""null"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E7AD_1A3A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E7AD_1A3A() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_8AB8_BC27()
        {
            // (Expression<Func<string, bool>>)(o => o is null)
            var actual = GetDebugView(@"(Expression<Func<string, bool>>)(o => o is null)");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.String"" NarrowedType=""System.String"">
          <Constant Type=""System.String"" Value=""null"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8AB8_BC27();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8AB8_BC27() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_DD5E_7EDD()
        {
            // (Expression<Func<int?,   bool>>)(o => o is null)
            var actual = GetDebugView(@"(Expression<Func<int?,   bool>>)(o => o is null)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Nullable`1[System.Int32]"" NarrowedType=""System.Nullable`1[System.Int32]"">
          <Constant Type=""System.Nullable`1[System.Int32]"" Value=""null"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DD5E_7EDD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DD5E_7EDD() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_BCC8_0566()
        {
            // (Expression<Func<object, bool>>)(o => o is 42)
            var actual = GetDebugView(@"(Expression<Func<object, bool>>)(o => o is 42)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Object"" NarrowedType=""System.Int32"">
          <Constant Type=""System.Int32"" Value=""42"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BCC8_0566();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BCC8_0566() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_9EC8_A4DC()
        {
            // (Expression<Func<int?,   bool>>)(o => o is 42)
            var actual = GetDebugView(@"(Expression<Func<int?,   bool>>)(o => o is 42)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Nullable`1[System.Int32],System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Nullable`1[System.Int32]"" NarrowedType=""System.Int32"">
          <Constant Type=""System.Int32"" Value=""42"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9EC8_A4DC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9EC8_A4DC() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_6BE1_D655()
        {
            // (Expression<Func<int,    bool>>)(o => o is 42)
            var actual = GetDebugView(@"(Expression<Func<int,    bool>>)(o => o is 42)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Int32,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Int32"" NarrowedType=""System.Int32"">
          <Constant Type=""System.Int32"" Value=""42"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6BE1_D655();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6BE1_D655() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_6C86_EFA0()
        {
            // (Expression<Func<object, bool>>)(o => o is 42UL)
            var actual = GetDebugView(@"(Expression<Func<object, bool>>)(o => o is 42UL)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Object"" NarrowedType=""System.UInt64"">
          <Constant Type=""System.UInt64"" Value=""42"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6C86_EFA0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6C86_EFA0() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_06E8_C407()
        {
            // (Expression<Func<object, bool>>)(o => o is Math.PI)
            var actual = GetDebugView(@"(Expression<Func<object, bool>>)(o => o is Math.PI)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Object"" NarrowedType=""System.Double"">
          <Constant Type=""System.Double"" Value=""3.141592653589793"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_06E8_C407();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_06E8_C407() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_D3F0_6F64()
        {
            // (Expression<Func<object, bool>>)(o => o is ConsoleColor.Red)
            var actual = GetDebugView(@"(Expression<Func<object, bool>>)(o => o is ConsoleColor.Red)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Object"" NarrowedType=""System.ConsoleColor"">
          <Constant Type=""System.ConsoleColor"" Value=""Red"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D3F0_6F64();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D3F0_6F64() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_2177_7A0C()
        {
            // (Expression<Func<object, bool>>)(o => o is "bar")
            var actual = GetDebugView(@"(Expression<Func<object, bool>>)(o => o is ""bar"")");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Object"" NarrowedType=""System.String"">
          <Constant Type=""System.String"" Value=""bar"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2177_7A0C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2177_7A0C() => INCONCLUSIVE(); }

        [Fact]
        public void CompilerTest_4EE9_55F5()
        {
            // (Expression<Func<object, bool>>)(o => o is 4.95m)
            var actual = GetDebugView(@"(Expression<Func<object, bool>>)(o => o is 4.95m)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Boolean]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpIsPattern Type=""System.Boolean"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
      </Expression>
      <Pattern>
        <ConstantPattern InputType=""System.Object"" NarrowedType=""System.Decimal"">
          <Constant Type=""System.Decimal"" Value=""4.95"" />
        </ConstantPattern>
      </Pattern>
    </CSharpIsPattern>
  </Body>
</Lambda>";
            Assert.Equal(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4EE9_55F5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4EE9_55F5() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { /* Assert.Inconclusive(); */ Assert.True(false, "INCONCLUSIVE"); }
        }

        partial class Reviewed : Review
        {
            private void OK() { }
            private void FAIL(string message = "") { Assert.True(false, message); }
        }

        private readonly Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests_CSharp70_PatternMatching
    {
        partial class Reviewed
        {
            public override void CompilerTest_1065_9158() => OK();
            public override void CompilerTest_9792_2260() => OK();
            public override void CompilerTest_0C5C_E70E() => OK();
            public override void CompilerTest_6A5C_E12F() => OK();
            public override void CompilerTest_F64B_2FFA() => OK();
            public override void CompilerTest_C2E0_5E14() => OK();
            public override void CompilerTest_E7AD_1A3A() => OK();
            public override void CompilerTest_8AB8_BC27() => OK();
            public override void CompilerTest_DD5E_7EDD() => OK();
            public override void CompilerTest_BCC8_0566() => OK();
            public override void CompilerTest_9EC8_A4DC() => OK();
            public override void CompilerTest_6BE1_D655() => OK();
            public override void CompilerTest_6C86_EFA0() => OK();
            public override void CompilerTest_06E8_C407() => OK();
            public override void CompilerTest_D3F0_6F64() => OK();
            public override void CompilerTest_2177_7A0C() => OK();
            public override void CompilerTest_4EE9_55F5() => OK();
        }
    }
}
*/
}
