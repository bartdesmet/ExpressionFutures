// Prototyping extended expression trees for C#.
//
// bartde - December 2021

<#
// NB: When ading a test, it will be *SKIPPED* by default. In order to enable it, review the generated
//     test code and go to the .Verify.cs file to add an entry acknowledging the manual inspection by
//     providing an outcome.

// NB: Editing and saving this file can take a *VERY LONG* time because it invokes the C# compiler at
//     text template processing time. Be patient while Visual Studio appears to hang.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#
var name = "CSharp110_PatternMatching";

var exprs = new[]
{
    // List pattern - Array
    "(Expression<Func<int[], bool>>)(xs => xs is [])",
    "(Expression<Func<int[], bool>>)(xs => xs is [1])",
    "(Expression<Func<int[], bool>>)(xs => xs is [1, 2])",
    "(Expression<Func<int[], bool>>)(xs => xs is [1, _, 3])",

    // List pattern - String
    "(Expression<Func<string, bool>>)(s => s is [])",
    "(Expression<Func<string, bool>>)(s => s is ['a'])",
    "(Expression<Func<string, bool>>)(s => s is ['a', >= '0' and <= '9'])",

    // List pattern - List
    "(Expression<Func<List<int>, bool>>)(xs => xs is [])",
    "(Expression<Func<List<int>, bool>>)(xs => xs is [1])",
    "(Expression<Func<List<int>, bool>>)(xs => xs is [1, 2])",
    "(Expression<Func<List<int>, bool>>)(xs => xs is [1, _, 3])",

    // Slice pattern - Array
    "(Expression<Func<int[], bool>>)(xs => xs is [..])",
    "(Expression<Func<int[], bool>>)(xs => xs is [1, ..])",
    "(Expression<Func<int[], bool>>)(xs => xs is [.., 2])",
    "(Expression<Func<int[], bool>>)(xs => xs is [1, .., 2])",
    "(Expression<Func<int[], bool>>)(xs => xs is [1, .. [3, .., 4], 2])",

    // Slice pattern - String
    "(Expression<Func<string, bool>>)(s => s is [..])",
    "(Expression<Func<string, bool>>)(s => s is ['a', ..])",
    "(Expression<Func<string, bool>>)(s => s is [.., 'z'])",
    "(Expression<Func<string, bool>>)(s => s is ['a', .. { Length: 24 }, 'z'])",

    // Slice pattern - List
    "(Expression<Func<List<int>, bool>>)(xs => xs is [..])",
    "(Expression<Func<List<int>, bool>>)(xs => xs is [1, ..])",
    "(Expression<Func<List<int>, bool>>)(xs => xs is [.., 2])",
    "(Expression<Func<List<int>, bool>>)(xs => xs is [1, .., 2])",
};
#>
<#@ include file="CompilerTests.t4" #>