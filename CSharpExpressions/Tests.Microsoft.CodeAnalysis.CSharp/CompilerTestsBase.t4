<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.ComponentModel.Primitives" #>
<#@ assembly name="System.Diagnostics.Process" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#
string GeneratorProjectName = "Tests.Microsoft.CodeAnalysis.CSharp.Generator";

Func<string> FindSolutionDir = () =>
{
    var dir = this.Host.ResolvePath("");

    while (!string.IsNullOrEmpty(dir))
    {
        dir = Path.GetDirectoryName(dir);

        var candidate = Path.Combine(dir, GeneratorProjectName);

        if (Directory.Exists(candidate))
        {
            break;
        }
    }

    if (string.IsNullOrEmpty(dir))
    {
        return null;
    }

    return dir;
};

Func<string> FindGenerator = () =>
{
    var sln = FindSolutionDir();

    if (sln == null)
    {
        return null;
    }

    var generatorProject = Path.Combine(sln, GeneratorProjectName);

    var generatorBin = Path.Combine(generatorProject, "bin");

    if (!Directory.Exists(generatorBin))
    {
        return null;
    }

    var dbg = Path.Combine(generatorBin, "Debug");
    var rel = Path.Combine(generatorBin, "Release");

    if (Directory.Exists(dbg))
    {
        generatorBin = dbg;
    }
    else if (Directory.Exists(rel))
    {
        generatorBin = rel;
    }
    else
    {
        return null;
    }

    var net60 = Path.Combine(generatorBin, "net6.0");

    if (Directory.Exists(net60))
    {
        generatorBin = net60;
    }
    else
    {
        return null;
    }

    var exe = Path.Combine(net60, GeneratorProjectName + ".exe");

    if (File.Exists(exe))
    {
        return exe;
    }

    return null;
};

var exe = FindGenerator();
var cmd = name + " " + generateCSharp.ToString().ToLower() + " " + reduce.ToString().ToLower();

var psi = new ProcessStartInfo(exe, cmd)
{
    CreateNoWindow = true,
    UseShellExecute = false,
    RedirectStandardInput = true,
    RedirectStandardOutput = true
};

var p = Process.Start(psi);

var input = p.StandardInput;
var output = p.StandardOutput;

foreach (var expr in exprs)
{
    input.WriteLine(expr);
}

input.WriteLine();

var res = output.ReadToEnd();
#>
<#=res#>