// Prototyping extended expression trees for C#.
//
// bartde - January 2022

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace System.Runtime.CompilerServices
{
<#
var ordinals = new[] { "", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth" };

for (int i = 0; i <= 16; i++)
{
    var genPars = string.Join(", ", new[] { "THandler" }.Concat(Enumerable.Range(1, i).Select(j => "TArg" + j)));
    var pars = string.Join(", ", new[] { "int literalLength, int formattedCount" }.Concat(Enumerable.Range(1, i).Select(j => "TArg" + j + " arg" + j)));
#>
    /// <summary>
    /// This API supports the product infrastructure and is not intended to be used directly from your code.
    /// Provides a delegate type used for interpolated string handlers.
    /// </summary>
    /// <typeparam name="THandler">The type of the handler.</typeparam>
<#
for (int j = 1; j <= i; j++)
{
#>
    /// <typeparam name="TArg<#=j#>">The type of the <#=ordinals[j]#> argument to pass to construct the handler.</typeparam>
<#
}
#>
    /// <param name="literalLength">The combined length of the string literals in the string interpolations.</param>
    /// <param name="formattedCount">The number of string interpolation holes.</param>
<#
for (int j = 1; j <= i; j++)
{
#>
    /// <param name="arg<#=j#>">The <#=ordinals[j]#> argument to pass to construct the handler.</param>
<#
}
#>
    /// <returns>The instance of the handler.</returns>
    public delegate THandler ConstructInterpolatedStringHandler<<#=genPars#>>(<#=pars#>);

<#
}

for (int i = 0; i <= 16; i++)
{
    var genPars = string.Join(", ", new[] { "THandler" }.Concat(Enumerable.Range(1, i).Select(j => "TArg" + j)));
    var pars = string.Join(", ", new[] { "int literalLength, int formattedCount" }.Concat(Enumerable.Range(1, i).Select(j => "TArg" + j + " arg" + j)).Concat(new[] { "out bool appendShouldProceed" }));
#>
    /// <summary>
    /// This API supports the product infrastructure and is not intended to be used directly from your code.
    /// Provides a delegate type used for interpolated string handlers.
    /// </summary>
    /// <typeparam name="THandler">The type of the handler.</typeparam>
<#
for (int j = 1; j <= i; j++)
{
#>
    /// <typeparam name="TArg<#=j#>">The type of the <#=ordinals[j]#> argument to pass to construct the handler.</typeparam>
<#
}
#>
    /// <param name="literalLength">The combined length of the string literals in the string interpolations.</param>
    /// <param name="formattedCount">The number of string interpolation holes.</param>
<#
for (int j = 1; j <= i; j++)
{
#>
    /// <param name="arg<#=j#>">The <#=ordinals[j]#> argument to pass to construct the handler.</param>
<#
}
#>
    /// <param name="appendShouldProceed">A Boolean value indicating whether subsequent append calls should be made.</param>
    /// <returns>The instance of the handler.</returns>
    public delegate THandler ConstructInterpolatedStringHandlerWithShouldAppend<<#=genPars#>>(<#=pars#>);

<#
}
#>
    internal static class ConstructInterpolatedStringHandlerDelegateHelpers
    {
        internal static Type? GetConstructInterpolatedStringHandlerType(Type[] types) =>
            types.Length switch
            {
<#
for (int i = 0; i <= 16; i++)
{
    var commas = new string(',', i);
#>
                <#=i + 1#> => typeof(ConstructInterpolatedStringHandler<<#=commas#>>).MakeGenericType(types),
<#
}
#>
                _ => null
            };

        internal static Type? GetConstructInterpolatedStringHandlerTypeWithShouldAppend(Type[] types) =>
            types.Length switch
            {
<#
for (int i = 0; i <= 16; i++)
{
    var commas = new string(',', i);
#>
                <#=i + 1#> => typeof(ConstructInterpolatedStringHandlerWithShouldAppend<<#=commas#>>).MakeGenericType(types),
<#
}
#>
                _ => null
            };
    }
}
