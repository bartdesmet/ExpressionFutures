// Prototyping extended expression trees for C#.
//
// bartde - December 2021

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace System.Runtime.CompilerServices
{
<#
var ordinals = new[] { "", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth" };

for (int i = 1; i <= 16; i++)
{
    var genPars = string.Join(", ", new[] { "TObject" }.Concat(Enumerable.Range(1, i).Select(j => "TOutput" + j)));
    var pars = string.Join(", ", Enumerable.Range(1, i).Select(j => "out TOutput" + j + " output" + j));
#>
    /// <summary>
    /// This API supports the product infrastructure and is not intended to be used directly from your code.
    /// Provides a delegate type used in deconstruction lambda expressions.
    /// </summary>
    /// <typeparam name="TObject">The type of the object to deconstruct.</typeparam>
<#
for (int j = 1; j <= i; j++)
{
#>
    /// <typeparam name="TOutput<#=j#>">The type of the <#=ordinals[j]#> component obtained by deconstruction.</typeparam>
<#
}
#>
    public delegate void DeconstructAction<<#=genPars#>>(TObject input, <#=pars#>);

<#
}
#>
    internal static class DeconstructActionDelegateHelpers
    {
        internal static Type? GetDeconstructActionType(Type[] types) =>
            types.Length switch
            {
<#
for (int i = 2; i <= 17; i++)
{
    var commas = new string(',', i - 1);
#>
                <#=i#> => typeof(DeconstructAction<<#=commas#>>).MakeGenericType(types),
<#
}
#>
                _ => null
            };
    }
}
