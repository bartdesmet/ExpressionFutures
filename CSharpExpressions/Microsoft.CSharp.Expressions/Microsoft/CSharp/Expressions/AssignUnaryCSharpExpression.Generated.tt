<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var nodes = new[] { "PreIncrementAssign", "PreDecrementAssign", "PostIncrementAssign", "PostDecrementAssign" };
var checkedNodes = new[] { "PreIncrementAssignChecked", "PreDecrementAssignChecked", "PostIncrementAssignChecked", "PostDecrementAssignChecked" };
#>
// Prototyping extended expression trees for C#.
//
// bartde - November 2015

#nullable enable

using System.Dynamic.Utils;
using System.Linq.Expressions;
using System.Reflection;

namespace Microsoft.CSharp.Expressions
{
    partial class AssignUnaryCSharpExpression
    {
        private static ExpressionType ConvertNodeType(CSharpExpressionType nodeType) =>
            nodeType switch
            {
<#
var i = 0;
foreach (var node in nodes)
{
    var checkedNode = checkedNodes[i];
#>
                CSharpExpressionType.<#=node#> => ExpressionType.<#=node#>,
                CSharpExpressionType.<#=checkedNode#> => ExpressionType.<#=node#>,
<#
    i++;
}
#>
                _ => throw ContractUtils.Unreachable
            };
    }

    partial class CSharpExpression
    {
<#
foreach (var node in nodes)
{
#>
        /// <summary>
        /// Creates a <see cref="AssignUnaryCSharpExpression" /> that represents a compound assignment of type <#=node#>.
        /// </summary>
        /// <returns>A <see cref="AssignUnaryCSharpExpression" /> that represents the operation.</returns>
        /// <param name="operand">An <see cref="Expression" /> to set the <see cref="UnaryCSharpExpression.Operand" /> property equal to.</param>
        public static new AssignUnaryCSharpExpression <#=node#>(Expression operand) =>
            <#=node#>(operand, method: null);

        /// <summary>
        /// Creates a <see cref="AssignUnaryCSharpExpression" /> that represents a compound assignment of type <#=node#>.
        /// </summary>
        /// <returns>A <see cref="AssignUnaryCSharpExpression" /> that represents the operation.</returns>
        /// <param name="operand">An <see cref="Expression" /> to set the <see cref="UnaryCSharpExpression.Operand" /> property equal to.</param>
        /// <param name="method">A <see cref="MethodInfo" /> to set the <see cref="AssignUnaryCSharpExpression.Method" /> property equal to.</param>
        public static new AssignUnaryCSharpExpression <#=node#>(Expression operand, MethodInfo? method) =>
            MakeUnaryAssignCore(CSharpExpressionType.<#=node#>, operand, method);

<#
}
#>
<#
foreach (var node in checkedNodes)
{
#>
        /// <summary>
        /// Creates a <see cref="AssignUnaryCSharpExpression" /> that represents a compound assignment of type <#=node#>.
        /// </summary>
        /// <returns>A <see cref="AssignUnaryCSharpExpression" /> that represents the operation.</returns>
        /// <param name="operand">An <see cref="Expression" /> to set the <see cref="UnaryCSharpExpression.Operand" /> property equal to.</param>
        public static AssignUnaryCSharpExpression <#=node#>(Expression operand) =>
            <#=node#>(operand, method: null);

        /// <summary>
        /// Creates a <see cref="AssignUnaryCSharpExpression" /> that represents a compound assignment of type <#=node#>.
        /// </summary>
        /// <returns>A <see cref="AssignUnaryCSharpExpression" /> that represents the operation.</returns>
        /// <param name="operand">An <see cref="Expression" /> to set the <see cref="UnaryCSharpExpression.Operand" /> property equal to.</param>
        /// <param name="method">A <see cref="MethodInfo" /> to set the <see cref="AssignUnaryCSharpExpression.Method" /> property equal to.</param>
        public static AssignUnaryCSharpExpression <#=node#>(Expression operand, MethodInfo? method) =>
            MakeUnaryAssignCore(CSharpExpressionType.<#=node#>, operand, method);

<#
}
#>
    }
}
