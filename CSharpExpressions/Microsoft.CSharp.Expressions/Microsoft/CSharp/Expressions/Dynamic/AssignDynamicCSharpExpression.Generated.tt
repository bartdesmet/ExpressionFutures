<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var bts = new[]
{
    "AddAssign",
    "AndAssign",
    "DivideAssign",
    "ExclusiveOrAssign",
    "LeftShiftAssign",
    "ModuloAssign",
    "MultiplyAssign",
    "OrAssign",
    "RightShiftAssign",
    "SubtractAssign",
    "AddAssignChecked",
    "MultiplyAssignChecked",
    "SubtractAssignChecked",

    // NB, The following are not supported by design
    // ExpressionType.Assign,
	// ExpressionType.PowerAssign,
};

var uts = new[]
{
    "PreIncrementAssign",
    "PreDecrementAssign",
    "PostIncrementAssign",
    "PostDecrementAssign",
    "PreIncrementAssignChecked",
    "PreDecrementAssignChecked",
    "PostIncrementAssignChecked",
    "PostDecrementAssignChecked",
};
#>
// Prototyping extended expression trees for C#.
//
// bartde - December 2015

using System;
using System.Linq.Expressions;

using Microsoft.CSharp.RuntimeBinder;

using LinqError = System.Linq.Expressions.Error;

namespace Microsoft.CSharp.Expressions
{
    partial class DynamicCSharpExpression
    {
<#
foreach (var et in bts)
{
#>
        /// <summary>
        /// Creates a new expression representing a dynamically bound binary '<#=et#>' operation.
        /// </summary>
        /// <param name="left">The expression representing the left operand of the operation.</param>
        /// <param name="right">The expression representing the right operand of the operation.</param>
        /// <returns>A new expression representing a dynamically bound binary '<#=et#>' operation.</returns>
        public static AssignBinaryDynamicCSharpExpression Dynamic<#=et#>(Expression left, Expression right) =>
            MakeDynamicBinaryAssign(CSharpExpressionType.<#=et#>, left, right);

        /// <summary>
        /// Creates a new expression representing a dynamically bound binary '<#=et#>' operation.
        /// </summary>
        /// <param name="left">The dynamic argument representing the left operand of the operation.</param>
        /// <param name="right">The dynamic argument representing the right operand of the operation.</param>
        /// <returns>A new expression representing a dynamically bound binary '<#=et#>' operation.</returns>
        public static AssignBinaryDynamicCSharpExpression Dynamic<#=et#>(DynamicCSharpArgument left, DynamicCSharpArgument right) =>
            MakeDynamicBinaryAssign(CSharpExpressionType.<#=et#>, left, right);

        /// <summary>
        /// Creates a new expression representing a dynamically bound binary '<#=et#>' operation with the specified binder flags.
        /// </summary>
        /// <param name="left">The dynamic argument representing the left operand of the operation.</param>
        /// <param name="right">The dynamic argument representing the right operand of the operation.</param>
        /// <param name="binderFlags">The binder flags to use for the dynamic operation.</param>
        /// <returns>A new expression representing a dynamically bound binary '<#=et#>' operation.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Inherited from the type name.")]
        public static AssignBinaryDynamicCSharpExpression Dynamic<#=et#>(DynamicCSharpArgument left, DynamicCSharpArgument right, CSharpBinderFlags binderFlags) =>
            MakeDynamicBinaryAssign(CSharpExpressionType.<#=et#>, left, right, binderFlags);

        /// <summary>
        /// Creates a new expression representing a dynamically bound binary '<#=et#>' operation with the specified binder flags and the specified type context.
        /// </summary>
        /// <param name="left">The dynamic argument representing the left operand of the operation.</param>
        /// <param name="right">The dynamic argument representing the right operand of the operation.</param>
        /// <param name="binderFlags">The binder flags to use for the dynamic operation.</param>
        /// <param name="context">The type representing the context in which the dynamic operation is bound.</param>
        /// <returns>A new expression representing a dynamically bound binary '<#=et#>' operation.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Inherited from the type name.")]
        public static AssignBinaryDynamicCSharpExpression Dynamic<#=et#>(DynamicCSharpArgument left, DynamicCSharpArgument right, CSharpBinderFlags binderFlags, Type context) =>
            MakeDynamicBinaryAssign(CSharpExpressionType.<#=et#>, left, right, binderFlags, context);

<#
}

foreach (var et in uts)
{
#>
        /// <summary>
        /// Creates a new expression representing a dynamically bound unary '<#=et#>' operation.
        /// </summary>
        /// <param name="operand">The expression representing the operand of the operation.</param>
        /// <returns>A new expression representing a dynamically bound unary '<#=et#>' operation.</returns>
        public static AssignUnaryDynamicCSharpExpression Dynamic<#=et#>(Expression operand) =>
            MakeDynamicUnaryAssign(CSharpExpressionType.<#=et#>, operand);

        /// <summary>
        /// Creates a new expression representing a dynamically bound unary '<#=et#>' operation.
        /// </summary>
        /// <param name="operand">The dynamic argument representing the operand of the operation.</param>
        /// <returns>A new expression representing a dynamically bound unary '<#=et#>' operation.</returns>
        public static AssignUnaryDynamicCSharpExpression Dynamic<#=et#>(DynamicCSharpArgument operand) =>
            MakeDynamicUnaryAssign(CSharpExpressionType.<#=et#>, operand);

        /// <summary>
        /// Creates a new expression representing a dynamically bound unary '<#=et#>' operation with the specified binder flags.
        /// </summary>
        /// <param name="operand">The dynamic argument representing the operand of the operation.</param>
        /// <param name="binderFlags">The binder flags to use for the dynamic operation.</param>
        /// <returns>A new expression representing a dynamically bound unary '<#=et#>' operation.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Inherited from the type name.")]
        public static AssignUnaryDynamicCSharpExpression Dynamic<#=et#>(DynamicCSharpArgument operand, CSharpBinderFlags binderFlags) =>
            MakeDynamicUnaryAssign(CSharpExpressionType.<#=et#>, operand, binderFlags);

        /// <summary>
        /// Creates a new expression representing a dynamically bound unary '<#=et#>' operation with the specified binder flags and the specified type context.
        /// </summary>
        /// <param name="operand">The dynamic argument representing the operand of the operation.</param>
        /// <param name="binderFlags">The binder flags to use for the dynamic operation.</param>
        /// <param name="context">The type representing the context in which the dynamic operation is bound.</param>
        /// <returns>A new expression representing a dynamically bound unary '<#=et#>' operation.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Inherited from the type name.")]
        public static AssignUnaryDynamicCSharpExpression Dynamic<#=et#>(DynamicCSharpArgument operand, CSharpBinderFlags binderFlags, Type context) =>
            MakeDynamicUnaryAssign(CSharpExpressionType.<#=et#>, operand, binderFlags, context);

<#
}
#>
        private static void CheckBinaryAssign(CSharpExpressionType binaryType)
        {
            switch (binaryType)
            {
                case CSharpExpressionType.Assign:
                case CSharpExpressionType.NullCoalescingAssign:
<#
foreach (var et in bts)
{
#>
                case CSharpExpressionType.<#=et#>:
<#
}
#>
                    break;
                default:
                    throw LinqError.NotSupported();
            }
        }

        private static void CheckUnaryAssign(CSharpExpressionType unaryType)
        {
            switch (unaryType)
            {
<#
foreach (var et in uts)
{
#>
                case CSharpExpressionType.<#=et#>:
<#
}
#>
                    break;
                default:
                    throw LinqError.NotSupported();
            }
        }
    }
}