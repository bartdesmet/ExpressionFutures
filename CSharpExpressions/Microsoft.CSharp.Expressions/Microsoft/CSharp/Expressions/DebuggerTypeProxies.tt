// Prototyping extended expression trees for C#.
//
// bartde - November 2015

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;

namespace Microsoft.CSharp.Expressions
{
<#
var path = this.Host.ResolveAssemblyReference(@"$(ProjectDir)\$(OutputPath)\$(AssemblyName).dll").Replace(@"\\", @"\");
if (File.Exists(path))
{
    var domain = this.Host.ProvideTemplatingAppDomain("");
    domain.SetData("path", path);
    domain.DoCallBack(() =>
    {
        var pathLocal = (string)AppDomain.CurrentDomain.GetData("path");
        var dir = Path.GetDirectoryName(pathLocal);
        foreach (var file in Directory.GetFiles(dir, "*.dll"))
        {
            Assembly.LoadFile(file);
        }

        // NB: just good enough for our nodes; not full-fledged in any shape or form
        var toCSharp = default(Func<Type, string>);
        toCSharp = new Func<Type, string>(t =>
        {
            if (t.IsGenericType)
            {
                var g = t.GetGenericTypeDefinition().FullName;
                g = g.Substring(0, g.LastIndexOf('`'));
                return g + "<" + string.Join(", ", t.GetGenericArguments().Select(toCSharp)) + ">";
            }
            else
            {
                return t.FullName;
            }
        });

        var asm = Assembly.LoadFile(pathLocal);
        var types = asm.GetTypes();
        foreach (var type in types.OrderBy(t => t.Name))
        {
            if (type.IsPublic && !type.IsGenericType && !type.IsEnum && type.FullName.StartsWith("Microsoft.CSharp.Expressions") && type.GetProperty("DebugView", BindingFlags.NonPublic | BindingFlags.Instance) != null)
            {
#>
    [DebuggerTypeProxy(typeof(<#=type.Name#>Proxy))]
    partial class <#=type.Name#>
    {
    }

    [ExcludeFromCodeCoverage]
    internal class <#=type.Name#>Proxy
    {
        private readonly <#=type.Name#> _node;

        public <#=type.Name#>Proxy(<#=type.Name#> node)
        {
            _node = node;
        }

<#
//if (type.Name != "CSharpExpressionVisitor")
{
#>
        public string DebugView => _node.DebugView;

<#
}
#>
<#
foreach (var property in type.GetProperties().Where(p => !p.GetGetMethod().IsStatic).OrderBy(p => p.Name))
{
#>
        public <#=toCSharp(property.PropertyType)#> <#=property.Name#> => _node.<#=property.Name#>;
<#
}
#>
    }

<#
            }
        }
    });
}
#>
}