// Prototyping extended expression trees for C#.
//
// bartde - December 2015

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Linq.Expressions;

namespace Microsoft.CSharp.Expressions.Compiler
{
    partial class CSharpExpressionOptimizer
    {
        // NB: This optimization flattens void-typed blocks with no parameters which are
        //     commonly generated by reduction steps. We currently don't try to merge blocks
        //     with variables because it may extend the lifetime of variables too much or
        //     introduce shadowing issues if we're not careful. If we want to do a thorough
        //     optimization like that, we should invest in a scheduler so we can track the
        //     lifetimes of variables and can possibly reuse them. Note that generation of
        //     temporaries in various places already tries to reuse them when possible, e.g.
        //     in the async rewriter and deep inside the lambda compiler. Those are local
        //     optimizations though, so their efficiency is limited.
        //
        //     Note that this optimization also prunes out Empty statements and rewrites
        //     single-statement blocks into the single contained statement, which is more or
        //     less equivalent to "taking away curlies" in single-statement bodies, e.g. in
        //     `if` or `while` statements. This effect will be obvious when inspecting the
        //     resulting tree using ToCSharp.

        protected internal override Expression VisitBlock(BlockCSharpExpression node)
        {
            if (CanOptimize(node))
            {
                return FlattenBlocks(node);
            }

            var variables = VisitAndConvert(node.Variables, nameof(VisitBlock));
            var statements = VisitSequence(node.Statements);
            var returnLabel = VisitLabelTarget(node.ReturnLabel);

            return node.Update(variables, statements, returnLabel);
        }

        protected override Expression VisitBlock(BlockExpression node)
        {
            if (CanOptimize(node))
            {
                return FlattenBlocks(node);
            }

            var variables = VisitAndConvert(node.Variables, nameof(VisitBlock));
            var expressions = VisitSequence(node.Expressions);

            return node.Update(variables, expressions);
        }

        protected internal override CSharpSwitchCase VisitSwitchCase(CSharpSwitchCase node)
        {
            var statements = VisitSequence(node.Statements);

            return node.Update(statements);
        }

        private IEnumerable<Expression> VisitSequence(ReadOnlyCollection<Expression> expressions)
        {
            var res = default(List<Expression>);

            var n = expressions.Count;

            for (var i = 0; i < n; i++)
            {
                var expression = expressions[i];
                var rewritten = Visit(expression);

                if (TryGetStatements(rewritten, out IEnumerable<Expression>? statements))
                {
                    if (res == null)
                    {
                        res = Clone(expressions, i);
                    }

                    res.AddRange(statements);
                }
                else
                {
                    if (rewritten != expression && res == null)
                    {
                        res = Clone(expressions, i);
                    }

                    if (res != null)
                    {
                        res.Add(rewritten);
                    }
                }
            }

            if (res != null)
            {
                return res;
            }

            return expressions;
        }

        private static bool TryGetStatements(Expression node, [NotNullWhen(true)] out IEnumerable<Expression>? statements)
        {
            if (node.Type == typeof(void))
            {
                if (node is BlockExpression block)
                {
                    if (block.Variables.Count == 0)
                    {
                        // NB: called after recursive visit, so just return the collection
                        statements = block.Expressions;
                        return true;
                    }
                }
                else
                {
                    if (node is BlockCSharpExpression csblock)
                    {
                        if (csblock.Variables.Count == 0)
                        {
                            // NB: called after recursive visit, so just return the collection
                            statements = csblock.Statements;
                            return true;
                        }
                    }
                }
            }

            statements = null;
            return false;
        }

        private Expression FlattenBlocks(Expression node)
        {
            var stmts = FlattenBlocksCore(node).ToList();

            if (stmts.Count == 0)
            {
                return Expression.Empty();
            }
            else if (stmts.Count == 1 && stmts[0].Type == typeof(void))
            {
                return stmts[0];
            }
            else
            {
                return Expression.Block(typeof(void), stmts);
            }
        }

        private IEnumerable<Expression> FlattenBlocksCore(Expression node)
        {
            // TODO: Nested iterators can get very expensive, so we should rewrite this at
            //       some point without using recursion and LINQ constructs.

            if (node.NodeType == ExpressionType.Default && node.Type == typeof(void))
            {
                return Array.Empty<Expression>();
            }

            if (node is BlockExpression block)
            {
                if (CanOptimize(block))
                {
                    return block.Expressions.SelectMany(FlattenBlocksCore);
                }
            }
            else
            {
                if (node is BlockCSharpExpression csblock)
                {
                    if (CanOptimize(csblock))
                    {
                        return csblock.Statements.SelectMany(FlattenBlocksCore);
                    }
                }
            }

            return new[] { Visit(node) };
        }

        private static bool CanOptimize(BlockExpression block)
        {
            return block.Type == typeof(void) && block.Variables.Count == 0;
        }

        private static bool CanOptimize(BlockCSharpExpression block)
        {
            return block.Type == typeof(void) && block.Variables.Count == 0;
        }
    }
}
