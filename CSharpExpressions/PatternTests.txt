//
// Var
//
(Expression<Func<object, bool>>)(o => o is var x)
(Expression<Func<int,    bool>>)(o => o is var x)
(Expression<Func<int?,   bool>>)(o => o is var x)

//
// Declaration
//
(Expression<Func<object, bool>>)(o => o is int x)
(Expression<Func<int,    bool>>)(o => o is int x)
(Expression<Func<int?,   bool>>)(o => o is int x)

//
// Constant null
//
(Expression<Func<object, bool>>)(o => o is null)
(Expression<Func<int?,   bool>>)(o => o is null)

//
// Constant
//
(Expression<Func<object, bool>>)(o => o is 42)
(Expression<Func<int?,   bool>>)(o => o is 42)
(Expression<Func<int,    bool>>)(o => o is 42)

(Expression<Func<object, bool>>)(o => o is ConsoleColor.Red)
(Expression<Func<object, bool>>)(o => o is "bar")
(Expression<Func<object, bool>>)(o => o is 42UL)
(Expression<Func<object, bool>>)(o => o is Math.PI)

//
// Relational
//
(Expression<Func<object, bool>>)(o => o is > 0)
(Expression<Func<int?, bool>>)(o => o is > 0)
(Expression<Func<int, bool>>)(o => o is > 0)

(Expression<Func<long, bool>>)(o => o is > 1)
(Expression<Func<long, bool>>)(o => o is >= 2)
(Expression<Func<long, bool>>)(o => o is < 3)
(Expression<Func<long, bool>>)(o => o is <= 4)

//
// Not
//
(Expression<Func<object, bool>>)(o => o is not null)
(Expression<Func<object, bool>>)(o => o is not 42)
(Expression<Func<object, bool>>)(o => o is not not null)
(Expression<Func<object, bool>>)(o => o is not not 42)

//
// Or
//
(Expression<Func<object, bool>>)(o => o is 42 or 43)

//
// And
//
(Expression<Func<object, bool>>)(o => o is >= 0 and < 10)

//
// Property
//
(Expression<Func<object, bool>>)(o => o is Point { X: 0, Y: 1 })
(Expression<Func<object, bool>>)(o => o is Point { Y: <10, X: >0 } p)

//
// Positional tuple
//
(Expression<Func<(int, int), bool>>)(o => o is (1, 2))
(Expression<Func<(int x, int y), bool>>)(o => o is (x: >0, y: <=10))  // NB: Reordering is not supported.

//
// Positional deconstruct
//
(Expression<Func<Point, bool>>)(o => o is (1, 2))
(Expression<Func<Point, bool>>)(o => o is (x: 1, y: 2))  // NB: Reordering is not supported.

// ITuple
(Expression<Func<object, bool>>)(o => o is (1, 2))
