// Prototyping extended expression trees for C#.
//
// bartde - December 2015

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.tt" #>
<#
var exprs = new string[]
{
    "CSharpExpression.PostIncrementAssign(Expression.Parameter(typeof(int)))",
    "/* BUG */ CSharpExpression.PostIncrementAssign(Expression.Parameter(typeof(int)), typeof(Math).GetMethod(\"Abs\", new[] { typeof(int) }))",
    "/* BUG */ CSharpExpression.PostDecrementAssign(Expression.Parameter(typeof(int)), typeof(Math).GetMethod(\"Abs\", new[] { typeof(int) }))",
    "CSharpExpression.PreDecrementAssignChecked(Expression.Parameter(typeof(int)))",
    "CSharpExpression.AddAssign(Expression.Parameter(typeof(int)), Expression.Constant(1))",

    "CSharpExpression.NullCoalescingAssign(Expression.Parameter(typeof(int?)), Expression.Constant(1))",
    "CSharpExpression.NullCoalescingAssign(Expression.Parameter(typeof(string)), Expression.Constant(\"foo\"))",
    
    "CSharpExpression.NewMultidimensionalArrayInit(typeof(int), new[] { 1, 1 }, Expression.Constant(42))",
    "CSharpExpression.NewMultidimensionalArrayInit(typeof(int), new[] { 1, 2 }, Expression.Constant(42), Expression.Constant(43))",
    "CSharpExpression.NewMultidimensionalArrayInit(typeof(int), new[] { 2, 1 }, Expression.Constant(42), Expression.Constant(43))",
    "CSharpExpression.NewMultidimensionalArrayInit(typeof(int), new[] { 2, 2 }, Expression.Constant(42), Expression.Constant(43), Expression.Constant(44), Expression.Constant(45))",
    "CSharpExpression.NewMultidimensionalArrayInit(typeof(int), new[] { 2, 3, 5 }, Enumerable.Range(0, 2 * 3 * 5).Select(i => Expression.Constant(i)))",
    "Expression.ArrayAccess(CSharpExpression.NewMultidimensionalArrayInit(typeof(int), new[] { 1, 1 }, Expression.Constant(42)), Expression.Constant(0), Expression.Constant(0))",

    "CSharpExpression.Await(Expression.Default(typeof(Task<int>)))",
    "DynamicCSharpExpression.DynamicAwait(Expression.Default(typeof(Task<int>)), false, typeof(object))",
    "CSharpExpression.AsyncLambda<Func<Task<int>>>(CSharpExpression.Await(Expression.Default(typeof(Task<int>))))",
    "CSharpExpression.AsyncLambda<Func<Task<int>>>(Expression.Block(typeof(int), CSharpExpression.Await(Expression.Default(typeof(Task<int>)))))",
    "CSharpExpression.AsyncLambda<Func<Task<int>>>(CSharpExpression.Block(new[] { CSharpExpression.Await(Expression.Default(typeof(Task<int>))) }, _lbl3))",
    "CSharpExpression.AsyncLambda<Func<bool, string, Task<int>>>(CSharpExpression.Await(Expression.Default(typeof(Task<int>))), Expression.Parameter(typeof(bool), \"b\"), Expression.Parameter(typeof(string), \"s\"))",

    "CSharpExpression.Call(typeof(Math).GetMethod(\"Abs\", new[] { typeof(int) }), CSharpExpression.Bind(typeof(Math).GetMethod(\"Abs\", new[] { typeof(int) }).GetParameters()[0], Expression.Constant(42)))",
    "CSharpExpression.Call(Expression.Default(typeof(string)), typeof(string).GetMethod(\"Substring\", new[] { typeof(int), typeof(int) }), CSharpExpression.Bind(typeof(string).GetMethod(\"Substring\", new[] { typeof(int), typeof(int) }).GetParameters()[1], Expression.Constant(1)), CSharpExpression.Bind(typeof(string).GetMethod(\"Substring\", new[] { typeof(int), typeof(int) }).GetParameters()[0], Expression.Constant(2)))",
    "Expression.Property(CSharpExpression.Call(Expression.Default(typeof(string)), typeof(string).GetMethod(\"Substring\", new[] { typeof(int) }), CSharpExpression.Bind(typeof(string).GetMethod(\"Substring\", new[] { typeof(int) }).GetParameters()[0], Expression.Constant(42))), \"Length\")",
    "CSharpExpression.Call(null, typeof(Activator).GetMethod(\"CreateInstance\", new Type[0]).MakeGenericMethod(typeof(string)))",
    "CSharpExpression.Invoke(Expression.Default(typeof(Action<int>)), CSharpExpression.Bind(typeof(Action<int>).GetMethod(\"Invoke\").GetParameters()[0], Expression.Constant(42)))",
    "CSharpExpression.New(typeof(TimeSpan).GetConstructor(new[] { typeof(long) }), CSharpExpression.Bind(typeof(TimeSpan).GetConstructor(new[] { typeof(long) }).GetParameters()[0], Expression.Constant(42L)))",
    "Expression.Property(CSharpExpression.New(typeof(TimeSpan).GetConstructor(new[] { typeof(long) }), CSharpExpression.Bind(typeof(TimeSpan).GetConstructor(new[] { typeof(long) }).GetParameters()[0], Expression.Constant(42L))), \"Ticks\")",
    "CSharpExpression.Index(Expression.Default(typeof(List<int>)), typeof(List<int>).GetProperty(\"Item\"), CSharpExpression.Bind(typeof(List<int>).GetProperty(\"Item\").GetIndexParameters()[0], Expression.Constant(42)))",

    "CSharpExpression.ConditionalArrayIndex(Expression.Default(typeof(string[])), Expression.Constant(42))",
    "CSharpExpression.ConditionalCall(Expression.Default(typeof(string)), typeof(string).GetMethod(\"Substring\", new[] { typeof(int) }), CSharpExpression.Bind(typeof(string).GetMethod(\"Substring\", new[] { typeof(int) }).GetParameters()[0], Expression.Constant(42)))",
    // !!!BUG!!! "CSharpExpression.ConditionalInvoke(Expression.Default(typeof(Action<int>)), CSharpExpression.Bind(typeof(Action<int>).GetMethod(\"Invoke\").GetParameters()[0], Expression.Constant(42)))",
    "CSharpExpression.ConditionalIndex(Expression.Default(typeof(List<int>)), typeof(List<int>).GetProperty(\"Item\"), CSharpExpression.Bind(typeof(List<int>).GetProperty(\"Item\").GetIndexParameters()[0], Expression.Constant(42)))",
    "CSharpExpression.ConditionalProperty(Expression.Default(typeof(string)), typeof(string).GetProperty(\"Length\"))",
    "CSharpExpression.ConditionalAccess(Expression.Default(typeof(string)), CSharpExpression.ConditionalReceiver(typeof(string)), Expression.Property(CSharpExpression.ConditionalReceiver(typeof(string)), \"Length\"))",

    "DynamicCSharpExpression.DynamicAdd(Expression.Constant(1), Expression.Constant(2))",
    "DynamicCSharpExpression.DynamicAdd(DynamicCSharpExpression.DynamicArgument(Expression.Constant(1)), DynamicCSharpExpression.DynamicArgument(Expression.Constant(2)), CSharpBinderFlags.CheckedContext)",
    "DynamicCSharpExpression.DynamicNegate(Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicConvert(Expression.Constant(1), typeof(int), CSharpBinderFlags.ConvertExplicit)",
    "DynamicCSharpExpression.DynamicGetMember(Expression.Default(typeof(string)), \"Length\")",
    "DynamicCSharpExpression.DynamicGetIndex(Expression.Default(typeof(List<int>)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicInvoke(Expression.Default(typeof(Action<int>)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicInvokeMember(typeof(Math), \"Abs\", Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicInvokeMember(typeof(Activator), \"CreateInstance\", new[] { typeof(int) })",
    "DynamicCSharpExpression.DynamicInvokeMember(Expression.Default(typeof(string)), \"Substring\", Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicInvokeMember(Expression.Default(typeof(string)), \"Substring\", new[] { DynamicCSharpExpression.DynamicArgument(Expression.Constant(1), \"startIndex\") })",
    "DynamicCSharpExpression.DynamicInvokeMember(Expression.Default(typeof(string)), \"Substring\", new[] { DynamicCSharpExpression.DynamicArgument(Expression.Constant(1), \"startIndex\", CSharpArgumentInfoFlags.NamedArgument) })",
    "DynamicCSharpExpression.DynamicInvokeMember(Expression.Default(typeof(string)), \"Substring\", new[] { DynamicCSharpExpression.DynamicArgument(Expression.Constant(1), \"startIndex\", CSharpArgumentInfoFlags.NamedArgument), DynamicCSharpExpression.DynamicArgument(Expression.Constant(2), \"length\", CSharpArgumentInfoFlags.NamedArgument) })",
    "DynamicCSharpExpression.DynamicInvokeConstructor(typeof(TimeSpan), Expression.Constant(1L))",
    "DynamicCSharpExpression.DynamicAddAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicAddAssignChecked(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicSubtractAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicSubtractAssignChecked(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicMultiplyAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicMultiplyAssignChecked(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicDivideAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicModuloAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicAndAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicOrAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicExclusiveOrAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicLeftShiftAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicRightShiftAssign(Expression.Parameter(typeof(object)), Expression.Constant(1))",
    "DynamicCSharpExpression.DynamicPreIncrementAssign(Expression.Parameter(typeof(object)))",
    "DynamicCSharpExpression.DynamicPreIncrementAssignChecked(Expression.Parameter(typeof(object)))",
    "DynamicCSharpExpression.DynamicPreDecrementAssign(Expression.Parameter(typeof(object)))",
    "DynamicCSharpExpression.DynamicPreDecrementAssignChecked(Expression.Parameter(typeof(object)))",
    "DynamicCSharpExpression.DynamicPostIncrementAssign(Expression.Parameter(typeof(object)))",
    "DynamicCSharpExpression.DynamicPostIncrementAssignChecked(Expression.Parameter(typeof(object)))",
    "DynamicCSharpExpression.DynamicPostDecrementAssign(Expression.Parameter(typeof(object)))",
    "DynamicCSharpExpression.DynamicPostDecrementAssignChecked(Expression.Parameter(typeof(object)))",

    "CSharpExpression.Block(new Expression[] { Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")) }, Expression.Label())",
    "CSharpExpression.Block(new Expression[] { Expression.Constant(42) }, _lbl3)",
    "CSharpExpression.Block(new[] { Expression.Parameter(typeof(int)) }, new Expression[] { Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"stmt1\")), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"stmt2\")), Expression.Return(_lbl1) }, _lbl1)",
    "CSharpExpression.Block(new[] { Expression.Parameter(typeof(int)) }, new Expression[] { Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"stmt1\")), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"stmt2\")), Expression.Return(_lbl3, Expression.Constant(1)) }, _lbl3)",
    "Expression.Lambda(CSharpExpression.Block(new Expression[] { Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")) }, Expression.Label()))",

    "CSharpStatement.Do(Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")), Expression.Constant(true))",
    "CSharpStatement.While(Expression.Constant(true), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",
    "CSharpStatement.For(new ParameterExpression[0], new Expression[0], null, new Expression[0], Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",
    "CSharpStatement.For(new[] { _par1 }, new[] { Expression.Assign(_par1, Expression.Constant(1)) }, Expression.LessThan(Expression.Parameter(typeof(int)), Expression.Constant(10)), new[] { Expression.PostIncrementAssign(_par1) }, Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",
    "CSharpStatement.For(new[] { _par1 }, new[] { Expression.Assign(_par1, Expression.Constant(1)), Expression.Assign(_par1, Expression.Constant(2)) }, Expression.LessThan(Expression.Parameter(typeof(int)), Expression.Constant(10)), new[] { Expression.PostIncrementAssign(_par1) }, Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",
    "CSharpStatement.For(new[] { _par1 }, new[] { CSharpExpression.Assign(_par1, Expression.Constant(1)) }, Expression.LessThan(Expression.Parameter(typeof(int)), Expression.Constant(10)), new[] { Expression.PostIncrementAssign(_par1) }, Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",
    "CSharpStatement.For(new[] { _par1, _par2 }, new[] { Expression.Assign(_par1, Expression.Constant(0)), Expression.Assign(_par2, Expression.Constant(10)) }, Expression.LessThan(_par1, _par2), new[] { Expression.PostIncrementAssign(_par1), Expression.PreDecrementAssign(_par2) }, Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",
    "CSharpStatement.For(new[] { _par1 }, new Expression[0], Expression.LessThan(Expression.Parameter(typeof(int)), Expression.Constant(10)), new[] { Expression.PostIncrementAssign(_par1) }, Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",
    "CSharpStatement.For(new[] { _par1, _par3 }, new[] { Expression.Assign(_par1, Expression.Constant(0)), Expression.Assign(_par3, Expression.Constant(10L)) }, Expression.LessThan(_par1, _par2), new[] { Expression.PostIncrementAssign(_par1), Expression.PreDecrementAssign(_par2) }, Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",
    "CSharpStatement.ForEach(Expression.Parameter(typeof(int)), Expression.Default(typeof(int[])), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",

    "CSharpStatement.Switch(Expression.Default(typeof(int)), Expression.Label(\"break\"))",
    "CSharpStatement.Switch(Expression.Default(typeof(int)), Expression.Label(\"break\"), CSharpStatement.SwitchCase(new object[] { 1, 2 }, Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"case 1,2\"))), CSharpStatement.SwitchCaseDefault(Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"default\"))))",
    "CSharpStatement.Switch(Expression.Default(typeof(string)), _lbl1, new[] { Expression.Parameter(typeof(int)) }, new[] { CSharpStatement.SwitchCase(new object[] { \"bar\", \"foo\", \"this is a \\\"quoted\\\" string\", null, CSharpStatement.SwitchCaseDefaultValue }, Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")), Expression.Break(_lbl1)) })",
    "CSharpStatement.Switch(Expression.Default(typeof(string)), _lbl1, new[] { _par1 }, new[] { CSharpStatement.SwitchCase(new object[] { \"bar\" }, Expression.Block(typeof(void), Expression.Assign(_par1, Expression.Constant(0))), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")), Expression.Break(_lbl1)) })",
    "CSharpStatement.Switch(Expression.Default(typeof(string)), _lbl1, new[] { _par1 }, new[] { CSharpStatement.SwitchCase(new object[] { \"bar\" }, Expression.Block(typeof(void), new[] { _par2 }, Expression.Assign(_par1, _par2)), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"bar\")), Expression.Break(_lbl1)), CSharpStatement.SwitchCase(new object[] { \"foo\" }, Expression.Block(typeof(void), Expression.Assign(_par1, Expression.Constant(1))), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"foo\")), Expression.Break(_lbl1)) })",

    "CSharpStatement.GotoLabel(Expression.Label())",
    "CSharpStatement.GotoCase(1)",
    "CSharpStatement.GotoCase(null)",
    "CSharpStatement.GotoDefault()",

    "CSharpStatement.Lock(Expression.Default(typeof(object)), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",

    "CSharpStatement.Using(Expression.Default(typeof(IDisposable)), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",
    "CSharpStatement.Using(Expression.Parameter(typeof(IDisposable)), Expression.Default(typeof(IDisposable)), Expression.Call(null, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(string) }), Expression.Constant(\"body\")))",

    "Expression.AddChecked(CSharpExpression.PostIncrementAssign(_par1), Expression.Constant(1))",
    "Expression.AddChecked(CSharpExpression.PostIncrementAssignChecked(_par1), Expression.Constant(1))",
    "Expression.NegateChecked(CSharpExpression.PostIncrementAssign(_par1))",
    "Expression.NegateChecked(CSharpExpression.PostIncrementAssignChecked(_par1))",
    "Expression.NegateChecked(CSharpExpression.AddAssign(_par1, Expression.Constant(1)))",
    "Expression.NegateChecked(CSharpExpression.AddAssignChecked(_par1, Expression.Constant(1)))",
    "CSharpExpression.AddAssignChecked(_par1, Expression.Negate(Expression.Constant(1)))",
    "CSharpExpression.AddAssignChecked(_par1, Expression.NegateChecked(Expression.Constant(1)))",
    "Expression.NegateChecked(Expression.Convert(DynamicCSharpExpression.MakeDynamicUnary(ExpressionType.Negate, _par1), typeof(int)))",
    "Expression.NegateChecked(Expression.Convert(DynamicCSharpExpression.MakeDynamicUnary(ExpressionType.NegateChecked, _par1), typeof(int)))",
    "Expression.NegateChecked(Expression.Convert(DynamicCSharpExpression.MakeDynamicBinary(ExpressionType.Add, _par1, Expression.Constant(1)), typeof(int)))",
    "Expression.NegateChecked(Expression.Convert(DynamicCSharpExpression.MakeDynamicBinary(ExpressionType.AddChecked, _par1, Expression.Constant(1)), typeof(int)))",
    "Expression.Negate(Expression.Convert(DynamicCSharpExpression.MakeDynamicUnary(ExpressionType.Negate, _par1), typeof(int)))",
    "Expression.Negate(Expression.Convert(DynamicCSharpExpression.MakeDynamicUnary(ExpressionType.NegateChecked, _par1), typeof(int)))",
    "Expression.Negate(Expression.Convert(DynamicCSharpExpression.MakeDynamicBinary(ExpressionType.Add, _par1, Expression.Constant(1)), typeof(int)))",
    "Expression.Negate(Expression.Convert(DynamicCSharpExpression.MakeDynamicBinary(ExpressionType.AddChecked, _par1, Expression.Constant(1)), typeof(int)))",
    "DynamicCSharpExpression.MakeDynamicUnary(ExpressionType.Increment, _par1)",
    "DynamicCSharpExpression.MakeDynamicUnary(ExpressionType.Decrement, _par1)",
    "DynamicCSharpExpression.MakeDynamicUnary(ExpressionType.IsTrue, _par1)",
    "DynamicCSharpExpression.MakeDynamicUnary(ExpressionType.IsFalse, _par1)",

    "DynamicCSharpExpression.DynamicPreIncrementAssign(_par1)",
    "DynamicCSharpExpression.DynamicPreDecrementAssign(_par1)",
    "DynamicCSharpExpression.DynamicPostIncrementAssign(_par1)",
    "DynamicCSharpExpression.DynamicPostDecrementAssign(_par1)",
    "DynamicCSharpExpression.DynamicPreIncrementAssignChecked(_par1)",
    "DynamicCSharpExpression.DynamicPreDecrementAssignChecked(_par1)",
    "DynamicCSharpExpression.DynamicPostIncrementAssignChecked(_par1)",
    "DynamicCSharpExpression.DynamicPostDecrementAssignChecked(_par1)",

    "CSharpExpression.InterpolatedString()",
    "CSharpExpression.InterpolatedString(CSharpExpression.InterpolationStringLiteral(\"foo\"))",
    "CSharpExpression.InterpolatedString(CSharpExpression.InterpolationStringLiteral(\"x = \"), CSharpExpression.InterpolationStringInsert(Expression.Constant(42)))",
    "CSharpExpression.InterpolatedString(CSharpExpression.InterpolationStringLiteral(\"x = \"), CSharpExpression.InterpolationStringInsert(Expression.Constant(42), \"N\"))",
    "CSharpExpression.InterpolatedString(CSharpExpression.InterpolationStringLiteral(\"x = \"), CSharpExpression.InterpolationStringInsert(Expression.Constant(42), \"N\", 2))",
    "CSharpExpression.InterpolatedString(CSharpExpression.InterpolationStringLiteral(\"x = \"), CSharpExpression.InterpolationStringInsert(Expression.Constant(42), 2))",

    "CSharpExpression.Discard(typeof(int))",

    "CSharpExpression.TupleLiteral(typeof(ValueTuple<int, int>), Expression.Constant(1), Expression.Constant(2))",
    "CSharpExpression.TupleLiteral(typeof(ValueTuple<int, int>), new Expression[] { Expression.Constant(1), Expression.Constant(2) }, new[] { \"x\", \"y\" })",

    "CSharpExpression.FromEndIndex(Expression.Constant(1))",

    "CSharpExpression.Range(Expression.Constant(1), Expression.Constant(2))",
    "CSharpExpression.Range(Expression.Constant(1), null)",
    "CSharpExpression.Range(null, Expression.Constant(2))",
    "CSharpExpression.Range(null, null)",

    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.Null())",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.Constant(Expression.Constant(42)))",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.Var(Expression.Parameter(typeof(int), \"x\")))",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.Declaration(Expression.Parameter(typeof(int), \"x\")))",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.Type(typeof(int)))",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.Discard())",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.LessThan(Expression.Constant(42)))",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.LessThanOrEqual(Expression.Constant(42)))",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.GreaterThan(Expression.Constant(42)))",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.GreaterThanOrEqual(Expression.Constant(42)))",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.Not(CSharpPattern.Null()))",
    // !!! REVIEW - Type inference !!! "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.And(CSharpPattern.Constant(Expression.Constant(42)), CSharpPattern.Constant(Expression.Constant(43))))",
    "CSharpExpression.IsPattern(Expression.Parameter(typeof(object), \"o\"), CSharpPattern.Or(CSharpPattern.Constant(Expression.Constant(42)), CSharpPattern.Constant(Expression.Constant(43))))",
};
#>
\<#@ template debug="false" hostspecific="false" language="C#" \#>
\<#@ assembly name="System.Core" \#>
\<#@ assembly name="Microsoft.CSharp" \#>
\<#@ import namespace="System" \#>
\<#@ import namespace="System.Linq" \#>
\<#@ import namespace="System.Linq.Expressions" \#>
\<#@ import namespace="System.Text" \#>
\<#@ import namespace="System.Collections.Generic" \#>
\<#@ import namespace="System.Threading.Tasks" \#>
\<#@ import namespace="System.Runtime.CompilerServices" \#>
\<#@ import namespace="Microsoft.CSharp.Expressions" \#>
\<#@ import namespace="Microsoft.CSharp.RuntimeBinder" \#>
\<#@ assembly name="System.Xml" \#>
\<#@ assembly name="System.Xml.Linq" \#>
\<#@ assembly name="$(SolutionDir)\Microsoft.CSharp.Expressions\bin\$(Configuration)\Microsoft.CSharp.Expressions.dll" \#>
\<#@ assembly name="$(SolutionDir)\System.Linq.Expressions.Debugging\bin\$(Configuration)\System.Linq.Expressions.Debugging.dll" \#>
\<#
var toEscapedString = new Func<object, string>(o => "@\"" + o.ToString().Replace("\"", "\"\"") + "\"");
var _lbl1 = Expression.Label();
var _lbl2 = Expression.Label();
var _lbl3 = Expression.Label(typeof(int));
var _par1 = Expression.Parameter(typeof(int));
var _par2 = Expression.Parameter(typeof(int));
var _par3 = Expression.Parameter(typeof(long));
\#>
// NOTE: These tests are auto-generated and can *never* fail because they assert the outcome of DebugView()
//       at runtime against the outcome obtained at compile time. However, a human should read through the
//       cases to assert the outcome is as expected.
//
//       Regressions can still be caught given that the T4 won't be re-run unless it gets saved in the IDE.

using Microsoft.CSharp.Expressions;
using Microsoft.CSharp.RuntimeBinder;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace Tests
{
    [TestClass]
    public class ToCSharpTests
    {
        private static LabelTarget _lbl1 = Expression.Label();
        private static LabelTarget _lbl2 = Expression.Label();
        private static LabelTarget _lbl3 = Expression.Label(typeof(int));
        private static ParameterExpression _par1 = Expression.Parameter(typeof(int));
        private static ParameterExpression _par2 = Expression.Parameter(typeof(int));
        private static ParameterExpression _par3 = Expression.Parameter(typeof(long));

<#
var i = 0;
foreach (var expr in exprs)
{
#>
        private Expression expr<#=i#> = <#=expr#>;
        private string dbg<#=i#> = \<#=toEscapedString(<#=expr#>.ToCSharp())\#>;

        [TestMethod]
        public void CSharp_ToCSharp_Test<#=i#>()
        {
            Assert.AreEqual(dbg<#=i#>, expr<#=i#>.ToCSharp());
        }

<#
i++;
}
#>
    }
}
