<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var nodes = new[] { "PreIncrementAssign", "PreDecrementAssign", "PostIncrementAssign", "PostDecrementAssign", "PreIncrementAssignChecked", "PreDecrementAssignChecked", "PostIncrementAssignChecked", "PostDecrementAssignChecked" };
#>
// Prototyping extended expression trees for C#.
//
// bartde - November 2015

using Microsoft.CSharp.Expressions;
using System;
using System.Linq.Expressions;
using static Tests.ReflectionUtils;

namespace Tests
{
    partial class AssignUnaryTests
    {
<#
foreach (var node in nodes)
{
#>
        [Fact]
        public void AssignUnary_Factory_<#=node#>()
        {
            var a = Expression.Parameter(typeof(int));

            foreach (var o in GetLhs())
            {
                var m = MethodInfoOf(() => Op(0));

                var a1 = CSharpExpression.<#=node#>(o);
                Assert.Same(o, a1.Operand);
                Assert.Null(a1.Method);

                var a2 = CSharpExpression.<#=node#>(o, m);
                Assert.Same(o, a2.Operand);
                Assert.Same(m, a2.Method);

                var a3 = a2.Update(o);
                Assert.Same(a3, a2);

                var a4 = a2.Update(a);
                Assert.Same(a, a4.Operand);
                Assert.Same(m, a4.Method);
            }
        }

<#
}
#>
    }
}
