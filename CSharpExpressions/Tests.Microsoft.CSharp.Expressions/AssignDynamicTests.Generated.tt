// Prototyping extended expression trees for C#.
//
// bartde - December 2015

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var bts = new[]
{
    "Assign",
    "AddAssign",
    "AndAssign",
    "DivideAssign",
    "ExclusiveOrAssign",
    "LeftShiftAssign",
    "ModuloAssign",
    "MultiplyAssign",
    "OrAssign",
    "RightShiftAssign",
    "SubtractAssign",
    "AddAssignChecked",
    "MultiplyAssignChecked",
    "SubtractAssignChecked",

    // NB, The following are not supported by design
    // "Assign",
    // "PowerAssign",
};

var uts = new[]
{
    "PreIncrementAssign",
    "PreDecrementAssign",
    "PostIncrementAssign",
    "PostDecrementAssign",
    "PreIncrementAssignChecked",
    "PreDecrementAssignChecked",
    "PostIncrementAssignChecked",
    "PostDecrementAssignChecked",
};
#>
using Microsoft.CSharp.Expressions;
using Microsoft.CSharp.RuntimeBinder;
using System.Linq.Expressions;
using Xunit;

namespace Tests
{
    partial class DynamicTests
    {
        [Fact]
        public void Dynamic_BinaryAssign_GeneratedFactories()
        {
            var le = Expression.Parameter(typeof(object));
            var re = Expression.Constant(2);

            var ld = DynamicCSharpExpression.DynamicArgument(le);
            var rd = DynamicCSharpExpression.DynamicArgument(re);

<#
var i = 0;
foreach (var et in bts)
{
    var flags = "CSharpBinderFlags.None";

    if (et.Contains("Checked"))
    {
        flags = "CSharpBinderFlags.CheckedContext";
    }
#>
            var be<#=i#> = DynamicCSharpExpression.Dynamic<#=et#>(le, re);
            Assert.Equal(CSharpExpressionType.<#=et#>, be<#=i#>.OperationNodeType);
            Assert.Same(le, be<#=i#>.Left.Expression);
            Assert.Same(re, be<#=i#>.Right.Expression);
            Assert.Equal(<#=flags#>, be<#=i#>.Flags);

            var bd<#=i#> = DynamicCSharpExpression.Dynamic<#=et#>(ld, rd);
            Assert.Equal(CSharpExpressionType.<#=et#>, bd<#=i#>.OperationNodeType);
            Assert.Same(ld, bd<#=i#>.Left);
            Assert.Same(rd, bd<#=i#>.Right);
            Assert.Equal(<#=flags#>, bd<#=i#>.Flags);

            var bf<#=i#> = DynamicCSharpExpression.Dynamic<#=et#>(ld, rd, <#=flags#>);
            Assert.Equal(CSharpExpressionType.<#=et#>, bf<#=i#>.OperationNodeType);
            Assert.Same(ld, bf<#=i#>.Left);
            Assert.Same(rd, bf<#=i#>.Right);
            Assert.Equal(<#=flags#>, bf<#=i#>.Flags);

            var bc<#=i#> = DynamicCSharpExpression.Dynamic<#=et#>(ld, rd, <#=flags#>, typeof(int));
            Assert.Equal(CSharpExpressionType.<#=et#>, bc<#=i#>.OperationNodeType);
            Assert.Same(ld, bc<#=i#>.Left);
            Assert.Same(rd, bc<#=i#>.Right);
            Assert.Equal(<#=flags#>, bc<#=i#>.Flags);
            Assert.Equal(typeof(int), bc<#=i#>.Context);

<#
    i++;
}
#>
        }

        [Fact]
        public void Dynamic_UnaryAssign_GeneratedFactories()
        {
            var oe = Expression.Parameter(typeof(object));

            var od = DynamicCSharpExpression.DynamicArgument(oe);

<#
var j = 0;
foreach (var et in uts)
{
    var flags = "CSharpBinderFlags.None";

    if (et.Contains("Checked"))
    {
        flags = "CSharpBinderFlags.CheckedContext";
    }
#>
            var ue<#=j#> = DynamicCSharpExpression.Dynamic<#=et#>(oe);
            Assert.Equal(CSharpExpressionType.<#=et#>, ue<#=j#>.OperationNodeType);
            Assert.Same(oe, ue<#=j#>.Operand.Expression);
            Assert.Equal(<#=flags#>, ue<#=j#>.Flags);

            var ud<#=j#> = DynamicCSharpExpression.Dynamic<#=et#>(od);
            Assert.Equal(CSharpExpressionType.<#=et#>, ud<#=j#>.OperationNodeType);
            Assert.Same(od, ud<#=j#>.Operand);
            Assert.Equal(<#=flags#>, ud<#=j#>.Flags);

            var uf<#=j#> = DynamicCSharpExpression.Dynamic<#=et#>(od, <#=flags#>);
            Assert.Equal(CSharpExpressionType.<#=et#>, uf<#=j#>.OperationNodeType);
            Assert.Same(od, uf<#=j#>.Operand);
            Assert.Equal(<#=flags#>, uf<#=j#>.Flags);

            var uc<#=j#> = DynamicCSharpExpression.Dynamic<#=et#>(od, <#=flags#>, typeof(int));
            Assert.Equal(CSharpExpressionType.<#=et#>, uc<#=j#>.OperationNodeType);
            Assert.Same(od, uc<#=j#>.Operand);
            Assert.Equal(<#=flags#>, uc<#=j#>.Flags);
            Assert.Equal(typeof(int), uc<#=j#>.Context);

<#
    j++;
}
#>
        }
    }
}
